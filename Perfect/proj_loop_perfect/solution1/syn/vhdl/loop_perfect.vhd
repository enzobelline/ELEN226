-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_perfect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_we0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of loop_perfect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_perfect_loop_perfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.009500,HLS_SYN_LAT=409,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=559,HLS_SYN_LUT=481,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv26_199A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001100110011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln23_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln23_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_358_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_358_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_358_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_358_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_358_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_358_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_362 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_362_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_362_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_362_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_163_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_reg_367 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_reg_367_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_reg_367_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln27_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_378_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_378_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_378_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_378_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_378_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_378_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_378_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_1_fu_230_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_1_reg_397 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_1_reg_397_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_1_reg_397_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_1_reg_397_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln23_fu_237_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_reg_402_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_reg_402_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_411_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_411_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1559_1_fu_301_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_reg_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_reg_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge_reg_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge_reg_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge_reg_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter6_storemerge_reg_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter7_storemerge_reg_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter8_storemerge_reg_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln23_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_V_1_fu_70 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_312_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_acc_V_1_load : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_74 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln24_fu_182_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_78 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_82 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_fu_148_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln25_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_1_fu_224_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1559_fu_260_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1559_fu_263_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_fu_269_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_279_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1559_fu_288_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1559_1_fu_295_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_323_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_312_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_condition_214 : BOOLEAN;
    signal ap_condition_179 : BOOLEAN;
    signal ap_condition_240 : BOOLEAN;
    signal ap_condition_186 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component loop_perfect_mac_muladd_5ns_5s_12s_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component loop_perfect_mul_mul_12s_13ns_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component loop_perfect_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mac_muladd_5ns_5s_12s_12_4_1_U1 : component loop_perfect_mac_muladd_5ns_5s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_312_p0,
        din1 => A_q0,
        din2 => grp_fu_312_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_312_p3);

    mul_mul_12s_13ns_26_4_1_U2 : component loop_perfect_mul_mul_12s_13ns_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_312_p3,
        din1 => grp_fu_323_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_323_p2);

    flow_control_loop_pipe_U : component loop_perfect_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter5_storemerge_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_214)) then 
                    ap_phi_reg_pp0_iter5_storemerge_reg_112 <= ap_const_lv6_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_storemerge_reg_112 <= ap_phi_reg_pp0_iter4_storemerge_reg_112;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter8_storemerge_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_179)) then 
                    ap_phi_reg_pp0_iter8_storemerge_reg_112 <= select_ln1559_1_fu_301_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter8_storemerge_reg_112 <= ap_phi_reg_pp0_iter7_storemerge_reg_112;
                end if;
            end if; 
        end if;
    end process;

    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_240)) then 
                    i_fu_78 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    i_fu_78 <= select_ln23_1_fu_230_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_186)) then
                if ((icmp_ln23_fu_142_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_82 <= add_ln23_fu_148_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_82 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_186)) then
                if ((icmp_ln23_fu_142_p2 = ap_const_lv1_0)) then 
                    j_fu_74 <= add_ln24_fu_182_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_74 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                acc_V_1_fu_70 <= grp_fu_312_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln23_reg_358 <= icmp_ln23_fu_142_p2;
                icmp_ln23_reg_358_pp0_iter1_reg <= icmp_ln23_reg_358;
                icmp_ln24_reg_362_pp0_iter1_reg <= icmp_ln24_reg_362;
                icmp_ln27_reg_378_pp0_iter1_reg <= icmp_ln27_reg_378;
                select_ln23_reg_367_pp0_iter1_reg <= select_ln23_reg_367;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                icmp_ln23_reg_358_pp0_iter2_reg <= icmp_ln23_reg_358_pp0_iter1_reg;
                icmp_ln23_reg_358_pp0_iter3_reg <= icmp_ln23_reg_358_pp0_iter2_reg;
                icmp_ln23_reg_358_pp0_iter4_reg <= icmp_ln23_reg_358_pp0_iter3_reg;
                icmp_ln23_reg_358_pp0_iter5_reg <= icmp_ln23_reg_358_pp0_iter4_reg;
                icmp_ln23_reg_358_pp0_iter6_reg <= icmp_ln23_reg_358_pp0_iter5_reg;
                icmp_ln24_reg_362_pp0_iter2_reg <= icmp_ln24_reg_362_pp0_iter1_reg;
                icmp_ln24_reg_362_pp0_iter3_reg <= icmp_ln24_reg_362_pp0_iter2_reg;
                icmp_ln27_reg_378_pp0_iter2_reg <= icmp_ln27_reg_378_pp0_iter1_reg;
                icmp_ln27_reg_378_pp0_iter3_reg <= icmp_ln27_reg_378_pp0_iter2_reg;
                icmp_ln27_reg_378_pp0_iter4_reg <= icmp_ln27_reg_378_pp0_iter3_reg;
                icmp_ln27_reg_378_pp0_iter5_reg <= icmp_ln27_reg_378_pp0_iter4_reg;
                icmp_ln27_reg_378_pp0_iter6_reg <= icmp_ln27_reg_378_pp0_iter5_reg;
                icmp_ln27_reg_378_pp0_iter7_reg <= icmp_ln27_reg_378_pp0_iter6_reg;
                select_ln23_1_reg_397_pp0_iter5_reg <= select_ln23_1_reg_397;
                select_ln23_1_reg_397_pp0_iter6_reg <= select_ln23_1_reg_397_pp0_iter5_reg;
                select_ln23_1_reg_397_pp0_iter7_reg <= select_ln23_1_reg_397_pp0_iter6_reg;
                select_ln23_reg_367_pp0_iter2_reg <= select_ln23_reg_367_pp0_iter1_reg;
                tmp_reg_411_pp0_iter5_reg <= tmp_reg_411;
                tmp_reg_411_pp0_iter6_reg <= tmp_reg_411_pp0_iter5_reg;
                trunc_ln23_reg_402_pp0_iter5_reg <= trunc_ln23_reg_402;
                trunc_ln23_reg_402_pp0_iter6_reg <= trunc_ln23_reg_402_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_storemerge_reg_112 <= ap_phi_reg_pp0_iter0_storemerge_reg_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_storemerge_reg_112 <= ap_phi_reg_pp0_iter1_storemerge_reg_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_storemerge_reg_112 <= ap_phi_reg_pp0_iter2_storemerge_reg_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_storemerge_reg_112 <= ap_phi_reg_pp0_iter3_storemerge_reg_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter6_storemerge_reg_112 <= ap_phi_reg_pp0_iter5_storemerge_reg_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter7_storemerge_reg_112 <= ap_phi_reg_pp0_iter6_storemerge_reg_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_142_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln24_reg_362 <= icmp_ln24_fu_157_p2;
                icmp_ln27_reg_378 <= icmp_ln27_fu_176_p2;
                select_ln23_reg_367 <= select_ln23_fu_163_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_reg_358_pp0_iter3_reg = ap_const_lv1_0))) then
                select_ln23_1_reg_397 <= select_ln23_1_fu_230_p3;
                trunc_ln23_reg_402 <= trunc_ln23_fu_237_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln23_fu_237_p1 = ap_const_lv1_0) and (icmp_ln27_reg_378_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln23_reg_358_pp0_iter3_reg = ap_const_lv1_0))) then
                tmp_reg_411 <= grp_fu_312_p3(11 downto 11);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_address0 <= zext_ln24_fu_171_p1(5 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln23_fu_308_p1(5 - 1 downto 0);

    B_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_d0 <= ap_phi_reg_pp0_iter8_storemerge_reg_112;

    B_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, icmp_ln27_reg_378_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln27_reg_378_pp0_iter7_reg = ap_const_lv1_1))) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln23_1_fu_224_p2 <= std_logic_vector(unsigned(i_fu_78) + unsigned(ap_const_lv5_1));
    add_ln23_fu_148_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln24_fu_182_p2 <= std_logic_vector(unsigned(select_ln23_fu_163_p3) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_179_assign_proc : process(icmp_ln23_reg_358_pp0_iter6_reg, icmp_ln27_reg_378_pp0_iter6_reg, trunc_ln23_reg_402_pp0_iter6_reg)
    begin
                ap_condition_179 <= ((trunc_ln23_reg_402_pp0_iter6_reg = ap_const_lv1_0) and (icmp_ln27_reg_378_pp0_iter6_reg = ap_const_lv1_1) and (icmp_ln23_reg_358_pp0_iter6_reg = ap_const_lv1_0));
    end process;


    ap_condition_186_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_186 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_214_assign_proc : process(icmp_ln23_reg_358_pp0_iter3_reg, icmp_ln27_reg_378_pp0_iter3_reg, trunc_ln23_fu_237_p1)
    begin
                ap_condition_214 <= ((trunc_ln23_fu_237_p1 = ap_const_lv1_1) and (icmp_ln27_reg_378_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln23_reg_358_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_condition_240_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init)
    begin
                ap_condition_240 <= ((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln23_fu_142_p2)
    begin
        if (((icmp_ln23_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_storemerge_reg_112 <= "XXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_acc_V_1_load_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, acc_V_1_fu_70, grp_fu_312_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_sig_allocacmp_acc_V_1_load <= grp_fu_312_p3;
        else 
            ap_sig_allocacmp_acc_V_1_load <= acc_V_1_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_fu_74, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_74;
        end if; 
    end process;

    grp_fu_312_p0 <= grp_fu_312_p00(5 - 1 downto 0);
    grp_fu_312_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_reg_367),10));
    grp_fu_312_p2 <= 
        ap_const_lv12_0 when (icmp_ln25_fu_208_p2(0) = '1') else 
        ap_sig_allocacmp_acc_V_1_load;
    grp_fu_323_p1 <= ap_const_lv26_199A(13 - 1 downto 0);
    icmp_ln23_fu_142_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_190) else "0";
    icmp_ln24_fu_157_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_14) else "0";
    icmp_ln25_fu_208_p2 <= "1" when (select_ln23_reg_367_pp0_iter2_reg = ap_const_lv5_0) else "0";
    icmp_ln27_fu_176_p2 <= "1" when (select_ln23_fu_163_p3 = ap_const_lv5_13) else "0";
    select_ln1559_1_fu_301_p3 <= 
        sub_ln1559_1_fu_295_p2 when (tmp_reg_411_pp0_iter6_reg(0) = '1') else 
        tmp_2_fu_279_p4;
    select_ln1559_fu_288_p3 <= 
        tmp_1_fu_269_p4 when (tmp_reg_411_pp0_iter6_reg(0) = '1') else 
        tmp_2_fu_279_p4;
    select_ln23_1_fu_230_p3 <= 
        add_ln23_1_fu_224_p2 when (icmp_ln24_reg_362_pp0_iter3_reg(0) = '1') else 
        i_fu_78;
    select_ln23_fu_163_p3 <= 
        ap_const_lv5_0 when (icmp_ln24_fu_157_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    sub_ln1559_1_fu_295_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(select_ln1559_fu_288_p3));
    sub_ln1559_fu_263_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(trunc_ln1559_fu_260_p1));
    tmp_1_fu_269_p4 <= sub_ln1559_fu_263_p2(22 downto 17);
    tmp_2_fu_279_p4 <= grp_fu_323_p2(22 downto 17);
    trunc_ln1559_fu_260_p1 <= grp_fu_323_p2(25 - 1 downto 0);
    trunc_ln23_fu_237_p1 <= select_ln23_1_fu_230_p3(1 - 1 downto 0);
    zext_ln23_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_1_reg_397_pp0_iter7_reg),64));
    zext_ln24_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_fu_163_p3),64));
end behav;
