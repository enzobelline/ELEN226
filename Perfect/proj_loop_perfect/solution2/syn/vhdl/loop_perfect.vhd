-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_perfect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_we0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_we1 : OUT STD_LOGIC;
    B_d1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of loop_perfect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_perfect_loop_perfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.894250,HLS_SYN_LAT=19,HLS_SYN_TPT=20,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=118,HLS_SYN_LUT=873,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv10_13 : STD_LOGIC_VECTOR (9 downto 0) := "0000010011";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv26_199A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001100110011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_473 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_477 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_482 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_486 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln886_1_fu_555_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln886_1_reg_1148 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1055_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_16_reg_1153 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln886_4_fu_656_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_4_reg_1173 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln886_9_fu_833_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_9_reg_1218 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1072_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_12_reg_1233 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_19_fu_867_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln886_19_reg_1238 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln886_21_fu_972_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_21_reg_1243 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_reg_1253 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1559_1_fu_1048_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1559_1_reg_1259 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal shl_ln_fu_499_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln886_1_fu_515_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln886_1_fu_523_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln886_fu_511_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln886_fu_527_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln886_2_fu_537_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln232_1_fu_533_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln232_2_fu_545_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln886_fu_549_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln232_fu_507_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_3_fu_561_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_3_fu_561_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln886_4_fu_573_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln886_5_fu_585_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln886_3_fu_581_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_4_fu_593_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln886_1_fu_597_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_5_fu_607_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_6_fu_611_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_6_fu_611_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln886_6_fu_619_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_5_fu_607_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln886_2_fu_623_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln232_4_fu_603_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln232_5_fu_629_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_2_fu_640_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln232_3_fu_569_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_3_fu_646_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_21_fu_652_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_20_fu_637_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln886_10_fu_666_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_11_fu_678_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln886_10_fu_674_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_11_fu_686_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln886_7_fu_696_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln886_8_fu_708_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_8_fu_708_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln886_9_fu_720_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_9_fu_720_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln886_s_fu_732_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_s_fu_732_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln886_12_fu_744_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_13_fu_756_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln886_13_fu_752_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_14_fu_764_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln886_4_fu_768_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_15_fu_778_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_14_fu_782_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_14_fu_782_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_16_fu_790_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_15_fu_778_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln886_5_fu_794_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln232_7_fu_716_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln232_8_fu_740_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln886_5_fu_804_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_23_fu_810_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln232_6_fu_704_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_6_fu_814_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1063_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_25_fu_824_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_8_fu_728_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_8_fu_827_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_24_fu_820_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln232_10_fu_774_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln232_11_fu_800_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_2_fu_845_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln886_7_fu_849_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln886_17_fu_853_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln886_7_fu_849_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln886_17_fu_853_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln886_18_fu_857_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln886_31_fu_863_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln886_2_fu_845_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln886_15_fu_873_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_16_fu_885_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_16_fu_885_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_17_fu_897_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_18_fu_909_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln232_13_fu_893_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln232_14_fu_917_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_13_fu_924_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_28_fu_930_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln232_12_fu_881_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_14_fu_934_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_29_fu_940_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln886_27_fu_921_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln886_30_fu_950_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_18_fu_905_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_32_fu_959_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_17_fu_953_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_20_fu_962_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_33_fu_968_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_15_fu_944_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln886_26_fu_981_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln886_22_fu_978_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_10_fu_984_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_V_1_fu_990_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1080_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1559_fu_1007_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1559_fu_1010_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_fu_1016_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1026_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1559_fu_1035_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1559_1_fu_1042_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1055_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1063_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1063_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1072_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1072_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1080_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component loop_perfect_mac_muladd_5s_5ns_5s_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component loop_perfect_mac_muladd_5s_4ns_10s_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component loop_perfect_mac_muladd_5s_4ns_11s_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component loop_perfect_mul_mul_12s_13ns_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mac_muladd_5s_5ns_5s_10_4_1_U1 : component loop_perfect_mac_muladd_5s_5ns_5s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_q0,
        din1 => grp_fu_1055_p1,
        din2 => reg_477,
        ce => ap_const_logic_1,
        dout => grp_fu_1055_p3);

    mac_muladd_5s_4ns_10s_10_4_1_U2 : component loop_perfect_mac_muladd_5s_4ns_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_473,
        din1 => grp_fu_1063_p1,
        din2 => grp_fu_1063_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1063_p3);

    mac_muladd_5s_4ns_11s_11_4_1_U3 : component loop_perfect_mac_muladd_5s_4ns_11s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_482,
        din1 => grp_fu_1072_p1,
        din2 => grp_fu_1072_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1072_p3);

    mul_mul_12s_13ns_26_4_1_U4 : component loop_perfect_mul_mul_12s_13ns_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_V_1_fu_990_p2,
        din1 => grp_fu_1080_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1080_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                reg_477 <= A_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_477 <= A_q1;
            end if; 
        end if;
    end process;

    reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_486 <= A_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_486 <= A_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln886_12_reg_1233 <= grp_fu_1072_p3;
                add_ln886_19_reg_1238 <= add_ln886_19_fu_867_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln886_16_reg_1153 <= grp_fu_1055_p3;
                add_ln886_1_reg_1148 <= add_ln886_1_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln886_21_reg_1243 <= add_ln886_21_fu_972_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln886_4_reg_1173 <= add_ln886_4_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln886_9_reg_1218 <= add_ln886_9_fu_833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_473 <= A_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_482 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                select_ln1559_1_reg_1259 <= select_ln1559_1_fu_1048_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_reg_1253 <= acc_V_1_fu_990_p2(11 downto 11);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        else 
            A_address0 <= "XXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        else 
            A_address1 <= "XXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            B_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            B_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            B_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            B_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            B_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            B_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            B_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        else 
            B_address0 <= "XXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            B_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            B_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            B_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            B_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            B_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            B_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            B_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            B_address1 <= "XXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, select_ln1559_1_reg_1259, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            B_d0 <= select_ln1559_1_reg_1259;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            B_d0 <= ap_const_lv6_0;
        else 
            B_d0 <= "XXXXXX";
        end if; 
    end process;


    B_d1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, select_ln1559_1_reg_1259, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            B_d1 <= select_ln1559_1_reg_1259;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            B_d1 <= ap_const_lv6_0;
        else 
            B_d1 <= "XXXXXX";
        end if; 
    end process;


    B_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            B_we1 <= ap_const_logic_1;
        else 
            B_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_V_1_fu_990_p2 <= std_logic_vector(unsigned(add_ln886_21_reg_1243) + unsigned(add_ln886_10_fu_984_p2));
    add_ln886_10_fu_984_p2 <= std_logic_vector(signed(sext_ln886_26_fu_981_p1) + signed(sext_ln886_22_fu_978_p1));
    add_ln886_13_fu_924_p2 <= std_logic_vector(signed(sext_ln232_13_fu_893_p1) + signed(sext_ln232_14_fu_917_p1));
    add_ln886_14_fu_934_p2 <= std_logic_vector(signed(sext_ln886_28_fu_930_p1) + signed(sext_ln232_12_fu_881_p1));
    add_ln886_15_fu_944_p2 <= std_logic_vector(signed(sext_ln886_29_fu_940_p1) + signed(sext_ln886_27_fu_921_p1));
    add_ln886_17_fu_953_p2 <= std_logic_vector(signed(sext_ln886_30_fu_950_p1) + signed(sext_ln886_18_fu_905_p1));
    add_ln886_18_fu_857_p2 <= std_logic_vector(signed(sext_ln886_7_fu_849_p1) + signed(sext_ln886_17_fu_853_p1));
    add_ln886_19_fu_867_p2 <= std_logic_vector(signed(sext_ln886_31_fu_863_p1) + signed(sext_ln886_2_fu_845_p1));
    add_ln886_1_fu_555_p2 <= std_logic_vector(unsigned(add_ln886_fu_549_p2) + unsigned(sext_ln232_fu_507_p1));
    add_ln886_20_fu_962_p2 <= std_logic_vector(signed(sext_ln886_32_fu_959_p1) + signed(add_ln886_17_fu_953_p2));
    add_ln886_21_fu_972_p2 <= std_logic_vector(signed(sext_ln886_33_fu_968_p1) + signed(add_ln886_15_fu_944_p2));
    add_ln886_2_fu_640_p2 <= std_logic_vector(signed(sext_ln232_4_fu_603_p1) + signed(sext_ln232_5_fu_629_p1));
    add_ln886_3_fu_646_p2 <= std_logic_vector(unsigned(add_ln886_2_fu_640_p2) + unsigned(sext_ln232_3_fu_569_p1));
    add_ln886_4_fu_656_p2 <= std_logic_vector(signed(sext_ln886_21_fu_652_p1) + signed(sext_ln886_20_fu_637_p1));
    add_ln886_5_fu_804_p2 <= std_logic_vector(signed(sext_ln232_7_fu_716_p1) + signed(sext_ln232_8_fu_740_p1));
    add_ln886_6_fu_814_p2 <= std_logic_vector(signed(sext_ln886_23_fu_810_p1) + signed(sext_ln232_6_fu_704_p1));
    add_ln886_8_fu_827_p2 <= std_logic_vector(signed(sext_ln886_25_fu_824_p1) + signed(sext_ln886_8_fu_728_p1));
    add_ln886_9_fu_833_p2 <= std_logic_vector(unsigned(add_ln886_8_fu_827_p2) + unsigned(sext_ln886_24_fu_820_p1));
    add_ln886_fu_549_p2 <= std_logic_vector(signed(sext_ln232_1_fu_533_p1) + signed(sext_ln232_2_fu_545_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1055_p1 <= ap_const_lv10_13(5 - 1 downto 0);
    grp_fu_1063_p1 <= ap_const_lv10_B(4 - 1 downto 0);
    grp_fu_1063_p2 <= std_logic_vector(signed(sext_ln886_10_fu_674_p1) - signed(sext_ln886_11_fu_686_p1));
    grp_fu_1072_p1 <= ap_const_lv10_D(4 - 1 downto 0);
    grp_fu_1072_p2 <= std_logic_vector(signed(sext_ln232_10_fu_774_p1) + signed(sext_ln232_11_fu_800_p1));
    grp_fu_1080_p1 <= ap_const_lv26_199A(13 - 1 downto 0);
    select_ln1559_1_fu_1048_p3 <= 
        sub_ln1559_1_fu_1042_p2 when (tmp_reg_1253(0) = '1') else 
        tmp_2_fu_1026_p4;
    select_ln1559_fu_1035_p3 <= 
        tmp_1_fu_1016_p4 when (tmp_reg_1253(0) = '1') else 
        tmp_2_fu_1026_p4;
        sext_ln232_10_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln886_4_fu_768_p2),11));

        sext_ln232_11_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln886_5_fu_794_p2),11));

        sext_ln232_12_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_15_fu_873_p3),11));

        sext_ln232_13_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_16_fu_885_p3),10));

        sext_ln232_14_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_18_fu_909_p3),10));

        sext_ln232_1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln886_fu_527_p2),9));

        sext_ln232_2_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_2_fu_537_p3),9));

        sext_ln232_3_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_3_fu_561_p3),10));

        sext_ln232_4_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln886_1_fu_597_p2),10));

        sext_ln232_5_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln886_2_fu_623_p2),10));

        sext_ln232_6_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_7_fu_696_p3),10));

        sext_ln232_7_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_8_fu_708_p3),9));

        sext_ln232_8_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_s_fu_732_p3),9));

        sext_ln232_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_499_p3),9));

        sext_ln886_10_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_10_fu_666_p3),10));

        sext_ln886_11_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_11_fu_678_p3),10));

        sext_ln886_13_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_12_fu_744_p3),10));

        sext_ln886_14_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_13_fu_756_p3),10));

    sext_ln886_15_fu_778_p0 <= A_q0;
        sext_ln886_15_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln886_15_fu_778_p0),10));

        sext_ln886_16_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_14_fu_782_p3),10));

    sext_ln886_17_fu_853_p0 <= A_q0;
        sext_ln886_17_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln886_17_fu_853_p0),6));

        sext_ln886_18_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_17_fu_897_p3),11));

        sext_ln886_1_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_1_fu_515_p3),8));

        sext_ln886_20_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_1_reg_1148),11));

        sext_ln886_21_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_3_fu_646_p2),11));

        sext_ln886_22_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_4_reg_1173),12));

        sext_ln886_23_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_5_fu_804_p2),10));

        sext_ln886_24_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_6_fu_814_p2),11));

        sext_ln886_25_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1063_p3),11));

        sext_ln886_26_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_9_reg_1218),12));

        sext_ln886_27_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_12_reg_1233),12));

        sext_ln886_28_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_13_fu_924_p2),11));

        sext_ln886_29_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_14_fu_934_p2),12));

    sext_ln886_2_fu_845_p0 <= reg_477;
        sext_ln886_2_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln886_2_fu_845_p0),7));

        sext_ln886_30_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_16_reg_1153),11));

        sext_ln886_31_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_18_fu_857_p2),7));

        sext_ln886_32_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_19_reg_1238),11));

        sext_ln886_33_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_20_fu_962_p2),12));

        sext_ln886_3_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_4_fu_573_p3),9));

        sext_ln886_4_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_5_fu_585_p3),9));

    sext_ln886_5_fu_607_p0 <= A_q0;
        sext_ln886_5_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln886_5_fu_607_p0),9));

        sext_ln886_6_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_6_fu_611_p3),9));

    sext_ln886_7_fu_849_p0 <= reg_482;
        sext_ln886_7_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln886_7_fu_849_p0),6));

        sext_ln886_8_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_9_fu_720_p3),11));

        sext_ln886_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_486),8));

    shl_ln886_10_fu_666_p3 <= (A_q0 & ap_const_lv4_0);
    shl_ln886_11_fu_678_p3 <= (A_q0 & ap_const_lv2_0);
    shl_ln886_12_fu_744_p3 <= (A_q1 & ap_const_lv4_0);
    shl_ln886_13_fu_756_p3 <= (A_q1 & ap_const_lv1_0);
    shl_ln886_14_fu_782_p1 <= A_q0;
    shl_ln886_14_fu_782_p3 <= (shl_ln886_14_fu_782_p1 & ap_const_lv4_0);
    shl_ln886_15_fu_873_p3 <= (reg_473 & ap_const_lv4_0);
    shl_ln886_16_fu_885_p1 <= reg_477;
    shl_ln886_16_fu_885_p3 <= (shl_ln886_16_fu_885_p1 & ap_const_lv4_0);
    shl_ln886_17_fu_897_p3 <= (A_q0 & ap_const_lv4_0);
    shl_ln886_18_fu_909_p3 <= (A_q0 & ap_const_lv1_0);
    shl_ln886_1_fu_515_p3 <= (reg_486 & ap_const_lv2_0);
    shl_ln886_2_fu_537_p3 <= (A_q1 & ap_const_lv2_0);
    shl_ln886_3_fu_561_p1 <= reg_477;
    shl_ln886_3_fu_561_p3 <= (shl_ln886_3_fu_561_p1 & ap_const_lv2_0);
    shl_ln886_4_fu_573_p3 <= (A_q1 & ap_const_lv3_0);
    shl_ln886_5_fu_585_p3 <= (A_q1 & ap_const_lv1_0);
    shl_ln886_6_fu_611_p1 <= A_q0;
    shl_ln886_6_fu_611_p3 <= (shl_ln886_6_fu_611_p1 & ap_const_lv3_0);
    shl_ln886_7_fu_696_p3 <= (reg_473 & ap_const_lv3_0);
    shl_ln886_8_fu_708_p1 <= reg_482;
    shl_ln886_8_fu_708_p3 <= (shl_ln886_8_fu_708_p1 & ap_const_lv3_0);
    shl_ln886_9_fu_720_p1 <= reg_486;
    shl_ln886_9_fu_720_p3 <= (shl_ln886_9_fu_720_p1 & ap_const_lv3_0);
    shl_ln886_s_fu_732_p1 <= reg_486;
    shl_ln886_s_fu_732_p3 <= (shl_ln886_s_fu_732_p1 & ap_const_lv1_0);
    shl_ln_fu_499_p3 <= (reg_477 & ap_const_lv1_0);
    sub_ln1559_1_fu_1042_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(select_ln1559_fu_1035_p3));
    sub_ln1559_fu_1010_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(trunc_ln1559_fu_1007_p1));
    sub_ln886_1_fu_597_p2 <= std_logic_vector(signed(sext_ln886_3_fu_581_p1) - signed(sext_ln886_4_fu_593_p1));
    sub_ln886_2_fu_623_p2 <= std_logic_vector(signed(sext_ln886_6_fu_619_p1) - signed(sext_ln886_5_fu_607_p1));
    sub_ln886_4_fu_768_p2 <= std_logic_vector(signed(sext_ln886_13_fu_752_p1) - signed(sext_ln886_14_fu_764_p1));
    sub_ln886_5_fu_794_p2 <= std_logic_vector(signed(sext_ln886_16_fu_790_p1) - signed(sext_ln886_15_fu_778_p1));
    sub_ln886_fu_527_p2 <= std_logic_vector(signed(sext_ln886_1_fu_523_p1) - signed(sext_ln886_fu_511_p1));
    tmp_1_fu_1016_p4 <= sub_ln1559_fu_1010_p2(22 downto 17);
    tmp_2_fu_1026_p4 <= grp_fu_1080_p2(22 downto 17);
    trunc_ln1559_fu_1007_p1 <= grp_fu_1080_p2(25 - 1 downto 0);
end behav;
