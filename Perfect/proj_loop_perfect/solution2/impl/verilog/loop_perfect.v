// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_perfect_loop_perfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.894250,HLS_SYN_LAT=19,HLS_SYN_TPT=20,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=118,HLS_SYN_LUT=873,HLS_VERSION=2022_1}" *)

module loop_perfect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        B_address1,
        B_ce1,
        B_we1,
        B_d1
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
input  [4:0] A_q0;
output  [4:0] A_address1;
output   A_ce1;
input  [4:0] A_q1;
output  [4:0] B_address0;
output   B_ce0;
output   B_we0;
output  [5:0] B_d0;
output  [4:0] B_address1;
output   B_ce1;
output   B_we1;
output  [5:0] B_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] A_address0;
reg A_ce0;
reg[4:0] A_address1;
reg A_ce1;
reg[4:0] B_address0;
reg B_ce0;
reg B_we0;
reg[5:0] B_d0;
reg[4:0] B_address1;
reg B_ce1;
reg B_we1;
reg[5:0] B_d1;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [4:0] reg_473;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
reg  signed [4:0] reg_477;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg  signed [4:0] reg_482;
reg  signed [4:0] reg_486;
wire    ap_CS_fsm_state8;
wire   [8:0] add_ln886_1_fu_555_p2;
reg   [8:0] add_ln886_1_reg_1148;
wire  signed [9:0] grp_fu_1055_p3;
reg  signed [9:0] add_ln886_16_reg_1153;
wire    ap_CS_fsm_state6;
wire   [10:0] add_ln886_4_fu_656_p2;
reg   [10:0] add_ln886_4_reg_1173;
wire    ap_CS_fsm_state9;
wire   [10:0] add_ln886_9_fu_833_p2;
reg   [10:0] add_ln886_9_reg_1218;
wire  signed [10:0] grp_fu_1072_p3;
reg  signed [10:0] add_ln886_12_reg_1233;
wire   [6:0] add_ln886_19_fu_867_p2;
reg   [6:0] add_ln886_19_reg_1238;
wire   [11:0] add_ln886_21_fu_972_p2;
reg   [11:0] add_ln886_21_reg_1243;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg   [0:0] tmp_reg_1253;
wire   [5:0] select_ln1559_1_fu_1048_p3;
reg   [5:0] select_ln1559_1_reg_1259;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire   [5:0] shl_ln_fu_499_p3;
wire   [6:0] shl_ln886_1_fu_515_p3;
wire  signed [7:0] sext_ln886_1_fu_523_p1;
wire  signed [7:0] sext_ln886_fu_511_p1;
wire   [7:0] sub_ln886_fu_527_p2;
wire   [6:0] shl_ln886_2_fu_537_p3;
wire  signed [8:0] sext_ln232_1_fu_533_p1;
wire  signed [8:0] sext_ln232_2_fu_545_p1;
wire   [8:0] add_ln886_fu_549_p2;
wire  signed [8:0] sext_ln232_fu_507_p1;
wire  signed [4:0] shl_ln886_3_fu_561_p1;
wire   [6:0] shl_ln886_3_fu_561_p3;
wire   [7:0] shl_ln886_4_fu_573_p3;
wire   [5:0] shl_ln886_5_fu_585_p3;
wire  signed [8:0] sext_ln886_3_fu_581_p1;
wire  signed [8:0] sext_ln886_4_fu_593_p1;
wire   [8:0] sub_ln886_1_fu_597_p2;
wire  signed [4:0] sext_ln886_5_fu_607_p0;
wire  signed [4:0] shl_ln886_6_fu_611_p1;
wire   [7:0] shl_ln886_6_fu_611_p3;
wire  signed [8:0] sext_ln886_6_fu_619_p1;
wire  signed [8:0] sext_ln886_5_fu_607_p1;
wire   [8:0] sub_ln886_2_fu_623_p2;
wire  signed [9:0] sext_ln232_4_fu_603_p1;
wire  signed [9:0] sext_ln232_5_fu_629_p1;
wire   [9:0] add_ln886_2_fu_640_p2;
wire  signed [9:0] sext_ln232_3_fu_569_p1;
wire   [9:0] add_ln886_3_fu_646_p2;
wire  signed [10:0] sext_ln886_21_fu_652_p1;
wire  signed [10:0] sext_ln886_20_fu_637_p1;
wire   [8:0] shl_ln886_10_fu_666_p3;
wire   [6:0] shl_ln886_11_fu_678_p3;
wire  signed [9:0] sext_ln886_10_fu_674_p1;
wire  signed [9:0] sext_ln886_11_fu_686_p1;
wire   [7:0] shl_ln886_7_fu_696_p3;
wire  signed [4:0] shl_ln886_8_fu_708_p1;
wire   [7:0] shl_ln886_8_fu_708_p3;
wire   [4:0] shl_ln886_9_fu_720_p1;
wire   [7:0] shl_ln886_9_fu_720_p3;
wire   [4:0] shl_ln886_s_fu_732_p1;
wire   [5:0] shl_ln886_s_fu_732_p3;
wire   [8:0] shl_ln886_12_fu_744_p3;
wire   [5:0] shl_ln886_13_fu_756_p3;
wire  signed [9:0] sext_ln886_13_fu_752_p1;
wire  signed [9:0] sext_ln886_14_fu_764_p1;
wire   [9:0] sub_ln886_4_fu_768_p2;
wire  signed [4:0] sext_ln886_15_fu_778_p0;
wire  signed [4:0] shl_ln886_14_fu_782_p1;
wire   [8:0] shl_ln886_14_fu_782_p3;
wire  signed [9:0] sext_ln886_16_fu_790_p1;
wire  signed [9:0] sext_ln886_15_fu_778_p1;
wire   [9:0] sub_ln886_5_fu_794_p2;
wire  signed [8:0] sext_ln232_7_fu_716_p1;
wire  signed [8:0] sext_ln232_8_fu_740_p1;
wire   [8:0] add_ln886_5_fu_804_p2;
wire  signed [9:0] sext_ln886_23_fu_810_p1;
wire  signed [9:0] sext_ln232_6_fu_704_p1;
wire   [9:0] add_ln886_6_fu_814_p2;
wire  signed [9:0] grp_fu_1063_p3;
wire  signed [10:0] sext_ln886_25_fu_824_p1;
wire  signed [10:0] sext_ln886_8_fu_728_p1;
wire   [10:0] add_ln886_8_fu_827_p2;
wire  signed [10:0] sext_ln886_24_fu_820_p1;
wire  signed [10:0] sext_ln232_10_fu_774_p1;
wire  signed [10:0] sext_ln232_11_fu_800_p1;
wire  signed [4:0] sext_ln886_2_fu_845_p0;
wire  signed [4:0] sext_ln886_7_fu_849_p0;
wire  signed [4:0] sext_ln886_17_fu_853_p0;
wire  signed [5:0] sext_ln886_7_fu_849_p1;
wire  signed [5:0] sext_ln886_17_fu_853_p1;
wire   [5:0] add_ln886_18_fu_857_p2;
wire  signed [6:0] sext_ln886_31_fu_863_p1;
wire  signed [6:0] sext_ln886_2_fu_845_p1;
wire   [8:0] shl_ln886_15_fu_873_p3;
wire  signed [4:0] shl_ln886_16_fu_885_p1;
wire   [8:0] shl_ln886_16_fu_885_p3;
wire   [8:0] shl_ln886_17_fu_897_p3;
wire   [5:0] shl_ln886_18_fu_909_p3;
wire  signed [9:0] sext_ln232_13_fu_893_p1;
wire  signed [9:0] sext_ln232_14_fu_917_p1;
wire   [9:0] add_ln886_13_fu_924_p2;
wire  signed [10:0] sext_ln886_28_fu_930_p1;
wire  signed [10:0] sext_ln232_12_fu_881_p1;
wire   [10:0] add_ln886_14_fu_934_p2;
wire  signed [11:0] sext_ln886_29_fu_940_p1;
wire  signed [11:0] sext_ln886_27_fu_921_p1;
wire  signed [10:0] sext_ln886_30_fu_950_p1;
wire  signed [10:0] sext_ln886_18_fu_905_p1;
wire  signed [10:0] sext_ln886_32_fu_959_p1;
wire   [10:0] add_ln886_17_fu_953_p2;
wire   [10:0] add_ln886_20_fu_962_p2;
wire  signed [11:0] sext_ln886_33_fu_968_p1;
wire   [11:0] add_ln886_15_fu_944_p2;
wire  signed [11:0] sext_ln886_26_fu_981_p1;
wire  signed [11:0] sext_ln886_22_fu_978_p1;
wire   [11:0] add_ln886_10_fu_984_p2;
wire  signed [11:0] acc_V_1_fu_990_p2;
wire  signed [25:0] grp_fu_1080_p2;
wire   [24:0] trunc_ln1559_fu_1007_p1;
wire   [24:0] sub_ln1559_fu_1010_p2;
wire   [5:0] tmp_1_fu_1016_p4;
wire   [5:0] tmp_2_fu_1026_p4;
wire   [5:0] select_ln1559_fu_1035_p3;
wire   [5:0] sub_ln1559_1_fu_1042_p2;
wire   [4:0] grp_fu_1055_p1;
wire   [3:0] grp_fu_1063_p1;
wire  signed [9:0] grp_fu_1063_p2;
wire   [3:0] grp_fu_1072_p1;
wire  signed [10:0] grp_fu_1072_p2;
wire   [12:0] grp_fu_1080_p1;
reg   [19:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

loop_perfect_mac_muladd_5s_5ns_5s_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
mac_muladd_5s_5ns_5s_10_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q0),
    .din1(grp_fu_1055_p1),
    .din2(reg_477),
    .ce(1'b1),
    .dout(grp_fu_1055_p3)
);

loop_perfect_mac_muladd_5s_4ns_10s_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mac_muladd_5s_4ns_10s_10_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_473),
    .din1(grp_fu_1063_p1),
    .din2(grp_fu_1063_p2),
    .ce(1'b1),
    .dout(grp_fu_1063_p3)
);

loop_perfect_mac_muladd_5s_4ns_11s_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
mac_muladd_5s_4ns_11s_11_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_482),
    .din1(grp_fu_1072_p1),
    .din2(grp_fu_1072_p2),
    .ce(1'b1),
    .dout(grp_fu_1072_p3)
);

loop_perfect_mul_mul_12s_13ns_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 26 ))
mul_mul_12s_13ns_26_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_V_1_fu_990_p2),
    .din1(grp_fu_1080_p1),
    .ce(1'b1),
    .dout(grp_fu_1080_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_477 <= A_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_477 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_486 <= A_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_486 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln886_12_reg_1233 <= grp_fu_1072_p3;
        add_ln886_19_reg_1238 <= add_ln886_19_fu_867_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln886_16_reg_1153 <= grp_fu_1055_p3;
        add_ln886_1_reg_1148 <= add_ln886_1_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln886_21_reg_1243 <= add_ln886_21_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln886_4_reg_1173 <= add_ln886_4_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln886_9_reg_1218 <= add_ln886_9_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_473 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_482 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        select_ln1559_1_reg_1259 <= select_ln1559_1_fu_1048_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_reg_1253 <= acc_V_1_fu_990_p2[32'd11];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_address0 = 64'd19;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_address1 = 64'd11;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        B_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        B_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        B_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        B_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        B_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        B_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        B_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        B_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        B_address0 = 64'd3;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        B_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        B_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        B_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        B_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        B_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        B_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        B_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        B_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        B_address1 = 64'd1;
    end else begin
        B_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        B_d0 = select_ln1559_1_reg_1259;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        B_d0 = 6'd0;
    end else begin
        B_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        B_d1 = select_ln1559_1_reg_1259;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        B_d1 = 6'd0;
    end else begin
        B_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        B_we1 = 1'b1;
    end else begin
        B_we1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_V_1_fu_990_p2 = (add_ln886_21_reg_1243 + add_ln886_10_fu_984_p2);

assign add_ln886_10_fu_984_p2 = ($signed(sext_ln886_26_fu_981_p1) + $signed(sext_ln886_22_fu_978_p1));

assign add_ln886_13_fu_924_p2 = ($signed(sext_ln232_13_fu_893_p1) + $signed(sext_ln232_14_fu_917_p1));

assign add_ln886_14_fu_934_p2 = ($signed(sext_ln886_28_fu_930_p1) + $signed(sext_ln232_12_fu_881_p1));

assign add_ln886_15_fu_944_p2 = ($signed(sext_ln886_29_fu_940_p1) + $signed(sext_ln886_27_fu_921_p1));

assign add_ln886_17_fu_953_p2 = ($signed(sext_ln886_30_fu_950_p1) + $signed(sext_ln886_18_fu_905_p1));

assign add_ln886_18_fu_857_p2 = ($signed(sext_ln886_7_fu_849_p1) + $signed(sext_ln886_17_fu_853_p1));

assign add_ln886_19_fu_867_p2 = ($signed(sext_ln886_31_fu_863_p1) + $signed(sext_ln886_2_fu_845_p1));

assign add_ln886_1_fu_555_p2 = ($signed(add_ln886_fu_549_p2) + $signed(sext_ln232_fu_507_p1));

assign add_ln886_20_fu_962_p2 = ($signed(sext_ln886_32_fu_959_p1) + $signed(add_ln886_17_fu_953_p2));

assign add_ln886_21_fu_972_p2 = ($signed(sext_ln886_33_fu_968_p1) + $signed(add_ln886_15_fu_944_p2));

assign add_ln886_2_fu_640_p2 = ($signed(sext_ln232_4_fu_603_p1) + $signed(sext_ln232_5_fu_629_p1));

assign add_ln886_3_fu_646_p2 = ($signed(add_ln886_2_fu_640_p2) + $signed(sext_ln232_3_fu_569_p1));

assign add_ln886_4_fu_656_p2 = ($signed(sext_ln886_21_fu_652_p1) + $signed(sext_ln886_20_fu_637_p1));

assign add_ln886_5_fu_804_p2 = ($signed(sext_ln232_7_fu_716_p1) + $signed(sext_ln232_8_fu_740_p1));

assign add_ln886_6_fu_814_p2 = ($signed(sext_ln886_23_fu_810_p1) + $signed(sext_ln232_6_fu_704_p1));

assign add_ln886_8_fu_827_p2 = ($signed(sext_ln886_25_fu_824_p1) + $signed(sext_ln886_8_fu_728_p1));

assign add_ln886_9_fu_833_p2 = ($signed(add_ln886_8_fu_827_p2) + $signed(sext_ln886_24_fu_820_p1));

assign add_ln886_fu_549_p2 = ($signed(sext_ln232_1_fu_533_p1) + $signed(sext_ln232_2_fu_545_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_1055_p1 = 10'd19;

assign grp_fu_1063_p1 = 10'd11;

assign grp_fu_1063_p2 = ($signed(sext_ln886_10_fu_674_p1) - $signed(sext_ln886_11_fu_686_p1));

assign grp_fu_1072_p1 = 10'd13;

assign grp_fu_1072_p2 = ($signed(sext_ln232_10_fu_774_p1) + $signed(sext_ln232_11_fu_800_p1));

assign grp_fu_1080_p1 = 26'd6554;

assign select_ln1559_1_fu_1048_p3 = ((tmp_reg_1253[0:0] == 1'b1) ? sub_ln1559_1_fu_1042_p2 : tmp_2_fu_1026_p4);

assign select_ln1559_fu_1035_p3 = ((tmp_reg_1253[0:0] == 1'b1) ? tmp_1_fu_1016_p4 : tmp_2_fu_1026_p4);

assign sext_ln232_10_fu_774_p1 = $signed(sub_ln886_4_fu_768_p2);

assign sext_ln232_11_fu_800_p1 = $signed(sub_ln886_5_fu_794_p2);

assign sext_ln232_12_fu_881_p1 = $signed(shl_ln886_15_fu_873_p3);

assign sext_ln232_13_fu_893_p1 = $signed(shl_ln886_16_fu_885_p3);

assign sext_ln232_14_fu_917_p1 = $signed(shl_ln886_18_fu_909_p3);

assign sext_ln232_1_fu_533_p1 = $signed(sub_ln886_fu_527_p2);

assign sext_ln232_2_fu_545_p1 = $signed(shl_ln886_2_fu_537_p3);

assign sext_ln232_3_fu_569_p1 = $signed(shl_ln886_3_fu_561_p3);

assign sext_ln232_4_fu_603_p1 = $signed(sub_ln886_1_fu_597_p2);

assign sext_ln232_5_fu_629_p1 = $signed(sub_ln886_2_fu_623_p2);

assign sext_ln232_6_fu_704_p1 = $signed(shl_ln886_7_fu_696_p3);

assign sext_ln232_7_fu_716_p1 = $signed(shl_ln886_8_fu_708_p3);

assign sext_ln232_8_fu_740_p1 = $signed(shl_ln886_s_fu_732_p3);

assign sext_ln232_fu_507_p1 = $signed(shl_ln_fu_499_p3);

assign sext_ln886_10_fu_674_p1 = $signed(shl_ln886_10_fu_666_p3);

assign sext_ln886_11_fu_686_p1 = $signed(shl_ln886_11_fu_678_p3);

assign sext_ln886_13_fu_752_p1 = $signed(shl_ln886_12_fu_744_p3);

assign sext_ln886_14_fu_764_p1 = $signed(shl_ln886_13_fu_756_p3);

assign sext_ln886_15_fu_778_p0 = A_q0;

assign sext_ln886_15_fu_778_p1 = sext_ln886_15_fu_778_p0;

assign sext_ln886_16_fu_790_p1 = $signed(shl_ln886_14_fu_782_p3);

assign sext_ln886_17_fu_853_p0 = A_q0;

assign sext_ln886_17_fu_853_p1 = sext_ln886_17_fu_853_p0;

assign sext_ln886_18_fu_905_p1 = $signed(shl_ln886_17_fu_897_p3);

assign sext_ln886_1_fu_523_p1 = $signed(shl_ln886_1_fu_515_p3);

assign sext_ln886_20_fu_637_p1 = $signed(add_ln886_1_reg_1148);

assign sext_ln886_21_fu_652_p1 = $signed(add_ln886_3_fu_646_p2);

assign sext_ln886_22_fu_978_p1 = $signed(add_ln886_4_reg_1173);

assign sext_ln886_23_fu_810_p1 = $signed(add_ln886_5_fu_804_p2);

assign sext_ln886_24_fu_820_p1 = $signed(add_ln886_6_fu_814_p2);

assign sext_ln886_25_fu_824_p1 = grp_fu_1063_p3;

assign sext_ln886_26_fu_981_p1 = $signed(add_ln886_9_reg_1218);

assign sext_ln886_27_fu_921_p1 = add_ln886_12_reg_1233;

assign sext_ln886_28_fu_930_p1 = $signed(add_ln886_13_fu_924_p2);

assign sext_ln886_29_fu_940_p1 = $signed(add_ln886_14_fu_934_p2);

assign sext_ln886_2_fu_845_p0 = reg_477;

assign sext_ln886_2_fu_845_p1 = sext_ln886_2_fu_845_p0;

assign sext_ln886_30_fu_950_p1 = add_ln886_16_reg_1153;

assign sext_ln886_31_fu_863_p1 = $signed(add_ln886_18_fu_857_p2);

assign sext_ln886_32_fu_959_p1 = $signed(add_ln886_19_reg_1238);

assign sext_ln886_33_fu_968_p1 = $signed(add_ln886_20_fu_962_p2);

assign sext_ln886_3_fu_581_p1 = $signed(shl_ln886_4_fu_573_p3);

assign sext_ln886_4_fu_593_p1 = $signed(shl_ln886_5_fu_585_p3);

assign sext_ln886_5_fu_607_p0 = A_q0;

assign sext_ln886_5_fu_607_p1 = sext_ln886_5_fu_607_p0;

assign sext_ln886_6_fu_619_p1 = $signed(shl_ln886_6_fu_611_p3);

assign sext_ln886_7_fu_849_p0 = reg_482;

assign sext_ln886_7_fu_849_p1 = sext_ln886_7_fu_849_p0;

assign sext_ln886_8_fu_728_p1 = $signed(shl_ln886_9_fu_720_p3);

assign sext_ln886_fu_511_p1 = reg_486;

assign shl_ln886_10_fu_666_p3 = {{A_q0}, {4'd0}};

assign shl_ln886_11_fu_678_p3 = {{A_q0}, {2'd0}};

assign shl_ln886_12_fu_744_p3 = {{A_q1}, {4'd0}};

assign shl_ln886_13_fu_756_p3 = {{A_q1}, {1'd0}};

assign shl_ln886_14_fu_782_p1 = A_q0;

assign shl_ln886_14_fu_782_p3 = {{shl_ln886_14_fu_782_p1}, {4'd0}};

assign shl_ln886_15_fu_873_p3 = {{reg_473}, {4'd0}};

assign shl_ln886_16_fu_885_p1 = reg_477;

assign shl_ln886_16_fu_885_p3 = {{shl_ln886_16_fu_885_p1}, {4'd0}};

assign shl_ln886_17_fu_897_p3 = {{A_q0}, {4'd0}};

assign shl_ln886_18_fu_909_p3 = {{A_q0}, {1'd0}};

assign shl_ln886_1_fu_515_p3 = {{reg_486}, {2'd0}};

assign shl_ln886_2_fu_537_p3 = {{A_q1}, {2'd0}};

assign shl_ln886_3_fu_561_p1 = reg_477;

assign shl_ln886_3_fu_561_p3 = {{shl_ln886_3_fu_561_p1}, {2'd0}};

assign shl_ln886_4_fu_573_p3 = {{A_q1}, {3'd0}};

assign shl_ln886_5_fu_585_p3 = {{A_q1}, {1'd0}};

assign shl_ln886_6_fu_611_p1 = A_q0;

assign shl_ln886_6_fu_611_p3 = {{shl_ln886_6_fu_611_p1}, {3'd0}};

assign shl_ln886_7_fu_696_p3 = {{reg_473}, {3'd0}};

assign shl_ln886_8_fu_708_p1 = reg_482;

assign shl_ln886_8_fu_708_p3 = {{shl_ln886_8_fu_708_p1}, {3'd0}};

assign shl_ln886_9_fu_720_p1 = reg_486;

assign shl_ln886_9_fu_720_p3 = {{shl_ln886_9_fu_720_p1}, {3'd0}};

assign shl_ln886_s_fu_732_p1 = reg_486;

assign shl_ln886_s_fu_732_p3 = {{shl_ln886_s_fu_732_p1}, {1'd0}};

assign shl_ln_fu_499_p3 = {{reg_477}, {1'd0}};

assign sub_ln1559_1_fu_1042_p2 = (6'd0 - select_ln1559_fu_1035_p3);

assign sub_ln1559_fu_1010_p2 = (25'd0 - trunc_ln1559_fu_1007_p1);

assign sub_ln886_1_fu_597_p2 = ($signed(sext_ln886_3_fu_581_p1) - $signed(sext_ln886_4_fu_593_p1));

assign sub_ln886_2_fu_623_p2 = ($signed(sext_ln886_6_fu_619_p1) - $signed(sext_ln886_5_fu_607_p1));

assign sub_ln886_4_fu_768_p2 = ($signed(sext_ln886_13_fu_752_p1) - $signed(sext_ln886_14_fu_764_p1));

assign sub_ln886_5_fu_794_p2 = ($signed(sext_ln886_16_fu_790_p1) - $signed(sext_ln886_15_fu_778_p1));

assign sub_ln886_fu_527_p2 = ($signed(sext_ln886_1_fu_523_p1) - $signed(sext_ln886_fu_511_p1));

assign tmp_1_fu_1016_p4 = {{sub_ln1559_fu_1010_p2[22:17]}};

assign tmp_2_fu_1026_p4 = {{grp_fu_1080_p2[22:17]}};

assign trunc_ln1559_fu_1007_p1 = grp_fu_1080_p2[24:0];

endmodule //loop_perfect
