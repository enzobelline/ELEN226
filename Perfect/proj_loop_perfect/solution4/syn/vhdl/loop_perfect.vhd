-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_perfect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_we0 : OUT STD_LOGIC;
    B_0_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_we0 : OUT STD_LOGIC;
    B_1_d0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of loop_perfect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_perfect_loop_perfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.653000,HLS_SYN_LAT=417,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=660,HLS_SYN_LUT=660,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_34 : STD_LOGIC_VECTOR (10 downto 0) := "00000110100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv26_199A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001100110011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln23_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_476_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_476_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_476_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_476_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_476_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_476_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_476_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_213_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_481_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln27_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_489_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_1_fu_258_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_fu_265_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_reg_498_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_reg_498_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_reg_498_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_reg_498_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_reg_498_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_reg_498_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_reg_498_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_502_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_502_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_502_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_502_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_502_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_502_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_502_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_536 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_536_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_536_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1559_1_fu_411_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1559_1_reg_542 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln232_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln21_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal B_0_addr_gep_fu_156_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_1_addr_gep_fu_165_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_V_1_fu_88 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_426_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_acc_V_1_load : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_92 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln24_fu_233_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_96 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_100 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_fu_198_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_1_fu_252_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_fu_279_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_fu_279_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln21_fu_279_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln232_fu_307_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln232_fu_307_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln232_fu_307_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_323_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_323_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln25_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1559_fu_370_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1559_fu_373_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_4_fu_379_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_389_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1559_fu_398_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1559_1_fu_405_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_426_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_426_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln21_fu_279_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln232_fu_307_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_condition_569 : BOOLEAN;
    signal ap_condition_572 : BOOLEAN;
    signal ap_condition_318 : BOOLEAN;
    signal ap_condition_320 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component loop_perfect_urem_5ns_5ns_5_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component loop_perfect_mul_5ns_7ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component loop_perfect_mux_22_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component loop_perfect_mac_muladd_5ns_5s_12s_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component loop_perfect_mul_mul_12s_13ns_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component loop_perfect_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    urem_5ns_5ns_5_9_1_U1 : component loop_perfect_urem_5ns_5ns_5_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln21_fu_213_p3,
        din1 => ap_const_lv5_A,
        ce => ap_const_logic_1,
        dout => grp_fu_221_p2);

    urem_5ns_5ns_5_9_1_U2 : component loop_perfect_urem_5ns_5ns_5_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln21_1_fu_258_p3,
        din1 => ap_const_lv5_A,
        ce => ap_const_logic_1,
        dout => grp_fu_269_p2);

    mul_5ns_7ns_11_1_1_U3 : component loop_perfect_mul_5ns_7ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        din0 => mul_ln21_fu_279_p0,
        din1 => mul_ln21_fu_279_p1,
        dout => mul_ln21_fu_279_p2);

    mul_5ns_7ns_11_1_1_U4 : component loop_perfect_mul_5ns_7ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        din0 => mul_ln232_fu_307_p0,
        din1 => mul_ln232_fu_307_p1,
        dout => mul_ln232_fu_307_p2);

    mux_22_5_1_1_U5 : component loop_perfect_mux_22_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 2,
        dout_WIDTH => 5)
    port map (
        din0 => A_0_q0,
        din1 => A_1_q0,
        din2 => tmp_fu_323_p3,
        dout => tmp_fu_323_p4);

    mac_muladd_5ns_5s_12s_12_4_1_U6 : component loop_perfect_mac_muladd_5ns_5s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_426_p0,
        din1 => tmp_fu_323_p4,
        din2 => grp_fu_426_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_426_p3);

    mul_mul_12s_13ns_26_4_1_U7 : component loop_perfect_mul_mul_12s_13ns_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_426_p3,
        din1 => grp_fu_437_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p2);

    flow_control_loop_pipe_U : component loop_perfect_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_318)) then 
                    i_fu_96 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    i_fu_96 <= select_ln21_1_fu_258_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_320)) then
                if ((icmp_ln23_fu_192_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_100 <= add_ln23_fu_198_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_100 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_320)) then
                if ((icmp_ln23_fu_192_p2 = ap_const_lv1_0)) then 
                    j_fu_92 <= add_ln24_fu_233_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_92 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then
                acc_V_1_fu_88 <= grp_fu_426_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln24_reg_476_pp0_iter2_reg <= icmp_ln24_reg_476_pp0_iter1_reg;
                icmp_ln24_reg_476_pp0_iter3_reg <= icmp_ln24_reg_476_pp0_iter2_reg;
                icmp_ln24_reg_476_pp0_iter4_reg <= icmp_ln24_reg_476_pp0_iter3_reg;
                icmp_ln24_reg_476_pp0_iter5_reg <= icmp_ln24_reg_476_pp0_iter4_reg;
                icmp_ln24_reg_476_pp0_iter6_reg <= icmp_ln24_reg_476_pp0_iter5_reg;
                icmp_ln24_reg_476_pp0_iter7_reg <= icmp_ln24_reg_476_pp0_iter6_reg;
                icmp_ln27_reg_489_pp0_iter10_reg <= icmp_ln27_reg_489_pp0_iter9_reg;
                icmp_ln27_reg_489_pp0_iter11_reg <= icmp_ln27_reg_489_pp0_iter10_reg;
                icmp_ln27_reg_489_pp0_iter12_reg <= icmp_ln27_reg_489_pp0_iter11_reg;
                icmp_ln27_reg_489_pp0_iter13_reg <= icmp_ln27_reg_489_pp0_iter12_reg;
                icmp_ln27_reg_489_pp0_iter14_reg <= icmp_ln27_reg_489_pp0_iter13_reg;
                icmp_ln27_reg_489_pp0_iter15_reg <= icmp_ln27_reg_489_pp0_iter14_reg;
                icmp_ln27_reg_489_pp0_iter2_reg <= icmp_ln27_reg_489_pp0_iter1_reg;
                icmp_ln27_reg_489_pp0_iter3_reg <= icmp_ln27_reg_489_pp0_iter2_reg;
                icmp_ln27_reg_489_pp0_iter4_reg <= icmp_ln27_reg_489_pp0_iter3_reg;
                icmp_ln27_reg_489_pp0_iter5_reg <= icmp_ln27_reg_489_pp0_iter4_reg;
                icmp_ln27_reg_489_pp0_iter6_reg <= icmp_ln27_reg_489_pp0_iter5_reg;
                icmp_ln27_reg_489_pp0_iter7_reg <= icmp_ln27_reg_489_pp0_iter6_reg;
                icmp_ln27_reg_489_pp0_iter8_reg <= icmp_ln27_reg_489_pp0_iter7_reg;
                icmp_ln27_reg_489_pp0_iter9_reg <= icmp_ln27_reg_489_pp0_iter8_reg;
                select_ln21_reg_481_pp0_iter10_reg <= select_ln21_reg_481_pp0_iter9_reg;
                select_ln21_reg_481_pp0_iter2_reg <= select_ln21_reg_481_pp0_iter1_reg;
                select_ln21_reg_481_pp0_iter3_reg <= select_ln21_reg_481_pp0_iter2_reg;
                select_ln21_reg_481_pp0_iter4_reg <= select_ln21_reg_481_pp0_iter3_reg;
                select_ln21_reg_481_pp0_iter5_reg <= select_ln21_reg_481_pp0_iter4_reg;
                select_ln21_reg_481_pp0_iter6_reg <= select_ln21_reg_481_pp0_iter5_reg;
                select_ln21_reg_481_pp0_iter7_reg <= select_ln21_reg_481_pp0_iter6_reg;
                select_ln21_reg_481_pp0_iter8_reg <= select_ln21_reg_481_pp0_iter7_reg;
                select_ln21_reg_481_pp0_iter9_reg <= select_ln21_reg_481_pp0_iter8_reg;
                tmp_1_reg_502 <= mul_ln21_fu_279_p2(9 downto 9);
                tmp_1_reg_502_pp0_iter10_reg <= tmp_1_reg_502_pp0_iter9_reg;
                tmp_1_reg_502_pp0_iter11_reg <= tmp_1_reg_502_pp0_iter10_reg;
                tmp_1_reg_502_pp0_iter12_reg <= tmp_1_reg_502_pp0_iter11_reg;
                tmp_1_reg_502_pp0_iter13_reg <= tmp_1_reg_502_pp0_iter12_reg;
                tmp_1_reg_502_pp0_iter14_reg <= tmp_1_reg_502_pp0_iter13_reg;
                tmp_1_reg_502_pp0_iter15_reg <= tmp_1_reg_502_pp0_iter14_reg;
                tmp_1_reg_502_pp0_iter9_reg <= tmp_1_reg_502;
                tmp_3_reg_536_pp0_iter13_reg <= tmp_3_reg_536;
                tmp_3_reg_536_pp0_iter14_reg <= tmp_3_reg_536_pp0_iter13_reg;
                trunc_ln21_reg_498 <= trunc_ln21_fu_265_p1;
                trunc_ln21_reg_498_pp0_iter10_reg <= trunc_ln21_reg_498_pp0_iter9_reg;
                trunc_ln21_reg_498_pp0_iter11_reg <= trunc_ln21_reg_498_pp0_iter10_reg;
                trunc_ln21_reg_498_pp0_iter12_reg <= trunc_ln21_reg_498_pp0_iter11_reg;
                trunc_ln21_reg_498_pp0_iter13_reg <= trunc_ln21_reg_498_pp0_iter12_reg;
                trunc_ln21_reg_498_pp0_iter14_reg <= trunc_ln21_reg_498_pp0_iter13_reg;
                trunc_ln21_reg_498_pp0_iter15_reg <= trunc_ln21_reg_498_pp0_iter14_reg;
                trunc_ln21_reg_498_pp0_iter9_reg <= trunc_ln21_reg_498;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln24_reg_476_pp0_iter1_reg <= icmp_ln24_reg_476;
                icmp_ln27_reg_489_pp0_iter1_reg <= icmp_ln27_reg_489;
                select_ln21_reg_481_pp0_iter1_reg <= select_ln21_reg_481;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_192_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln24_reg_476 <= icmp_ln24_fu_207_p2;
                icmp_ln27_reg_489 <= icmp_ln27_fu_227_p2;
                select_ln21_reg_481 <= select_ln21_fu_213_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln21_reg_498_pp0_iter14_reg = ap_const_lv1_0) and (icmp_ln27_reg_489_pp0_iter14_reg = ap_const_lv1_1))) then
                select_ln1559_1_reg_542 <= select_ln1559_1_fu_411_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln21_reg_498_pp0_iter11_reg = ap_const_lv1_0) and (icmp_ln27_reg_489_pp0_iter11_reg = ap_const_lv1_1))) then
                tmp_3_reg_536 <= grp_fu_426_p3(11 downto 11);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_0_address0 <= zext_ln232_fu_293_p1(4 - 1 downto 0);

    A_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_address0 <= zext_ln232_fu_293_p1(4 - 1 downto 0);

    A_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_0_addr_gep_fu_156_p3 <= zext_ln21_fu_418_p1(4 - 1 downto 0);

    B_0_address0_assign_proc : process(trunc_ln21_reg_498_pp0_iter15_reg, zext_ln21_fu_418_p1, B_0_addr_gep_fu_156_p3, ap_condition_569)
    begin
        if ((ap_const_boolean_1 = ap_condition_569)) then
            if ((trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_1)) then 
                B_0_address0 <= B_0_addr_gep_fu_156_p3;
            elsif ((trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_0)) then 
                B_0_address0 <= zext_ln21_fu_418_p1(4 - 1 downto 0);
            else 
                B_0_address0 <= "XXXX";
            end if;
        else 
            B_0_address0 <= "XXXX";
        end if; 
    end process;


    B_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln27_reg_489_pp0_iter15_reg, trunc_ln21_reg_498_pp0_iter15_reg, tmp_1_reg_502_pp0_iter15_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_1_reg_502_pp0_iter15_reg = ap_const_lv1_0) and (trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln27_reg_489_pp0_iter15_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_1_reg_502_pp0_iter15_reg = ap_const_lv1_0) and (trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln27_reg_489_pp0_iter15_reg = ap_const_lv1_1)))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_0_d0_assign_proc : process(trunc_ln21_reg_498_pp0_iter15_reg, select_ln1559_1_reg_542, ap_condition_569)
    begin
        if ((ap_const_boolean_1 = ap_condition_569)) then
            if ((trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_1)) then 
                B_0_d0 <= ap_const_lv6_0;
            elsif ((trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_0)) then 
                B_0_d0 <= select_ln1559_1_reg_542;
            else 
                B_0_d0 <= "XXXXXX";
            end if;
        else 
            B_0_d0 <= "XXXXXX";
        end if; 
    end process;


    B_0_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln27_reg_489_pp0_iter15_reg, trunc_ln21_reg_498_pp0_iter15_reg, tmp_1_reg_502_pp0_iter15_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_1_reg_502_pp0_iter15_reg = ap_const_lv1_0) and (trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln27_reg_489_pp0_iter15_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_1_reg_502_pp0_iter15_reg = ap_const_lv1_0) and (trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln27_reg_489_pp0_iter15_reg = ap_const_lv1_1)))) then 
            B_0_we0 <= ap_const_logic_1;
        else 
            B_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    B_1_addr_gep_fu_165_p3 <= zext_ln21_fu_418_p1(4 - 1 downto 0);

    B_1_address0_assign_proc : process(trunc_ln21_reg_498_pp0_iter15_reg, zext_ln21_fu_418_p1, B_1_addr_gep_fu_165_p3, ap_condition_572)
    begin
        if ((ap_const_boolean_1 = ap_condition_572)) then
            if ((trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_1)) then 
                B_1_address0 <= B_1_addr_gep_fu_165_p3;
            elsif ((trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_0)) then 
                B_1_address0 <= zext_ln21_fu_418_p1(4 - 1 downto 0);
            else 
                B_1_address0 <= "XXXX";
            end if;
        else 
            B_1_address0 <= "XXXX";
        end if; 
    end process;


    B_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln27_reg_489_pp0_iter15_reg, trunc_ln21_reg_498_pp0_iter15_reg, tmp_1_reg_502_pp0_iter15_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_1_reg_502_pp0_iter15_reg = ap_const_lv1_1) and (trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln27_reg_489_pp0_iter15_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_1_reg_502_pp0_iter15_reg = ap_const_lv1_1) and (trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln27_reg_489_pp0_iter15_reg = ap_const_lv1_1)))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_d0_assign_proc : process(trunc_ln21_reg_498_pp0_iter15_reg, select_ln1559_1_reg_542, ap_condition_572)
    begin
        if ((ap_const_boolean_1 = ap_condition_572)) then
            if ((trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_1)) then 
                B_1_d0 <= ap_const_lv6_0;
            elsif ((trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_0)) then 
                B_1_d0 <= select_ln1559_1_reg_542;
            else 
                B_1_d0 <= "XXXXXX";
            end if;
        else 
            B_1_d0 <= "XXXXXX";
        end if; 
    end process;


    B_1_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln27_reg_489_pp0_iter15_reg, trunc_ln21_reg_498_pp0_iter15_reg, tmp_1_reg_502_pp0_iter15_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_1_reg_502_pp0_iter15_reg = ap_const_lv1_1) and (trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln27_reg_489_pp0_iter15_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_1_reg_502_pp0_iter15_reg = ap_const_lv1_1) and (trunc_ln21_reg_498_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln27_reg_489_pp0_iter15_reg = ap_const_lv1_1)))) then 
            B_1_we0 <= ap_const_logic_1;
        else 
            B_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln23_1_fu_252_p2 <= std_logic_vector(unsigned(i_fu_96) + unsigned(ap_const_lv5_1));
    add_ln23_fu_198_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln24_fu_233_p2 <= std_logic_vector(unsigned(select_ln21_fu_213_p3) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_318_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init)
    begin
                ap_condition_318 <= ((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_320_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_320 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_569_assign_proc : process(ap_enable_reg_pp0_iter16, icmp_ln27_reg_489_pp0_iter15_reg, tmp_1_reg_502_pp0_iter15_reg, ap_block_pp0_stage0)
    begin
                ap_condition_569 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_1_reg_502_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln27_reg_489_pp0_iter15_reg = ap_const_lv1_1));
    end process;


    ap_condition_572_assign_proc : process(ap_enable_reg_pp0_iter16, icmp_ln27_reg_489_pp0_iter15_reg, tmp_1_reg_502_pp0_iter15_reg, ap_block_pp0_stage0)
    begin
                ap_condition_572 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_1_reg_502_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln27_reg_489_pp0_iter15_reg = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln23_fu_192_p2)
    begin
        if (((icmp_ln23_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_acc_V_1_load_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, acc_V_1_fu_88, grp_fu_426_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            ap_sig_allocacmp_acc_V_1_load <= grp_fu_426_p3;
        else 
            ap_sig_allocacmp_acc_V_1_load <= acc_V_1_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_fu_92, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_92;
        end if; 
    end process;

    grp_fu_426_p0 <= grp_fu_426_p00(5 - 1 downto 0);
    grp_fu_426_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_reg_481_pp0_iter8_reg),10));
    grp_fu_426_p2 <= 
        ap_const_lv12_0 when (icmp_ln25_fu_343_p2(0) = '1') else 
        ap_sig_allocacmp_acc_V_1_load;
    grp_fu_437_p1 <= ap_const_lv26_199A(13 - 1 downto 0);
    icmp_ln23_fu_192_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_190) else "0";
    icmp_ln24_fu_207_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_14) else "0";
    icmp_ln25_fu_343_p2 <= "1" when (select_ln21_reg_481_pp0_iter10_reg = ap_const_lv5_0) else "0";
    icmp_ln27_fu_227_p2 <= "1" when (select_ln21_fu_213_p3 = ap_const_lv5_13) else "0";
    mul_ln21_fu_279_p0 <= mul_ln21_fu_279_p00(5 - 1 downto 0);
    mul_ln21_fu_279_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_1_fu_258_p3),11));
    mul_ln21_fu_279_p1 <= ap_const_lv11_34(7 - 1 downto 0);
    mul_ln232_fu_307_p0 <= mul_ln232_fu_307_p00(5 - 1 downto 0);
    mul_ln232_fu_307_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_reg_481_pp0_iter8_reg),11));
    mul_ln232_fu_307_p1 <= ap_const_lv11_34(7 - 1 downto 0);
    select_ln1559_1_fu_411_p3 <= 
        sub_ln1559_1_fu_405_p2 when (tmp_3_reg_536_pp0_iter14_reg(0) = '1') else 
        tmp_5_fu_389_p4;
    select_ln1559_fu_398_p3 <= 
        tmp_4_fu_379_p4 when (tmp_3_reg_536_pp0_iter14_reg(0) = '1') else 
        tmp_5_fu_389_p4;
    select_ln21_1_fu_258_p3 <= 
        add_ln23_1_fu_252_p2 when (icmp_ln24_reg_476_pp0_iter7_reg(0) = '1') else 
        i_fu_96;
    select_ln21_fu_213_p3 <= 
        ap_const_lv5_0 when (icmp_ln24_fu_207_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    sub_ln1559_1_fu_405_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(select_ln1559_fu_398_p3));
    sub_ln1559_fu_373_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(trunc_ln1559_fu_370_p1));
    tmp_4_fu_379_p4 <= sub_ln1559_fu_373_p2(22 downto 17);
    tmp_5_fu_389_p4 <= grp_fu_437_p2(22 downto 17);
    tmp_fu_323_p3 <= mul_ln232_fu_307_p2(10 downto 9);
    trunc_ln1559_fu_370_p1 <= grp_fu_437_p2(25 - 1 downto 0);
    trunc_ln21_fu_265_p1 <= select_ln21_1_fu_258_p3(1 - 1 downto 0);
    zext_ln21_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_269_p2),64));
    zext_ln232_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_221_p2),64));
end behav;
