// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_perfect_loop_perfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.653000,HLS_SYN_LAT=417,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=660,HLS_SYN_LUT=660,HLS_VERSION=2022_1}" *)

module loop_perfect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        B_0_address0,
        B_0_ce0,
        B_0_we0,
        B_0_d0,
        B_1_address0,
        B_1_ce0,
        B_1_we0,
        B_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_0_address0;
output   A_0_ce0;
input  [4:0] A_0_q0;
output  [3:0] A_1_address0;
output   A_1_ce0;
input  [4:0] A_1_q0;
output  [3:0] B_0_address0;
output   B_0_ce0;
output   B_0_we0;
output  [5:0] B_0_d0;
output  [3:0] B_1_address0;
output   B_1_ce0;
output   B_1_we0;
output  [5:0] B_1_d0;

reg ap_idle;
reg A_0_ce0;
reg A_1_ce0;
reg[3:0] B_0_address0;
reg B_0_ce0;
reg B_0_we0;
reg[5:0] B_0_d0;
reg[3:0] B_1_address0;
reg B_1_ce0;
reg B_1_we0;
reg[5:0] B_1_d0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_192_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln24_fu_207_p2;
reg   [0:0] icmp_ln24_reg_476;
reg   [0:0] icmp_ln24_reg_476_pp0_iter1_reg;
reg   [0:0] icmp_ln24_reg_476_pp0_iter2_reg;
reg   [0:0] icmp_ln24_reg_476_pp0_iter3_reg;
reg   [0:0] icmp_ln24_reg_476_pp0_iter4_reg;
reg   [0:0] icmp_ln24_reg_476_pp0_iter5_reg;
reg   [0:0] icmp_ln24_reg_476_pp0_iter6_reg;
reg   [0:0] icmp_ln24_reg_476_pp0_iter7_reg;
wire   [4:0] select_ln21_fu_213_p3;
reg   [4:0] select_ln21_reg_481;
reg   [4:0] select_ln21_reg_481_pp0_iter1_reg;
reg   [4:0] select_ln21_reg_481_pp0_iter2_reg;
reg   [4:0] select_ln21_reg_481_pp0_iter3_reg;
reg   [4:0] select_ln21_reg_481_pp0_iter4_reg;
reg   [4:0] select_ln21_reg_481_pp0_iter5_reg;
reg   [4:0] select_ln21_reg_481_pp0_iter6_reg;
reg   [4:0] select_ln21_reg_481_pp0_iter7_reg;
reg   [4:0] select_ln21_reg_481_pp0_iter8_reg;
reg   [4:0] select_ln21_reg_481_pp0_iter9_reg;
reg   [4:0] select_ln21_reg_481_pp0_iter10_reg;
wire   [0:0] icmp_ln27_fu_227_p2;
reg   [0:0] icmp_ln27_reg_489;
reg   [0:0] icmp_ln27_reg_489_pp0_iter1_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter2_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter3_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter4_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter5_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter6_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter7_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter8_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter9_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter10_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter11_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter12_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter13_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter14_reg;
reg   [0:0] icmp_ln27_reg_489_pp0_iter15_reg;
wire   [4:0] select_ln21_1_fu_258_p3;
wire   [0:0] trunc_ln21_fu_265_p1;
reg   [0:0] trunc_ln21_reg_498;
reg   [0:0] trunc_ln21_reg_498_pp0_iter9_reg;
reg   [0:0] trunc_ln21_reg_498_pp0_iter10_reg;
reg   [0:0] trunc_ln21_reg_498_pp0_iter11_reg;
reg   [0:0] trunc_ln21_reg_498_pp0_iter12_reg;
reg   [0:0] trunc_ln21_reg_498_pp0_iter13_reg;
reg   [0:0] trunc_ln21_reg_498_pp0_iter14_reg;
reg   [0:0] trunc_ln21_reg_498_pp0_iter15_reg;
reg   [0:0] tmp_1_reg_502;
reg   [0:0] tmp_1_reg_502_pp0_iter9_reg;
reg   [0:0] tmp_1_reg_502_pp0_iter10_reg;
reg   [0:0] tmp_1_reg_502_pp0_iter11_reg;
reg   [0:0] tmp_1_reg_502_pp0_iter12_reg;
reg   [0:0] tmp_1_reg_502_pp0_iter13_reg;
reg   [0:0] tmp_1_reg_502_pp0_iter14_reg;
reg   [0:0] tmp_1_reg_502_pp0_iter15_reg;
reg   [0:0] tmp_3_reg_536;
reg   [0:0] tmp_3_reg_536_pp0_iter13_reg;
reg   [0:0] tmp_3_reg_536_pp0_iter14_reg;
wire   [5:0] select_ln1559_1_fu_411_p3;
reg   [5:0] select_ln1559_1_reg_542;
wire   [63:0] zext_ln232_fu_293_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln21_fu_418_p1;
wire   [3:0] B_0_addr_gep_fu_156_p3;
wire   [3:0] B_1_addr_gep_fu_165_p3;
reg   [11:0] acc_V_1_fu_88;
wire  signed [11:0] grp_fu_426_p3;
reg   [11:0] ap_sig_allocacmp_acc_V_1_load;
reg   [4:0] j_fu_92;
wire   [4:0] add_ln24_fu_233_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_96;
reg   [8:0] indvar_flatten_fu_100;
wire   [8:0] add_ln23_fu_198_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [4:0] add_ln23_1_fu_252_p2;
wire   [4:0] mul_ln21_fu_279_p0;
wire   [6:0] mul_ln21_fu_279_p1;
wire   [10:0] mul_ln21_fu_279_p2;
wire   [4:0] grp_fu_221_p2;
wire   [4:0] mul_ln232_fu_307_p0;
wire   [6:0] mul_ln232_fu_307_p1;
wire   [10:0] mul_ln232_fu_307_p2;
wire   [1:0] tmp_fu_323_p3;
wire  signed [4:0] tmp_fu_323_p4;
wire   [0:0] icmp_ln25_fu_343_p2;
wire  signed [25:0] grp_fu_437_p2;
wire   [24:0] trunc_ln1559_fu_370_p1;
wire   [24:0] sub_ln1559_fu_373_p2;
wire   [5:0] tmp_4_fu_379_p4;
wire   [5:0] tmp_5_fu_389_p4;
wire   [5:0] select_ln1559_fu_398_p3;
wire   [5:0] sub_ln1559_1_fu_405_p2;
wire   [4:0] grp_fu_269_p2;
wire   [4:0] grp_fu_426_p0;
wire  signed [11:0] grp_fu_426_p2;
wire   [12:0] grp_fu_437_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [9:0] grp_fu_426_p00;
wire   [10:0] mul_ln21_fu_279_p00;
wire   [10:0] mul_ln232_fu_307_p00;
reg    ap_condition_569;
reg    ap_condition_572;
reg    ap_condition_318;
reg    ap_condition_320;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_done_reg = 1'b0;
end

loop_perfect_urem_5ns_5ns_5_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
urem_5ns_5ns_5_9_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln21_fu_213_p3),
    .din1(5'd10),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

loop_perfect_urem_5ns_5ns_5_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
urem_5ns_5ns_5_9_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln21_1_fu_258_p3),
    .din1(5'd10),
    .ce(1'b1),
    .dout(grp_fu_269_p2)
);

loop_perfect_mul_5ns_7ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
mul_5ns_7ns_11_1_1_U3(
    .din0(mul_ln21_fu_279_p0),
    .din1(mul_ln21_fu_279_p1),
    .dout(mul_ln21_fu_279_p2)
);

loop_perfect_mul_5ns_7ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
mul_5ns_7ns_11_1_1_U4(
    .din0(mul_ln232_fu_307_p0),
    .din1(mul_ln232_fu_307_p1),
    .dout(mul_ln232_fu_307_p2)
);

loop_perfect_mux_22_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 5 ))
mux_22_5_1_1_U5(
    .din0(A_0_q0),
    .din1(A_1_q0),
    .din2(tmp_fu_323_p3),
    .dout(tmp_fu_323_p4)
);

loop_perfect_mac_muladd_5ns_5s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mac_muladd_5ns_5s_12s_12_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_426_p0),
    .din1(tmp_fu_323_p4),
    .din2(grp_fu_426_p2),
    .ce(1'b1),
    .dout(grp_fu_426_p3)
);

loop_perfect_mul_mul_12s_13ns_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 26 ))
mul_mul_12s_13ns_26_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_426_p3),
    .din1(grp_fu_437_p1),
    .ce(1'b1),
    .dout(grp_fu_437_p2)
);

loop_perfect_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_318)) begin
            i_fu_96 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter8 == 1'b1)) begin
            i_fu_96 <= select_ln21_1_fu_258_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_320)) begin
        if ((icmp_ln23_fu_192_p2 == 1'd0)) begin
            indvar_flatten_fu_100 <= add_ln23_fu_198_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_100 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_320)) begin
        if ((icmp_ln23_fu_192_p2 == 1'd0)) begin
            j_fu_92 <= add_ln24_fu_233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_92 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        acc_V_1_fu_88 <= grp_fu_426_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln24_reg_476_pp0_iter2_reg <= icmp_ln24_reg_476_pp0_iter1_reg;
        icmp_ln24_reg_476_pp0_iter3_reg <= icmp_ln24_reg_476_pp0_iter2_reg;
        icmp_ln24_reg_476_pp0_iter4_reg <= icmp_ln24_reg_476_pp0_iter3_reg;
        icmp_ln24_reg_476_pp0_iter5_reg <= icmp_ln24_reg_476_pp0_iter4_reg;
        icmp_ln24_reg_476_pp0_iter6_reg <= icmp_ln24_reg_476_pp0_iter5_reg;
        icmp_ln24_reg_476_pp0_iter7_reg <= icmp_ln24_reg_476_pp0_iter6_reg;
        icmp_ln27_reg_489_pp0_iter10_reg <= icmp_ln27_reg_489_pp0_iter9_reg;
        icmp_ln27_reg_489_pp0_iter11_reg <= icmp_ln27_reg_489_pp0_iter10_reg;
        icmp_ln27_reg_489_pp0_iter12_reg <= icmp_ln27_reg_489_pp0_iter11_reg;
        icmp_ln27_reg_489_pp0_iter13_reg <= icmp_ln27_reg_489_pp0_iter12_reg;
        icmp_ln27_reg_489_pp0_iter14_reg <= icmp_ln27_reg_489_pp0_iter13_reg;
        icmp_ln27_reg_489_pp0_iter15_reg <= icmp_ln27_reg_489_pp0_iter14_reg;
        icmp_ln27_reg_489_pp0_iter2_reg <= icmp_ln27_reg_489_pp0_iter1_reg;
        icmp_ln27_reg_489_pp0_iter3_reg <= icmp_ln27_reg_489_pp0_iter2_reg;
        icmp_ln27_reg_489_pp0_iter4_reg <= icmp_ln27_reg_489_pp0_iter3_reg;
        icmp_ln27_reg_489_pp0_iter5_reg <= icmp_ln27_reg_489_pp0_iter4_reg;
        icmp_ln27_reg_489_pp0_iter6_reg <= icmp_ln27_reg_489_pp0_iter5_reg;
        icmp_ln27_reg_489_pp0_iter7_reg <= icmp_ln27_reg_489_pp0_iter6_reg;
        icmp_ln27_reg_489_pp0_iter8_reg <= icmp_ln27_reg_489_pp0_iter7_reg;
        icmp_ln27_reg_489_pp0_iter9_reg <= icmp_ln27_reg_489_pp0_iter8_reg;
        select_ln21_reg_481_pp0_iter10_reg <= select_ln21_reg_481_pp0_iter9_reg;
        select_ln21_reg_481_pp0_iter2_reg <= select_ln21_reg_481_pp0_iter1_reg;
        select_ln21_reg_481_pp0_iter3_reg <= select_ln21_reg_481_pp0_iter2_reg;
        select_ln21_reg_481_pp0_iter4_reg <= select_ln21_reg_481_pp0_iter3_reg;
        select_ln21_reg_481_pp0_iter5_reg <= select_ln21_reg_481_pp0_iter4_reg;
        select_ln21_reg_481_pp0_iter6_reg <= select_ln21_reg_481_pp0_iter5_reg;
        select_ln21_reg_481_pp0_iter7_reg <= select_ln21_reg_481_pp0_iter6_reg;
        select_ln21_reg_481_pp0_iter8_reg <= select_ln21_reg_481_pp0_iter7_reg;
        select_ln21_reg_481_pp0_iter9_reg <= select_ln21_reg_481_pp0_iter8_reg;
        tmp_1_reg_502 <= mul_ln21_fu_279_p2[32'd9];
        tmp_1_reg_502_pp0_iter10_reg <= tmp_1_reg_502_pp0_iter9_reg;
        tmp_1_reg_502_pp0_iter11_reg <= tmp_1_reg_502_pp0_iter10_reg;
        tmp_1_reg_502_pp0_iter12_reg <= tmp_1_reg_502_pp0_iter11_reg;
        tmp_1_reg_502_pp0_iter13_reg <= tmp_1_reg_502_pp0_iter12_reg;
        tmp_1_reg_502_pp0_iter14_reg <= tmp_1_reg_502_pp0_iter13_reg;
        tmp_1_reg_502_pp0_iter15_reg <= tmp_1_reg_502_pp0_iter14_reg;
        tmp_1_reg_502_pp0_iter9_reg <= tmp_1_reg_502;
        tmp_3_reg_536_pp0_iter13_reg <= tmp_3_reg_536;
        tmp_3_reg_536_pp0_iter14_reg <= tmp_3_reg_536_pp0_iter13_reg;
        trunc_ln21_reg_498 <= trunc_ln21_fu_265_p1;
        trunc_ln21_reg_498_pp0_iter10_reg <= trunc_ln21_reg_498_pp0_iter9_reg;
        trunc_ln21_reg_498_pp0_iter11_reg <= trunc_ln21_reg_498_pp0_iter10_reg;
        trunc_ln21_reg_498_pp0_iter12_reg <= trunc_ln21_reg_498_pp0_iter11_reg;
        trunc_ln21_reg_498_pp0_iter13_reg <= trunc_ln21_reg_498_pp0_iter12_reg;
        trunc_ln21_reg_498_pp0_iter14_reg <= trunc_ln21_reg_498_pp0_iter13_reg;
        trunc_ln21_reg_498_pp0_iter15_reg <= trunc_ln21_reg_498_pp0_iter14_reg;
        trunc_ln21_reg_498_pp0_iter9_reg <= trunc_ln21_reg_498;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln24_reg_476_pp0_iter1_reg <= icmp_ln24_reg_476;
        icmp_ln27_reg_489_pp0_iter1_reg <= icmp_ln27_reg_489;
        select_ln21_reg_481_pp0_iter1_reg <= select_ln21_reg_481;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_192_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln24_reg_476 <= icmp_ln24_fu_207_p2;
        icmp_ln27_reg_489 <= icmp_ln27_fu_227_p2;
        select_ln21_reg_481 <= select_ln21_fu_213_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln21_reg_498_pp0_iter14_reg == 1'd0) & (icmp_ln27_reg_489_pp0_iter14_reg == 1'd1))) begin
        select_ln1559_1_reg_542 <= select_ln1559_1_fu_411_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln21_reg_498_pp0_iter11_reg == 1'd0) & (icmp_ln27_reg_489_pp0_iter11_reg == 1'd1))) begin
        tmp_3_reg_536 <= grp_fu_426_p3[32'd11];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        A_0_ce0 = 1'b1;
    end else begin
        A_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_569)) begin
        if ((trunc_ln21_reg_498_pp0_iter15_reg == 1'd1)) begin
            B_0_address0 = B_0_addr_gep_fu_156_p3;
        end else if ((trunc_ln21_reg_498_pp0_iter15_reg == 1'd0)) begin
            B_0_address0 = zext_ln21_fu_418_p1;
        end else begin
            B_0_address0 = 'bx;
        end
    end else begin
        B_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (tmp_1_reg_502_pp0_iter15_reg == 1'd0) & (trunc_ln21_reg_498_pp0_iter15_reg == 1'd1) & (icmp_ln27_reg_489_pp0_iter15_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (tmp_1_reg_502_pp0_iter15_reg == 1'd0) & (trunc_ln21_reg_498_pp0_iter15_reg == 1'd0) & (icmp_ln27_reg_489_pp0_iter15_reg == 1'd1)))) begin
        B_0_ce0 = 1'b1;
    end else begin
        B_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_569)) begin
        if ((trunc_ln21_reg_498_pp0_iter15_reg == 1'd1)) begin
            B_0_d0 = 6'd0;
        end else if ((trunc_ln21_reg_498_pp0_iter15_reg == 1'd0)) begin
            B_0_d0 = select_ln1559_1_reg_542;
        end else begin
            B_0_d0 = 'bx;
        end
    end else begin
        B_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (tmp_1_reg_502_pp0_iter15_reg == 1'd0) & (trunc_ln21_reg_498_pp0_iter15_reg == 1'd1) & (icmp_ln27_reg_489_pp0_iter15_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (tmp_1_reg_502_pp0_iter15_reg == 1'd0) & (trunc_ln21_reg_498_pp0_iter15_reg == 1'd0) & (icmp_ln27_reg_489_pp0_iter15_reg == 1'd1)))) begin
        B_0_we0 = 1'b1;
    end else begin
        B_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_572)) begin
        if ((trunc_ln21_reg_498_pp0_iter15_reg == 1'd1)) begin
            B_1_address0 = B_1_addr_gep_fu_165_p3;
        end else if ((trunc_ln21_reg_498_pp0_iter15_reg == 1'd0)) begin
            B_1_address0 = zext_ln21_fu_418_p1;
        end else begin
            B_1_address0 = 'bx;
        end
    end else begin
        B_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (tmp_1_reg_502_pp0_iter15_reg == 1'd1) & (trunc_ln21_reg_498_pp0_iter15_reg == 1'd1) & (icmp_ln27_reg_489_pp0_iter15_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (tmp_1_reg_502_pp0_iter15_reg == 1'd1) & (trunc_ln21_reg_498_pp0_iter15_reg == 1'd0) & (icmp_ln27_reg_489_pp0_iter15_reg == 1'd1)))) begin
        B_1_ce0 = 1'b1;
    end else begin
        B_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_572)) begin
        if ((trunc_ln21_reg_498_pp0_iter15_reg == 1'd1)) begin
            B_1_d0 = 6'd0;
        end else if ((trunc_ln21_reg_498_pp0_iter15_reg == 1'd0)) begin
            B_1_d0 = select_ln1559_1_reg_542;
        end else begin
            B_1_d0 = 'bx;
        end
    end else begin
        B_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (tmp_1_reg_502_pp0_iter15_reg == 1'd1) & (trunc_ln21_reg_498_pp0_iter15_reg == 1'd1) & (icmp_ln27_reg_489_pp0_iter15_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (tmp_1_reg_502_pp0_iter15_reg == 1'd1) & (trunc_ln21_reg_498_pp0_iter15_reg == 1'd0) & (icmp_ln27_reg_489_pp0_iter15_reg == 1'd1)))) begin
        B_1_we0 = 1'b1;
    end else begin
        B_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_192_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        ap_sig_allocacmp_acc_V_1_load = grp_fu_426_p3;
    end else begin
        ap_sig_allocacmp_acc_V_1_load = acc_V_1_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_92;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_address0 = zext_ln232_fu_293_p1;

assign A_1_address0 = zext_ln232_fu_293_p1;

assign B_0_addr_gep_fu_156_p3 = zext_ln21_fu_418_p1;

assign B_1_addr_gep_fu_165_p3 = zext_ln21_fu_418_p1;

assign add_ln23_1_fu_252_p2 = (i_fu_96 + 5'd1);

assign add_ln23_fu_198_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln24_fu_233_p2 = (select_ln21_fu_213_p3 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_318 = ((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_320 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_569 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (tmp_1_reg_502_pp0_iter15_reg == 1'd0) & (icmp_ln27_reg_489_pp0_iter15_reg == 1'd1));
end

always @ (*) begin
    ap_condition_572 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (tmp_1_reg_502_pp0_iter15_reg == 1'd1) & (icmp_ln27_reg_489_pp0_iter15_reg == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_426_p0 = grp_fu_426_p00;

assign grp_fu_426_p00 = select_ln21_reg_481_pp0_iter8_reg;

assign grp_fu_426_p2 = ((icmp_ln25_fu_343_p2[0:0] == 1'b1) ? 12'd0 : ap_sig_allocacmp_acc_V_1_load);

assign grp_fu_437_p1 = 26'd6554;

assign icmp_ln23_fu_192_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_207_p2 = ((ap_sig_allocacmp_j_load == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_343_p2 = ((select_ln21_reg_481_pp0_iter10_reg == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_227_p2 = ((select_ln21_fu_213_p3 == 5'd19) ? 1'b1 : 1'b0);

assign mul_ln21_fu_279_p0 = mul_ln21_fu_279_p00;

assign mul_ln21_fu_279_p00 = select_ln21_1_fu_258_p3;

assign mul_ln21_fu_279_p1 = 11'd52;

assign mul_ln232_fu_307_p0 = mul_ln232_fu_307_p00;

assign mul_ln232_fu_307_p00 = select_ln21_reg_481_pp0_iter8_reg;

assign mul_ln232_fu_307_p1 = 11'd52;

assign select_ln1559_1_fu_411_p3 = ((tmp_3_reg_536_pp0_iter14_reg[0:0] == 1'b1) ? sub_ln1559_1_fu_405_p2 : tmp_5_fu_389_p4);

assign select_ln1559_fu_398_p3 = ((tmp_3_reg_536_pp0_iter14_reg[0:0] == 1'b1) ? tmp_4_fu_379_p4 : tmp_5_fu_389_p4);

assign select_ln21_1_fu_258_p3 = ((icmp_ln24_reg_476_pp0_iter7_reg[0:0] == 1'b1) ? add_ln23_1_fu_252_p2 : i_fu_96);

assign select_ln21_fu_213_p3 = ((icmp_ln24_fu_207_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign sub_ln1559_1_fu_405_p2 = (6'd0 - select_ln1559_fu_398_p3);

assign sub_ln1559_fu_373_p2 = (25'd0 - trunc_ln1559_fu_370_p1);

assign tmp_4_fu_379_p4 = {{sub_ln1559_fu_373_p2[22:17]}};

assign tmp_5_fu_389_p4 = {{grp_fu_437_p2[22:17]}};

assign tmp_fu_323_p3 = {{mul_ln232_fu_307_p2[10:9]}};

assign trunc_ln1559_fu_370_p1 = grp_fu_437_p2[24:0];

assign trunc_ln21_fu_265_p1 = select_ln21_1_fu_258_p3[0:0];

assign zext_ln21_fu_418_p1 = grp_fu_269_p2;

assign zext_ln232_fu_293_p1 = grp_fu_221_p2;

endmodule //loop_perfect
