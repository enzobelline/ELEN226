-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_perfect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_0_ce1 : OUT STD_LOGIC;
    A_0_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_1_ce1 : OUT STD_LOGIC;
    A_1_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_we0 : OUT STD_LOGIC;
    B_0_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_we0 : OUT STD_LOGIC;
    B_1_d0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of loop_perfect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_perfect_loop_perfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.894250,HLS_SYN_LAT=105,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=166,HLS_SYN_LUT=862,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv10_34 : STD_LOGIC_VECTOR (9 downto 0) := "0000110100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv10_13 : STD_LOGIC_VECTOR (9 downto 0) := "0000010011";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv26_199A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001100110011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln23_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal do_init_reg_351 : STD_LOGIC_VECTOR (0 downto 0);
    signal do_init_reg_351_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i3_reg_368 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_383 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_rewind_reg_398 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_427 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_431 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_435 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_439 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_fu_508_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_reg_1170 : STD_LOGIC_VECTOR (8 downto 0);
    signal A_1_load_4_reg_1195 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_1_load_6_reg_1221 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_643_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_reg_1236 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1066_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp19_reg_1241 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_10_fu_653_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1246 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1246_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_fu_669_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_13_reg_1250 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1255_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1259 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1259_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_885_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_reg_1263 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp15_fu_907_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp15_reg_1273 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp17_fu_942_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp17_reg_1278 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln21_fu_999_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_1294 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul_fu_1004_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_1300 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_fu_1010_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1305 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_16_fu_1057_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i3_phi_fu_372_p6 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_phi_mux_phi_mul_phi_fu_387_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter0_p_phi_reg_413 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_p_phi_reg_413 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter2_p_phi_reg_413 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal mul_i_i_2_fu_448_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal A_0_load_2_cast22_fu_460_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl15_fu_464_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl15_fu_464_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl15_cast_fu_472_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_0_load_2_cast22_fu_460_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_i_i_3_fu_476_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_i_i_4_fu_486_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_i_i_3_cast_fu_482_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_i_i_4_cast_fu_494_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_502_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_i_i_2_cast_fu_456_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_fu_522_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl14_fu_522_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl12_fu_534_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl13_fu_546_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl12_cast_fu_542_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl13_cast_fu_554_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_i_i_6_fu_558_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal A_0_load_6_cast24_fu_568_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl11_fu_572_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl11_fu_572_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl11_cast_fu_580_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal A_0_load_6_cast24_fu_568_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_i_i_7_fu_584_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_fu_594_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_fu_606_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_cast_fu_602_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl7_cast_fu_614_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_6_cast_fu_564_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_7_cast_fu_590_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_fu_627_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl14_cast_fu_530_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp4_fu_633_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp4_cast_fu_639_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_cast_fu_624_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_649_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_11_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_12_fu_663_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_0_load_4_cast_fu_691_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_i_i_8_fu_695_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_0_load_8_cast30_fu_707_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl10_fu_711_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl10_fu_711_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_fu_723_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_fu_735_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_fu_747_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_fu_758_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_754_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_765_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_14_fu_769_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_1_load_5_cast28_fu_779_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_fu_783_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_fu_783_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_791_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_1_load_5_cast28_fu_779_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_15_fu_795_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_s_fu_805_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal A_1_load_7_cast31_fu_816_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_820_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_820_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_832_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_fu_844_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl10_cast_fu_719_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_cast_fu_743_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_fu_856_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_cast_fu_862_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_8_cast_fu_703_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp7_fu_866_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1074_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_cast_fu_876_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_cast_fu_731_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp9_fu_879_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_cast_fu_872_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_i_i_14_cast_fu_775_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_i_i_15_cast_fu_801_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_828_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_852_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp16_fu_897_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp16_cast_fu_903_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_i_i_16_cast_fu_812_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp19_cast_fu_913_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_840_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal A_0_load_8_cast30_fu_707_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal A_1_load_7_cast31_fu_816_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp21_fu_922_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp21_cast_fu_928_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal A_0_load_4_cast_fu_691_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp20_fu_932_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp20_cast_fu_938_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp18_fu_916_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_cast_fu_951_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_cast_fu_948_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1083_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp15_cast_fu_963_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp13_cast_fu_960_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp17_cast_fu_972_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp12_fu_966_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp11_fu_975_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_954_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_V_1_fu_981_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1092_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal empty_14_fu_1016_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal neg_mul_fu_1019_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_2_fu_1025_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1035_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_15_fu_1044_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal neg_ti_fu_1051_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1066_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1074_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1074_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1083_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1083_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1092_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1066_ce : STD_LOGIC;
    signal grp_fu_1074_ce : STD_LOGIC;
    signal grp_fu_1083_ce : STD_LOGIC;
    signal grp_fu_1092_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_296 : BOOLEAN;
    signal ap_condition_291 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component loop_perfect_mac_muladd_5s_5ns_5s_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component loop_perfect_mac_muladd_5s_4ns_10s_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component loop_perfect_mac_muladd_5s_4ns_11s_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component loop_perfect_mul_mul_12s_13ns_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mac_muladd_5s_5ns_5s_10_4_1_U1 : component loop_perfect_mac_muladd_5s_5ns_5s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_1_q0,
        din1 => grp_fu_1066_p1,
        din2 => reg_427,
        ce => grp_fu_1066_ce,
        dout => grp_fu_1066_p3);

    mac_muladd_5s_4ns_10s_10_4_1_U2 : component loop_perfect_mac_muladd_5s_4ns_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_435,
        din1 => grp_fu_1074_p1,
        din2 => grp_fu_1074_p2,
        ce => grp_fu_1074_ce,
        dout => grp_fu_1074_p3);

    mac_muladd_5s_4ns_11s_11_4_1_U3 : component loop_perfect_mac_muladd_5s_4ns_11s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_439,
        din1 => grp_fu_1083_p1,
        din2 => grp_fu_1083_p2,
        ce => grp_fu_1083_ce,
        dout => grp_fu_1083_p3);

    mul_mul_12s_13ns_26_4_1_U4 : component loop_perfect_mul_mul_12s_13ns_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_V_1_fu_981_p2,
        din1 => grp_fu_1092_p1,
        ce => grp_fu_1092_ce,
        dout => grp_fu_1092_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_p_phi_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_291)) then
                if ((do_init_reg_351_pp0_iter1_reg = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter2_p_phi_reg_413 <= p_rewind_reg_398;
                elsif ((do_init_reg_351_pp0_iter1_reg = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_p_phi_reg_413 <= empty_16_fu_1057_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_phi_reg_413 <= ap_phi_reg_pp0_iter1_p_phi_reg_413;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln23_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                do_init_reg_351 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln23_reg_1259 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                do_init_reg_351 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i3_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln23_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                i3_reg_368 <= i_reg_1305;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln23_reg_1259 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                i3_reg_368 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln23_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                phi_mul_reg_383 <= next_mul_reg_1300;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln23_reg_1259 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                phi_mul_reg_383 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_439 <= A_1_q1;
            elsif (((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_439 <= A_1_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                A_1_load_4_reg_1195 <= A_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                A_1_load_6_reg_1221 <= A_1_q0;
                tmp19_reg_1241 <= grp_fu_1066_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                ap_phi_reg_pp0_iter1_p_phi_reg_413 <= ap_phi_reg_pp0_iter0_p_phi_reg_413;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                do_init_reg_351_pp0_iter1_reg <= do_init_reg_351;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                empty_10_reg_1246 <= empty_10_fu_653_p1;
                empty_10_reg_1246_pp0_iter1_reg <= empty_10_reg_1246;
                empty_13_reg_1250 <= empty_13_fu_669_p3;
                icmp_ln23_reg_1259 <= icmp_ln23_fu_685_p2;
                icmp_ln23_reg_1259_pp0_iter1_reg <= icmp_ln23_reg_1259;
                tmp_4_reg_1255 <= ap_phi_mux_phi_mul_phi_fu_387_p6(9 downto 9);
                tmp_4_reg_1255_pp0_iter1_reg <= tmp_4_reg_1255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                i_reg_1305 <= i_fu_1010_p2;
                next_mul_reg_1300 <= next_mul_fu_1004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln23_reg_1259_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_rewind_reg_398 <= ap_phi_reg_pp0_iter2_p_phi_reg_413;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_427 <= A_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_431 <= A_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_435 <= A_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    tmp15_reg_1273(10 downto 1) <= tmp15_fu_907_p2(10 downto 1);
                tmp17_reg_1278 <= tmp17_fu_942_p2;
                tmp6_reg_1263 <= tmp6_fu_885_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp1_reg_1236 <= tmp1_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((do_init_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp2_reg_1170 <= tmp2_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((do_init_reg_351_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_1_reg_1288 <= acc_V_1_fu_981_p2(11 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln21_reg_1294(3 downto 0) <= zext_ln21_fu_999_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp15_reg_1273(0) <= '0';
    zext_ln21_reg_1294(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    A_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                A_0_address0 <= ap_const_lv64_9(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                A_0_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                A_0_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_0_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                A_0_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            else 
                A_0_address0 <= "XXXX";
            end if;
        else 
            A_0_address0 <= "XXXX";
        end if; 
    end process;


    A_0_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                A_0_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                A_0_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_0_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                A_0_address1 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                A_0_address1 <= "XXXX";
            end if;
        else 
            A_0_address1 <= "XXXX";
        end if; 
    end process;


    A_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_0_ce1 <= ap_const_logic_1;
        else 
            A_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_0_load_2_cast22_fu_460_p0 <= A_0_q1;
        A_0_load_2_cast22_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_0_load_2_cast22_fu_460_p0),8));

    A_0_load_4_cast_fu_691_p0 <= reg_427;
        A_0_load_4_cast_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_0_load_4_cast_fu_691_p0),7));

    A_0_load_6_cast24_fu_568_p0 <= A_0_q1;
        A_0_load_6_cast24_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_0_load_6_cast24_fu_568_p0),9));

    A_0_load_8_cast30_fu_707_p0 <= A_0_q0;
        A_0_load_8_cast30_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_0_load_8_cast30_fu_707_p0),6));


    A_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                A_1_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                A_1_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                A_1_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_1_address0 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                A_1_address0 <= ap_const_lv64_9(4 - 1 downto 0);
            else 
                A_1_address0 <= "XXXX";
            end if;
        else 
            A_1_address0 <= "XXXX";
        end if; 
    end process;


    A_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                A_1_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                A_1_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                A_1_address1 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_1_address1 <= ap_const_lv64_0(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                A_1_address1 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                A_1_address1 <= "XXXX";
            end if;
        else 
            A_1_address1 <= "XXXX";
        end if; 
    end process;


    A_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_1_ce1 <= ap_const_logic_1;
        else 
            A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_load_5_cast28_fu_779_p0 <= reg_439;
        A_1_load_5_cast28_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_1_load_5_cast28_fu_779_p0),10));

    A_1_load_7_cast31_fu_816_p0 <= A_1_q1;
        A_1_load_7_cast31_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_1_load_7_cast31_fu_816_p0),6));


    B_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, zext_ln21_fu_999_p1, zext_ln21_reg_1294, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_0_address0 <= zext_ln21_reg_1294(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            B_0_address0 <= zext_ln21_fu_999_p1(4 - 1 downto 0);
        else 
            B_0_address0 <= "XXXX";
        end if; 
    end process;


    B_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_0_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_phi_reg_pp0_iter2_p_phi_reg_413, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_0_d0 <= ap_phi_reg_pp0_iter2_p_phi_reg_413;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            B_0_d0 <= ap_const_lv6_0;
        else 
            B_0_d0 <= "XXXXXX";
        end if; 
    end process;


    B_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, empty_10_reg_1246, empty_10_reg_1246_pp0_iter1_reg, tmp_4_reg_1255, tmp_4_reg_1255_pp0_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_4_reg_1255_pp0_iter1_reg = ap_const_lv1_0) and (empty_10_reg_1246_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_4_reg_1255 = ap_const_lv1_0) and (empty_10_reg_1246 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_0_we0 <= ap_const_logic_1;
        else 
            B_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, zext_ln21_fu_999_p1, zext_ln21_reg_1294, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_1_address0 <= zext_ln21_reg_1294(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            B_1_address0 <= zext_ln21_fu_999_p1(4 - 1 downto 0);
        else 
            B_1_address0 <= "XXXX";
        end if; 
    end process;


    B_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_phi_reg_pp0_iter2_p_phi_reg_413, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_1_d0 <= ap_phi_reg_pp0_iter2_p_phi_reg_413;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            B_1_d0 <= ap_const_lv6_0;
        else 
            B_1_d0 <= "XXXXXX";
        end if; 
    end process;


    B_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, empty_10_reg_1246, empty_10_reg_1246_pp0_iter1_reg, tmp_4_reg_1255, tmp_4_reg_1255_pp0_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_4_reg_1255_pp0_iter1_reg = ap_const_lv1_1) and (empty_10_reg_1246_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_4_reg_1255 = ap_const_lv1_1) and (empty_10_reg_1246 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_1_we0 <= ap_const_logic_1;
        else 
            B_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc_V_1_fu_981_p2 <= std_logic_vector(unsigned(tmp11_fu_975_p2) + unsigned(tmp_fu_954_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_291_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_291 <= ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4));
    end process;


    ap_condition_296_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4)
    begin
                ap_condition_296 <= ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln23_reg_1259_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln23_reg_1259_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i3_phi_fu_372_p6_assign_proc : process(i3_reg_368, icmp_ln23_reg_1259, i_reg_1305, ap_condition_296)
    begin
        if ((ap_const_boolean_1 = ap_condition_296)) then
            if ((icmp_ln23_reg_1259 = ap_const_lv1_1)) then 
                ap_phi_mux_i3_phi_fu_372_p6 <= ap_const_lv5_0;
            elsif ((icmp_ln23_reg_1259 = ap_const_lv1_0)) then 
                ap_phi_mux_i3_phi_fu_372_p6 <= i_reg_1305;
            else 
                ap_phi_mux_i3_phi_fu_372_p6 <= i3_reg_368;
            end if;
        else 
            ap_phi_mux_i3_phi_fu_372_p6 <= i3_reg_368;
        end if; 
    end process;


    ap_phi_mux_phi_mul_phi_fu_387_p6_assign_proc : process(phi_mul_reg_383, icmp_ln23_reg_1259, next_mul_reg_1300, ap_condition_296)
    begin
        if ((ap_const_boolean_1 = ap_condition_296)) then
            if ((icmp_ln23_reg_1259 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_mul_phi_fu_387_p6 <= ap_const_lv10_0;
            elsif ((icmp_ln23_reg_1259 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_mul_phi_fu_387_p6 <= next_mul_reg_1300;
            else 
                ap_phi_mux_phi_mul_phi_fu_387_p6 <= phi_mul_reg_383;
            end if;
        else 
            ap_phi_mux_phi_mul_phi_fu_387_p6 <= phi_mul_reg_383;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_phi_reg_413 <= "XXXXXX";

    ap_ready_assign_proc : process(icmp_ln23_fu_685_p2, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln23_fu_685_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_653_p1 <= ap_phi_mux_i3_phi_fu_372_p6(1 - 1 downto 0);
    empty_11_fu_657_p2 <= "1" when (unsigned(ap_phi_mux_i3_phi_fu_372_p6) < unsigned(ap_const_lv5_A)) else "0";
    empty_12_fu_663_p2 <= std_logic_vector(unsigned(empty_fu_649_p1) + unsigned(ap_const_lv4_6));
    empty_13_fu_669_p3 <= 
        empty_fu_649_p1 when (empty_11_fu_657_p2(0) = '1') else 
        empty_12_fu_663_p2;
    empty_14_fu_1016_p1 <= grp_fu_1092_p2(25 - 1 downto 0);
    empty_15_fu_1044_p3 <= 
        tmp_2_fu_1025_p4 when (tmp_1_reg_1288(0) = '1') else 
        tmp_3_fu_1035_p4;
    empty_16_fu_1057_p3 <= 
        neg_ti_fu_1051_p2 when (tmp_1_reg_1288(0) = '1') else 
        tmp_3_fu_1035_p4;
    empty_fu_649_p1 <= ap_phi_mux_i3_phi_fu_372_p6(4 - 1 downto 0);

    grp_fu_1066_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_1066_ce <= ap_const_logic_1;
        else 
            grp_fu_1066_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1066_p1 <= ap_const_lv10_13(5 - 1 downto 0);

    grp_fu_1074_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_1074_ce <= ap_const_logic_1;
        else 
            grp_fu_1074_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1074_p1 <= ap_const_lv10_B(4 - 1 downto 0);
    grp_fu_1074_p2 <= std_logic_vector(signed(p_shl6_cast_fu_602_p1) - signed(p_shl7_cast_fu_614_p1));

    grp_fu_1083_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_1083_ce <= ap_const_logic_1;
        else 
            grp_fu_1083_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1083_p1 <= ap_const_lv10_D(4 - 1 downto 0);
    grp_fu_1083_p2 <= std_logic_vector(signed(mul_i_i_14_cast_fu_775_p1) + signed(mul_i_i_15_cast_fu_801_p1));

    grp_fu_1092_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_1092_ce <= ap_const_logic_1;
        else 
            grp_fu_1092_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1092_p1 <= ap_const_lv26_199A(13 - 1 downto 0);
    i_fu_1010_p2 <= std_logic_vector(unsigned(i3_reg_368) + unsigned(ap_const_lv5_1));
    icmp_ln23_fu_685_p2 <= "1" when (ap_phi_mux_i3_phi_fu_372_p6 = ap_const_lv5_13) else "0";
        mul_i_i_14_cast_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_14_fu_769_p2),11));

    mul_i_i_14_fu_769_p2 <= std_logic_vector(signed(p_shl4_cast_fu_754_p1) - signed(p_shl5_cast_fu_765_p1));
        mul_i_i_15_cast_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_15_fu_795_p2),11));

    mul_i_i_15_fu_795_p2 <= std_logic_vector(signed(p_shl3_cast_fu_791_p1) - signed(A_1_load_5_cast28_fu_779_p1));
        mul_i_i_16_cast_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_s_fu_805_p3),11));

        mul_i_i_2_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_2_fu_448_p3),9));

    mul_i_i_2_fu_448_p3 <= (reg_431 & ap_const_lv1_0);
        mul_i_i_3_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_3_fu_476_p2),9));

    mul_i_i_3_fu_476_p2 <= std_logic_vector(signed(p_shl15_cast_fu_472_p1) - signed(A_0_load_2_cast22_fu_460_p1));
        mul_i_i_4_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_4_fu_486_p3),9));

    mul_i_i_4_fu_486_p3 <= (A_0_q0 & ap_const_lv2_0);
        mul_i_i_6_cast_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_6_fu_558_p2),10));

    mul_i_i_6_fu_558_p2 <= std_logic_vector(signed(p_shl12_cast_fu_542_p1) - signed(p_shl13_cast_fu_554_p1));
        mul_i_i_7_cast_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_7_fu_584_p2),10));

    mul_i_i_7_fu_584_p2 <= std_logic_vector(signed(p_shl11_cast_fu_580_p1) - signed(A_0_load_6_cast24_fu_568_p1));
        mul_i_i_8_cast_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_8_fu_695_p3),10));

    mul_i_i_8_fu_695_p3 <= (reg_431 & ap_const_lv3_0);
    mul_i_i_s_fu_805_p3 <= (A_1_load_6_reg_1221 & ap_const_lv4_0);
    neg_mul_fu_1019_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(empty_14_fu_1016_p1));
    neg_ti_fu_1051_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(empty_15_fu_1044_p3));
    next_mul_fu_1004_p2 <= std_logic_vector(unsigned(phi_mul_reg_383) + unsigned(ap_const_lv10_34));
        p_shl10_cast_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl10_fu_711_p3),9));

    p_shl10_fu_711_p1 <= A_0_q0;
    p_shl10_fu_711_p3 <= (p_shl10_fu_711_p1 & ap_const_lv3_0);
        p_shl11_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl11_fu_572_p3),9));

    p_shl11_fu_572_p1 <= A_0_q1;
    p_shl11_fu_572_p3 <= (p_shl11_fu_572_p1 & ap_const_lv3_0);
        p_shl12_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl12_fu_534_p3),9));

    p_shl12_fu_534_p3 <= (reg_431 & ap_const_lv3_0);
        p_shl13_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl13_fu_546_p3),9));

    p_shl13_fu_546_p3 <= (reg_431 & ap_const_lv1_0);
        p_shl14_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl14_fu_522_p3),10));

    p_shl14_fu_522_p1 <= reg_427;
    p_shl14_fu_522_p3 <= (p_shl14_fu_522_p1 & ap_const_lv2_0);
        p_shl15_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl15_fu_464_p3),8));

    p_shl15_fu_464_p1 <= A_0_q1;
    p_shl15_fu_464_p3 <= (p_shl15_fu_464_p1 & ap_const_lv2_0);
        p_shl1_cast_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_844_p3),10));

    p_shl1_fu_844_p3 <= (A_1_q0 & ap_const_lv1_0);
        p_shl2_cast_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl2_fu_820_p3),10));

    p_shl2_fu_820_p1 <= A_1_q1;
    p_shl2_fu_820_p3 <= (p_shl2_fu_820_p1 & ap_const_lv4_0);
        p_shl3_cast_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl3_fu_783_p3),10));

    p_shl3_fu_783_p1 <= reg_439;
    p_shl3_fu_783_p3 <= (p_shl3_fu_783_p1 & ap_const_lv4_0);
        p_shl4_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl4_fu_747_p3),10));

    p_shl4_fu_747_p3 <= (A_1_load_4_reg_1195 & ap_const_lv4_0);
        p_shl5_cast_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl5_fu_758_p3),10));

    p_shl5_fu_758_p3 <= (A_1_load_4_reg_1195 & ap_const_lv1_0);
        p_shl6_cast_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl6_fu_594_p3),10));

    p_shl6_fu_594_p3 <= (reg_439 & ap_const_lv4_0);
        p_shl7_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_fu_606_p3),10));

    p_shl7_fu_606_p3 <= (reg_439 & ap_const_lv2_0);
        p_shl8_cast_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl8_fu_723_p3),11));

    p_shl8_fu_723_p3 <= (reg_435 & ap_const_lv3_0);
        p_shl9_cast_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_fu_735_p3),9));

    p_shl9_fu_735_p3 <= (reg_435 & ap_const_lv1_0);
        p_shl_cast_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_832_p3),11));

    p_shl_fu_832_p3 <= (A_1_q0 & ap_const_lv4_0);
        tmp10_cast_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1074_p3),11));

    tmp11_fu_975_p2 <= std_logic_vector(signed(tmp17_cast_fu_972_p1) + signed(tmp12_fu_966_p2));
    tmp12_fu_966_p2 <= std_logic_vector(signed(tmp15_cast_fu_963_p1) + signed(tmp13_cast_fu_960_p1));
        tmp13_cast_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1083_p3),12));

        tmp15_cast_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp15_reg_1273),12));

    tmp15_fu_907_p2 <= std_logic_vector(signed(tmp16_cast_fu_903_p1) + signed(mul_i_i_16_cast_fu_812_p1));
        tmp16_cast_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp16_fu_897_p2),11));

    tmp16_fu_897_p2 <= std_logic_vector(signed(p_shl2_cast_fu_828_p1) + signed(p_shl1_cast_fu_852_p1));
        tmp17_cast_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp17_reg_1278),12));

    tmp17_fu_942_p2 <= std_logic_vector(signed(tmp20_cast_fu_938_p1) + signed(tmp18_fu_916_p2));
    tmp18_fu_916_p2 <= std_logic_vector(signed(tmp19_cast_fu_913_p1) + signed(p_shl_cast_fu_840_p1));
        tmp19_cast_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp19_reg_1241),11));

        tmp1_cast_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1236),12));

    tmp1_fu_643_p2 <= std_logic_vector(signed(tmp4_cast_fu_639_p1) + signed(tmp2_cast_fu_624_p1));
        tmp20_cast_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp20_fu_932_p2),11));

    tmp20_fu_932_p2 <= std_logic_vector(signed(tmp21_cast_fu_928_p1) + signed(A_0_load_4_cast_fu_691_p1));
        tmp21_cast_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp21_fu_922_p2),7));

    tmp21_fu_922_p2 <= std_logic_vector(signed(A_0_load_8_cast30_fu_707_p1) + signed(A_1_load_7_cast31_fu_816_p1));
        tmp2_cast_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_reg_1170),11));

    tmp2_fu_508_p2 <= std_logic_vector(unsigned(tmp3_fu_502_p2) + unsigned(mul_i_i_2_cast_fu_456_p1));
    tmp3_fu_502_p2 <= std_logic_vector(signed(mul_i_i_3_cast_fu_482_p1) + signed(mul_i_i_4_cast_fu_494_p1));
        tmp4_cast_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_633_p2),11));

    tmp4_fu_633_p2 <= std_logic_vector(unsigned(tmp5_fu_627_p2) + unsigned(p_shl14_cast_fu_530_p1));
    tmp5_fu_627_p2 <= std_logic_vector(signed(mul_i_i_6_cast_fu_564_p1) + signed(mul_i_i_7_cast_fu_590_p1));
        tmp6_cast_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_reg_1263),12));

    tmp6_fu_885_p2 <= std_logic_vector(unsigned(tmp9_fu_879_p2) + unsigned(tmp7_cast_fu_872_p1));
        tmp7_cast_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_866_p2),11));

    tmp7_fu_866_p2 <= std_logic_vector(signed(tmp8_cast_fu_862_p1) + signed(mul_i_i_8_cast_fu_703_p1));
        tmp8_cast_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_fu_856_p2),10));

    tmp8_fu_856_p2 <= std_logic_vector(signed(p_shl10_cast_fu_719_p1) + signed(p_shl9_cast_fu_743_p1));
    tmp9_fu_879_p2 <= std_logic_vector(signed(tmp10_cast_fu_876_p1) + signed(p_shl8_cast_fu_731_p1));
    tmp_2_fu_1025_p4 <= neg_mul_fu_1019_p2(22 downto 17);
    tmp_3_fu_1035_p4 <= grp_fu_1092_p2(22 downto 17);
    tmp_fu_954_p2 <= std_logic_vector(signed(tmp6_cast_fu_951_p1) + signed(tmp1_cast_fu_948_p1));
    zext_ln21_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_13_reg_1250),64));
end behav;
