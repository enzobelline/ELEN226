// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_perfect_loop_perfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.894250,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=126,HLS_SYN_LUT=847,HLS_VERSION=2022_1}" *)

module loop_perfect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        A_0_address1,
        A_0_ce1,
        A_0_q1,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        A_1_address1,
        A_1_ce1,
        A_1_q1,
        B_0_address0,
        B_0_ce0,
        B_0_we0,
        B_0_d0,
        B_1_address0,
        B_1_ce0,
        B_1_we0,
        B_1_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_0_address0;
output   A_0_ce0;
input  [4:0] A_0_q0;
output  [3:0] A_0_address1;
output   A_0_ce1;
input  [4:0] A_0_q1;
output  [3:0] A_1_address0;
output   A_1_ce0;
input  [4:0] A_1_q0;
output  [3:0] A_1_address1;
output   A_1_ce1;
input  [4:0] A_1_q1;
output  [3:0] B_0_address0;
output   B_0_ce0;
output   B_0_we0;
output  [5:0] B_0_d0;
output  [3:0] B_1_address0;
output   B_1_ce0;
output   B_1_we0;
output  [5:0] B_1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] A_0_address0;
reg A_0_ce0;
reg[3:0] A_0_address1;
reg A_0_ce1;
reg[3:0] A_1_address0;
reg A_1_ce0;
reg[3:0] A_1_address1;
reg A_1_ce1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [4:0] reg_284;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
reg   [4:0] reg_288;
wire    ap_CS_fsm_state4;
reg  signed [4:0] A_0_load_reg_901;
reg  signed [4:0] A_0_load_2_reg_931;
wire   [8:0] tmp2_fu_418_p2;
reg   [8:0] tmp2_reg_987;
reg   [4:0] A_1_load_6_reg_1017;
wire   [10:0] tmp1_fu_554_p2;
reg   [10:0] tmp1_reg_1032;
wire  signed [10:0] grp_fu_852_p3;
reg  signed [10:0] tmp13_reg_1037;
wire   [10:0] tmp6_fu_696_p2;
reg   [10:0] tmp6_reg_1042;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp15_fu_712_p2;
reg   [10:0] tmp15_reg_1047;
wire   [10:0] tmp17_fu_747_p2;
reg   [10:0] tmp17_reg_1052;
wire    ap_CS_fsm_state7;
reg   [0:0] tmp_2_reg_1062;
wire   [5:0] empty_16_fu_845_p3;
reg   [5:0] empty_16_reg_1068;
wire    ap_CS_fsm_state10;
wire    grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start;
wire    grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done;
wire    grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_idle;
wire    grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_ready;
wire   [3:0] grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_address0;
wire    grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_ce0;
wire    grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_we0;
wire   [5:0] grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_d0;
wire   [3:0] grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_address0;
wire    grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_ce0;
wire    grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_we0;
wire   [5:0] grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_d0;
reg    grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [5:0] mul_i_i_2_fu_304_p3;
wire   [6:0] p_shl15_fu_319_p3;
wire  signed [7:0] p_shl15_cast_fu_326_p1;
wire  signed [7:0] A_0_load_2_cast22_fu_316_p1;
wire   [7:0] mul_i_i_3_fu_330_p2;
wire   [6:0] mul_i_i_4_fu_340_p3;
wire   [8:0] p_shl4_fu_352_p3;
wire   [5:0] p_shl5_fu_364_p3;
wire  signed [9:0] p_shl4_cast_fu_360_p1;
wire  signed [9:0] p_shl5_cast_fu_372_p1;
wire   [9:0] mul_i_i_14_fu_376_p2;
wire  signed [4:0] A_1_load_5_cast28_fu_386_p0;
wire  signed [4:0] p_shl3_fu_390_p1;
wire   [8:0] p_shl3_fu_390_p3;
wire  signed [9:0] p_shl3_cast_fu_398_p1;
wire  signed [9:0] A_1_load_5_cast28_fu_386_p1;
wire   [9:0] mul_i_i_15_fu_402_p2;
wire  signed [8:0] mul_i_i_3_cast_fu_336_p1;
wire  signed [8:0] mul_i_i_4_cast_fu_348_p1;
wire   [8:0] tmp3_fu_412_p2;
wire  signed [8:0] mul_i_i_2_cast_fu_312_p1;
wire  signed [10:0] mul_i_i_14_cast_fu_382_p1;
wire  signed [10:0] mul_i_i_15_cast_fu_408_p1;
wire  signed [4:0] p_shl14_fu_433_p1;
wire   [6:0] p_shl14_fu_433_p3;
wire   [7:0] p_shl12_fu_445_p3;
wire   [5:0] p_shl13_fu_457_p3;
wire  signed [8:0] p_shl12_cast_fu_453_p1;
wire  signed [8:0] p_shl13_cast_fu_465_p1;
wire   [8:0] mul_i_i_6_fu_469_p2;
wire  signed [4:0] A_0_load_6_cast24_fu_479_p0;
wire  signed [4:0] p_shl11_fu_483_p1;
wire   [7:0] p_shl11_fu_483_p3;
wire  signed [8:0] p_shl11_cast_fu_491_p1;
wire  signed [8:0] A_0_load_6_cast24_fu_479_p1;
wire   [8:0] mul_i_i_7_fu_495_p2;
wire   [8:0] p_shl6_fu_505_p3;
wire   [6:0] p_shl7_fu_517_p3;
wire  signed [9:0] p_shl6_cast_fu_513_p1;
wire  signed [9:0] p_shl7_cast_fu_525_p1;
wire  signed [9:0] mul_i_i_6_cast_fu_475_p1;
wire  signed [9:0] mul_i_i_7_cast_fu_501_p1;
wire   [9:0] tmp5_fu_538_p2;
wire  signed [9:0] p_shl14_cast_fu_441_p1;
wire   [9:0] tmp4_fu_544_p2;
wire  signed [10:0] tmp4_cast_fu_550_p1;
wire  signed [10:0] tmp2_cast_fu_535_p1;
wire  signed [4:0] A_0_load_4_cast_fu_560_p0;
wire   [7:0] mul_i_i_8_fu_564_p3;
wire  signed [4:0] A_0_load_8_cast30_fu_576_p0;
wire  signed [4:0] p_shl10_fu_580_p1;
wire   [7:0] p_shl10_fu_580_p3;
wire   [7:0] p_shl8_fu_592_p3;
wire   [5:0] p_shl9_fu_604_p3;
wire   [8:0] mul_i_i_s_fu_616_p3;
wire  signed [4:0] A_1_load_7_cast31_fu_627_p0;
wire  signed [4:0] p_shl2_fu_631_p1;
wire   [8:0] p_shl2_fu_631_p3;
wire   [8:0] p_shl_fu_643_p3;
wire   [5:0] p_shl1_fu_655_p3;
wire  signed [8:0] p_shl10_cast_fu_588_p1;
wire  signed [8:0] p_shl9_cast_fu_612_p1;
wire   [8:0] tmp8_fu_667_p2;
wire  signed [9:0] tmp8_cast_fu_673_p1;
wire  signed [9:0] mul_i_i_8_cast_fu_572_p1;
wire   [9:0] tmp7_fu_677_p2;
wire  signed [9:0] grp_fu_860_p3;
wire  signed [10:0] tmp10_cast_fu_687_p1;
wire  signed [10:0] p_shl8_cast_fu_600_p1;
wire   [10:0] tmp9_fu_690_p2;
wire  signed [10:0] tmp7_cast_fu_683_p1;
wire  signed [9:0] p_shl2_cast_fu_639_p1;
wire  signed [9:0] p_shl1_cast_fu_663_p1;
wire   [9:0] tmp16_fu_702_p2;
wire  signed [10:0] tmp16_cast_fu_708_p1;
wire  signed [10:0] mul_i_i_16_cast_fu_623_p1;
wire  signed [9:0] grp_fu_869_p3;
wire  signed [10:0] tmp19_cast_fu_718_p1;
wire  signed [10:0] p_shl_cast_fu_651_p1;
wire  signed [5:0] A_0_load_8_cast30_fu_576_p1;
wire  signed [5:0] A_1_load_7_cast31_fu_627_p1;
wire   [5:0] tmp21_fu_727_p2;
wire  signed [6:0] tmp21_cast_fu_733_p1;
wire  signed [6:0] A_0_load_4_cast_fu_560_p1;
wire   [6:0] tmp20_fu_737_p2;
wire  signed [10:0] tmp20_cast_fu_743_p1;
wire   [10:0] tmp18_fu_721_p2;
wire  signed [11:0] tmp6_cast_fu_756_p1;
wire  signed [11:0] tmp1_cast_fu_753_p1;
wire  signed [11:0] tmp15_cast_fu_768_p1;
wire  signed [11:0] tmp13_cast_fu_765_p1;
wire  signed [11:0] tmp17_cast_fu_777_p1;
wire   [11:0] tmp12_fu_771_p2;
wire   [11:0] tmp11_fu_780_p2;
wire   [11:0] tmp_fu_759_p2;
wire  signed [11:0] acc_V_1_fu_786_p2;
wire  signed [25:0] grp_fu_878_p2;
wire   [24:0] empty_fu_804_p1;
wire   [24:0] neg_mul_fu_807_p2;
wire   [5:0] tmp_3_fu_813_p4;
wire   [5:0] tmp_4_fu_823_p4;
wire   [5:0] empty_15_fu_832_p3;
wire   [5:0] neg_ti_fu_839_p2;
wire   [3:0] grp_fu_852_p1;
wire  signed [10:0] grp_fu_852_p2;
wire   [3:0] grp_fu_860_p1;
wire  signed [9:0] grp_fu_860_p2;
wire   [4:0] grp_fu_869_p1;
wire   [12:0] grp_fu_878_p1;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg = 1'b0;
end

loop_perfect_loop_perfect_Pipeline_LOOP_I grp_loop_perfect_Pipeline_LOOP_I_fu_275(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start),
    .ap_done(grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done),
    .ap_idle(grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_idle),
    .ap_ready(grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_ready),
    .B_0_address0(grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_address0),
    .B_0_ce0(grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_ce0),
    .B_0_we0(grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_we0),
    .B_0_d0(grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_d0),
    .B_1_address0(grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_address0),
    .B_1_ce0(grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_ce0),
    .B_1_we0(grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_we0),
    .B_1_d0(grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_d0),
    .empty(empty_16_reg_1068)
);

loop_perfect_mac_muladd_5s_4ns_11s_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
mac_muladd_5s_4ns_11s_11_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_1_q0),
    .din1(grp_fu_852_p1),
    .din2(grp_fu_852_p2),
    .ce(1'b1),
    .dout(grp_fu_852_p3)
);

loop_perfect_mac_muladd_5s_4ns_10s_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mac_muladd_5s_4ns_10s_10_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_284),
    .din1(grp_fu_860_p1),
    .din2(grp_fu_860_p2),
    .ce(1'b1),
    .dout(grp_fu_860_p3)
);

loop_perfect_mac_muladd_5s_5ns_5s_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
mac_muladd_5s_5ns_5s_10_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_1_q0),
    .din1(grp_fu_869_p1),
    .din2(A_0_load_reg_901),
    .ce(1'b1),
    .dout(grp_fu_869_p3)
);

loop_perfect_mul_mul_12s_13ns_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 26 ))
mul_mul_12s_13ns_26_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_V_1_fu_786_p2),
    .din1(grp_fu_878_p1),
    .ce(1'b1),
    .dout(grp_fu_878_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg <= 1'b1;
        end else if ((grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_ready == 1'b1)) begin
            grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_0_load_2_reg_931 <= A_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_0_load_reg_901 <= A_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_1_load_6_reg_1017 <= A_1_q0;
        tmp13_reg_1037 <= grp_fu_852_p3;
        tmp1_reg_1032 <= tmp1_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        empty_16_reg_1068 <= empty_16_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_284 <= A_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_288 <= A_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp15_reg_1047[10 : 1] <= tmp15_fu_712_p2[10 : 1];
        tmp17_reg_1052 <= tmp17_fu_747_p2;
        tmp6_reg_1042 <= tmp6_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp2_reg_987 <= tmp2_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_2_reg_1062 <= acc_V_1_fu_786_p2[32'd11];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_0_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_0_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_0_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_0_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_0_address0 = 64'd1;
    end else begin
        A_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_0_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_0_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_0_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_0_address1 = 64'd2;
    end else begin
        A_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        A_0_ce0 = 1'b1;
    end else begin
        A_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        A_0_ce1 = 1'b1;
    end else begin
        A_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_1_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_1_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_1_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_1_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_1_address0 = 64'd3;
    end else begin
        A_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_1_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_1_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_1_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_1_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_1_address1 = 64'd1;
    end else begin
        A_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        A_1_ce1 = 1'b1;
    end else begin
        A_1_ce1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_load_2_cast22_fu_316_p1 = A_0_load_2_reg_931;

assign A_0_load_4_cast_fu_560_p0 = reg_288;

assign A_0_load_4_cast_fu_560_p1 = A_0_load_4_cast_fu_560_p0;

assign A_0_load_6_cast24_fu_479_p0 = A_0_q1;

assign A_0_load_6_cast24_fu_479_p1 = A_0_load_6_cast24_fu_479_p0;

assign A_0_load_8_cast30_fu_576_p0 = A_0_q1;

assign A_0_load_8_cast30_fu_576_p1 = A_0_load_8_cast30_fu_576_p0;

assign A_1_load_5_cast28_fu_386_p0 = A_1_q0;

assign A_1_load_5_cast28_fu_386_p1 = A_1_load_5_cast28_fu_386_p0;

assign A_1_load_7_cast31_fu_627_p0 = A_1_q1;

assign A_1_load_7_cast31_fu_627_p1 = A_1_load_7_cast31_fu_627_p0;

assign B_0_address0 = grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_address0;

assign B_0_ce0 = grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_ce0;

assign B_0_d0 = grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_d0;

assign B_0_we0 = grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_we0;

assign B_1_address0 = grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_address0;

assign B_1_ce0 = grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_ce0;

assign B_1_d0 = grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_d0;

assign B_1_we0 = grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_we0;

assign acc_V_1_fu_786_p2 = (tmp11_fu_780_p2 + tmp_fu_759_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign empty_15_fu_832_p3 = ((tmp_2_reg_1062[0:0] == 1'b1) ? tmp_3_fu_813_p4 : tmp_4_fu_823_p4);

assign empty_16_fu_845_p3 = ((tmp_2_reg_1062[0:0] == 1'b1) ? neg_ti_fu_839_p2 : tmp_4_fu_823_p4);

assign empty_fu_804_p1 = grp_fu_878_p2[24:0];

assign grp_fu_852_p1 = 10'd13;

assign grp_fu_852_p2 = ($signed(mul_i_i_14_cast_fu_382_p1) + $signed(mul_i_i_15_cast_fu_408_p1));

assign grp_fu_860_p1 = 10'd11;

assign grp_fu_860_p2 = ($signed(p_shl6_cast_fu_513_p1) - $signed(p_shl7_cast_fu_525_p1));

assign grp_fu_869_p1 = 10'd19;

assign grp_fu_878_p1 = 26'd6554;

assign grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start = grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg;

assign mul_i_i_14_cast_fu_382_p1 = $signed(mul_i_i_14_fu_376_p2);

assign mul_i_i_14_fu_376_p2 = ($signed(p_shl4_cast_fu_360_p1) - $signed(p_shl5_cast_fu_372_p1));

assign mul_i_i_15_cast_fu_408_p1 = $signed(mul_i_i_15_fu_402_p2);

assign mul_i_i_15_fu_402_p2 = ($signed(p_shl3_cast_fu_398_p1) - $signed(A_1_load_5_cast28_fu_386_p1));

assign mul_i_i_16_cast_fu_623_p1 = $signed(mul_i_i_s_fu_616_p3);

assign mul_i_i_2_cast_fu_312_p1 = $signed(mul_i_i_2_fu_304_p3);

assign mul_i_i_2_fu_304_p3 = {{reg_288}, {1'd0}};

assign mul_i_i_3_cast_fu_336_p1 = $signed(mul_i_i_3_fu_330_p2);

assign mul_i_i_3_fu_330_p2 = ($signed(p_shl15_cast_fu_326_p1) - $signed(A_0_load_2_cast22_fu_316_p1));

assign mul_i_i_4_cast_fu_348_p1 = $signed(mul_i_i_4_fu_340_p3);

assign mul_i_i_4_fu_340_p3 = {{A_0_q0}, {2'd0}};

assign mul_i_i_6_cast_fu_475_p1 = $signed(mul_i_i_6_fu_469_p2);

assign mul_i_i_6_fu_469_p2 = ($signed(p_shl12_cast_fu_453_p1) - $signed(p_shl13_cast_fu_465_p1));

assign mul_i_i_7_cast_fu_501_p1 = $signed(mul_i_i_7_fu_495_p2);

assign mul_i_i_7_fu_495_p2 = ($signed(p_shl11_cast_fu_491_p1) - $signed(A_0_load_6_cast24_fu_479_p1));

assign mul_i_i_8_cast_fu_572_p1 = $signed(mul_i_i_8_fu_564_p3);

assign mul_i_i_8_fu_564_p3 = {{A_0_q0}, {3'd0}};

assign mul_i_i_s_fu_616_p3 = {{A_1_load_6_reg_1017}, {4'd0}};

assign neg_mul_fu_807_p2 = (25'd0 - empty_fu_804_p1);

assign neg_ti_fu_839_p2 = (6'd0 - empty_15_fu_832_p3);

assign p_shl10_cast_fu_588_p1 = $signed(p_shl10_fu_580_p3);

assign p_shl10_fu_580_p1 = A_0_q1;

assign p_shl10_fu_580_p3 = {{p_shl10_fu_580_p1}, {3'd0}};

assign p_shl11_cast_fu_491_p1 = $signed(p_shl11_fu_483_p3);

assign p_shl11_fu_483_p1 = A_0_q1;

assign p_shl11_fu_483_p3 = {{p_shl11_fu_483_p1}, {3'd0}};

assign p_shl12_cast_fu_453_p1 = $signed(p_shl12_fu_445_p3);

assign p_shl12_fu_445_p3 = {{A_0_q0}, {3'd0}};

assign p_shl13_cast_fu_465_p1 = $signed(p_shl13_fu_457_p3);

assign p_shl13_fu_457_p3 = {{A_0_q0}, {1'd0}};

assign p_shl14_cast_fu_441_p1 = $signed(p_shl14_fu_433_p3);

assign p_shl14_fu_433_p1 = reg_288;

assign p_shl14_fu_433_p3 = {{p_shl14_fu_433_p1}, {2'd0}};

assign p_shl15_cast_fu_326_p1 = $signed(p_shl15_fu_319_p3);

assign p_shl15_fu_319_p3 = {{A_0_load_2_reg_931}, {2'd0}};

assign p_shl1_cast_fu_663_p1 = $signed(p_shl1_fu_655_p3);

assign p_shl1_fu_655_p3 = {{A_1_q0}, {1'd0}};

assign p_shl2_cast_fu_639_p1 = $signed(p_shl2_fu_631_p3);

assign p_shl2_fu_631_p1 = A_1_q1;

assign p_shl2_fu_631_p3 = {{p_shl2_fu_631_p1}, {4'd0}};

assign p_shl3_cast_fu_398_p1 = $signed(p_shl3_fu_390_p3);

assign p_shl3_fu_390_p1 = A_1_q0;

assign p_shl3_fu_390_p3 = {{p_shl3_fu_390_p1}, {4'd0}};

assign p_shl4_cast_fu_360_p1 = $signed(p_shl4_fu_352_p3);

assign p_shl4_fu_352_p3 = {{A_1_q1}, {4'd0}};

assign p_shl5_cast_fu_372_p1 = $signed(p_shl5_fu_364_p3);

assign p_shl5_fu_364_p3 = {{A_1_q1}, {1'd0}};

assign p_shl6_cast_fu_513_p1 = $signed(p_shl6_fu_505_p3);

assign p_shl6_fu_505_p3 = {{reg_284}, {4'd0}};

assign p_shl7_cast_fu_525_p1 = $signed(p_shl7_fu_517_p3);

assign p_shl7_fu_517_p3 = {{reg_284}, {2'd0}};

assign p_shl8_cast_fu_600_p1 = $signed(p_shl8_fu_592_p3);

assign p_shl8_fu_592_p3 = {{reg_284}, {3'd0}};

assign p_shl9_cast_fu_612_p1 = $signed(p_shl9_fu_604_p3);

assign p_shl9_fu_604_p3 = {{reg_284}, {1'd0}};

assign p_shl_cast_fu_651_p1 = $signed(p_shl_fu_643_p3);

assign p_shl_fu_643_p3 = {{A_1_q0}, {4'd0}};

assign tmp10_cast_fu_687_p1 = grp_fu_860_p3;

assign tmp11_fu_780_p2 = ($signed(tmp17_cast_fu_777_p1) + $signed(tmp12_fu_771_p2));

assign tmp12_fu_771_p2 = ($signed(tmp15_cast_fu_768_p1) + $signed(tmp13_cast_fu_765_p1));

assign tmp13_cast_fu_765_p1 = tmp13_reg_1037;

assign tmp15_cast_fu_768_p1 = $signed(tmp15_reg_1047);

assign tmp15_fu_712_p2 = ($signed(tmp16_cast_fu_708_p1) + $signed(mul_i_i_16_cast_fu_623_p1));

assign tmp16_cast_fu_708_p1 = $signed(tmp16_fu_702_p2);

assign tmp16_fu_702_p2 = ($signed(p_shl2_cast_fu_639_p1) + $signed(p_shl1_cast_fu_663_p1));

assign tmp17_cast_fu_777_p1 = $signed(tmp17_reg_1052);

assign tmp17_fu_747_p2 = ($signed(tmp20_cast_fu_743_p1) + $signed(tmp18_fu_721_p2));

assign tmp18_fu_721_p2 = ($signed(tmp19_cast_fu_718_p1) + $signed(p_shl_cast_fu_651_p1));

assign tmp19_cast_fu_718_p1 = grp_fu_869_p3;

assign tmp1_cast_fu_753_p1 = $signed(tmp1_reg_1032);

assign tmp1_fu_554_p2 = ($signed(tmp4_cast_fu_550_p1) + $signed(tmp2_cast_fu_535_p1));

assign tmp20_cast_fu_743_p1 = $signed(tmp20_fu_737_p2);

assign tmp20_fu_737_p2 = ($signed(tmp21_cast_fu_733_p1) + $signed(A_0_load_4_cast_fu_560_p1));

assign tmp21_cast_fu_733_p1 = $signed(tmp21_fu_727_p2);

assign tmp21_fu_727_p2 = ($signed(A_0_load_8_cast30_fu_576_p1) + $signed(A_1_load_7_cast31_fu_627_p1));

assign tmp2_cast_fu_535_p1 = $signed(tmp2_reg_987);

assign tmp2_fu_418_p2 = ($signed(tmp3_fu_412_p2) + $signed(mul_i_i_2_cast_fu_312_p1));

assign tmp3_fu_412_p2 = ($signed(mul_i_i_3_cast_fu_336_p1) + $signed(mul_i_i_4_cast_fu_348_p1));

assign tmp4_cast_fu_550_p1 = $signed(tmp4_fu_544_p2);

assign tmp4_fu_544_p2 = ($signed(tmp5_fu_538_p2) + $signed(p_shl14_cast_fu_441_p1));

assign tmp5_fu_538_p2 = ($signed(mul_i_i_6_cast_fu_475_p1) + $signed(mul_i_i_7_cast_fu_501_p1));

assign tmp6_cast_fu_756_p1 = $signed(tmp6_reg_1042);

assign tmp6_fu_696_p2 = ($signed(tmp9_fu_690_p2) + $signed(tmp7_cast_fu_683_p1));

assign tmp7_cast_fu_683_p1 = $signed(tmp7_fu_677_p2);

assign tmp7_fu_677_p2 = ($signed(tmp8_cast_fu_673_p1) + $signed(mul_i_i_8_cast_fu_572_p1));

assign tmp8_cast_fu_673_p1 = $signed(tmp8_fu_667_p2);

assign tmp8_fu_667_p2 = ($signed(p_shl10_cast_fu_588_p1) + $signed(p_shl9_cast_fu_612_p1));

assign tmp9_fu_690_p2 = ($signed(tmp10_cast_fu_687_p1) + $signed(p_shl8_cast_fu_600_p1));

assign tmp_3_fu_813_p4 = {{neg_mul_fu_807_p2[22:17]}};

assign tmp_4_fu_823_p4 = {{grp_fu_878_p2[22:17]}};

assign tmp_fu_759_p2 = ($signed(tmp6_cast_fu_756_p1) + $signed(tmp1_cast_fu_753_p1));

always @ (posedge ap_clk) begin
    tmp15_reg_1047[0] <= 1'b0;
end

endmodule //loop_perfect
