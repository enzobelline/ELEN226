-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_perfect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_0_ce1 : OUT STD_LOGIC;
    A_0_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_1_ce1 : OUT STD_LOGIC;
    A_1_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_we0 : OUT STD_LOGIC;
    B_0_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_we0 : OUT STD_LOGIC;
    B_1_d0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of loop_perfect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_perfect_loop_perfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.894250,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=126,HLS_SYN_LUT=847,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv10_13 : STD_LOGIC_VECTOR (9 downto 0) := "0000010011";
    constant ap_const_lv26_199A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001100110011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_284 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_288 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal A_0_load_reg_901 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_0_load_2_reg_931 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_fu_418_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_reg_987 : STD_LOGIC_VECTOR (8 downto 0);
    signal A_1_load_6_reg_1017 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_554_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_reg_1032 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_852_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp13_reg_1037 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_fu_696_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_reg_1042 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp15_fu_712_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp15_reg_1047 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp17_fu_747_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp17_reg_1052 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_2_reg_1062 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_16_fu_845_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_16_reg_1068 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start : STD_LOGIC;
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done : STD_LOGIC;
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_idle : STD_LOGIC;
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_ready : STD_LOGIC;
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_ce0 : STD_LOGIC;
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_we0 : STD_LOGIC;
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_ce0 : STD_LOGIC;
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_we0 : STD_LOGIC;
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal mul_i_i_2_fu_304_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl15_fu_319_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl15_cast_fu_326_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_0_load_2_cast22_fu_316_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_i_i_3_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_i_i_4_fu_340_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_fu_352_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_fu_364_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_360_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_372_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_14_fu_376_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_1_load_5_cast28_fu_386_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_fu_390_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_fu_390_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_398_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_1_load_5_cast28_fu_386_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_15_fu_402_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_3_cast_fu_336_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_i_i_4_cast_fu_348_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_412_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_i_i_2_cast_fu_312_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_i_i_14_cast_fu_382_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_i_i_15_cast_fu_408_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl14_fu_433_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl14_fu_433_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl12_fu_445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl13_fu_457_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl12_cast_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl13_cast_fu_465_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_i_i_6_fu_469_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal A_0_load_6_cast24_fu_479_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl11_fu_483_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl11_fu_483_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl11_cast_fu_491_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal A_0_load_6_cast24_fu_479_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_i_i_7_fu_495_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_fu_505_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_fu_517_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_cast_fu_513_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl7_cast_fu_525_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_6_cast_fu_475_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_7_cast_fu_501_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_fu_538_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl14_cast_fu_441_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp4_fu_544_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp4_cast_fu_550_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_cast_fu_535_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal A_0_load_4_cast_fu_560_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_i_i_8_fu_564_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_0_load_8_cast30_fu_576_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl10_fu_580_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl10_fu_580_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_fu_592_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_fu_604_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_i_i_s_fu_616_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal A_1_load_7_cast31_fu_627_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_631_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_631_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_643_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_fu_655_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl10_cast_fu_588_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_cast_fu_612_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_fu_667_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_cast_fu_673_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_i_i_8_cast_fu_572_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp7_fu_677_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_860_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_cast_fu_687_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_cast_fu_600_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp9_fu_690_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_cast_fu_683_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_639_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_663_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp16_fu_702_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp16_cast_fu_708_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_i_i_16_cast_fu_623_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_869_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp19_cast_fu_718_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_651_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal A_0_load_8_cast30_fu_576_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal A_1_load_7_cast31_fu_627_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp21_fu_727_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp21_cast_fu_733_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal A_0_load_4_cast_fu_560_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp20_fu_737_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp20_cast_fu_743_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp18_fu_721_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_cast_fu_756_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_cast_fu_753_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp15_cast_fu_768_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp13_cast_fu_765_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp17_cast_fu_777_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp12_fu_771_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp11_fu_780_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_759_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_V_1_fu_786_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_878_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal empty_fu_804_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal neg_mul_fu_807_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_fu_813_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_823_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_15_fu_832_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal neg_ti_fu_839_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_852_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_852_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_860_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_860_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_869_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_878_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component loop_perfect_loop_perfect_Pipeline_LOOP_I IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_we0 : OUT STD_LOGIC;
        B_0_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        B_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_1_ce0 : OUT STD_LOGIC;
        B_1_we0 : OUT STD_LOGIC;
        B_1_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        empty : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component loop_perfect_mac_muladd_5s_4ns_11s_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component loop_perfect_mac_muladd_5s_4ns_10s_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component loop_perfect_mac_muladd_5s_5ns_5s_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component loop_perfect_mul_mul_12s_13ns_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    grp_loop_perfect_Pipeline_LOOP_I_fu_275 : component loop_perfect_loop_perfect_Pipeline_LOOP_I
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start,
        ap_done => grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done,
        ap_idle => grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_idle,
        ap_ready => grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_ready,
        B_0_address0 => grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_address0,
        B_0_ce0 => grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_ce0,
        B_0_we0 => grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_we0,
        B_0_d0 => grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_d0,
        B_1_address0 => grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_address0,
        B_1_ce0 => grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_ce0,
        B_1_we0 => grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_we0,
        B_1_d0 => grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_d0,
        empty => empty_16_reg_1068);

    mac_muladd_5s_4ns_11s_11_4_1_U4 : component loop_perfect_mac_muladd_5s_4ns_11s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_1_q0,
        din1 => grp_fu_852_p1,
        din2 => grp_fu_852_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_852_p3);

    mac_muladd_5s_4ns_10s_10_4_1_U5 : component loop_perfect_mac_muladd_5s_4ns_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_284,
        din1 => grp_fu_860_p1,
        din2 => grp_fu_860_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_860_p3);

    mac_muladd_5s_5ns_5s_10_4_1_U6 : component loop_perfect_mac_muladd_5s_5ns_5s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_1_q0,
        din1 => grp_fu_869_p1,
        din2 => A_0_load_reg_901,
        ce => ap_const_logic_1,
        dout => grp_fu_869_p3);

    mul_mul_12s_13ns_26_4_1_U7 : component loop_perfect_mul_mul_12s_13ns_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_V_1_fu_786_p2,
        din1 => grp_fu_878_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_878_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_ready = ap_const_logic_1)) then 
                    grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                A_0_load_2_reg_931 <= A_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                A_0_load_reg_901 <= A_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                A_1_load_6_reg_1017 <= A_1_q0;
                tmp13_reg_1037 <= grp_fu_852_p3;
                tmp1_reg_1032 <= tmp1_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                empty_16_reg_1068 <= empty_16_fu_845_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_284 <= A_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_288 <= A_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp15_reg_1047(10 downto 1) <= tmp15_fu_712_p2(10 downto 1);
                tmp17_reg_1052 <= tmp17_fu_747_p2;
                tmp6_reg_1042 <= tmp6_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp2_reg_987 <= tmp2_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_2_reg_1062 <= acc_V_1_fu_786_p2(11 downto 11);
            end if;
        end if;
    end process;
    tmp15_reg_1047(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;

    A_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_0_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_0_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_0_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_0_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_0_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            A_0_address0 <= "XXXX";
        end if; 
    end process;


    A_0_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_0_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_0_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_0_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_0_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        else 
            A_0_address1 <= "XXXX";
        end if; 
    end process;


    A_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_0_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            A_0_ce1 <= ap_const_logic_1;
        else 
            A_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        A_0_load_2_cast22_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_0_load_2_reg_931),8));

    A_0_load_4_cast_fu_560_p0 <= reg_288;
        A_0_load_4_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_0_load_4_cast_fu_560_p0),7));

    A_0_load_6_cast24_fu_479_p0 <= A_0_q1;
        A_0_load_6_cast24_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_0_load_6_cast24_fu_479_p0),9));

    A_0_load_8_cast30_fu_576_p0 <= A_0_q1;
        A_0_load_8_cast30_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_0_load_8_cast30_fu_576_p0),6));


    A_1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_1_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_1_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_1_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_1_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_1_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        else 
            A_1_address0 <= "XXXX";
        end if; 
    end process;


    A_1_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_1_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_1_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_1_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_1_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_1_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            A_1_address1 <= "XXXX";
        end if; 
    end process;


    A_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            A_1_ce1 <= ap_const_logic_1;
        else 
            A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_load_5_cast28_fu_386_p0 <= A_1_q0;
        A_1_load_5_cast28_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_1_load_5_cast28_fu_386_p0),10));

    A_1_load_7_cast31_fu_627_p0 <= A_1_q1;
        A_1_load_7_cast31_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_1_load_7_cast31_fu_627_p0),6));

    B_0_address0 <= grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_address0;
    B_0_ce0 <= grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_ce0;
    B_0_d0 <= grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_d0;
    B_0_we0 <= grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_0_we0;
    B_1_address0 <= grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_address0;
    B_1_ce0 <= grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_ce0;
    B_1_d0 <= grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_d0;
    B_1_we0 <= grp_loop_perfect_Pipeline_LOOP_I_fu_275_B_1_we0;
    acc_V_1_fu_786_p2 <= std_logic_vector(unsigned(tmp11_fu_780_p2) + unsigned(tmp_fu_759_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done)
    begin
        if ((grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_15_fu_832_p3 <= 
        tmp_3_fu_813_p4 when (tmp_2_reg_1062(0) = '1') else 
        tmp_4_fu_823_p4;
    empty_16_fu_845_p3 <= 
        neg_ti_fu_839_p2 when (tmp_2_reg_1062(0) = '1') else 
        tmp_4_fu_823_p4;
    empty_fu_804_p1 <= grp_fu_878_p2(25 - 1 downto 0);
    grp_fu_852_p1 <= ap_const_lv10_D(4 - 1 downto 0);
    grp_fu_852_p2 <= std_logic_vector(signed(mul_i_i_14_cast_fu_382_p1) + signed(mul_i_i_15_cast_fu_408_p1));
    grp_fu_860_p1 <= ap_const_lv10_B(4 - 1 downto 0);
    grp_fu_860_p2 <= std_logic_vector(signed(p_shl6_cast_fu_513_p1) - signed(p_shl7_cast_fu_525_p1));
    grp_fu_869_p1 <= ap_const_lv10_13(5 - 1 downto 0);
    grp_fu_878_p1 <= ap_const_lv26_199A(13 - 1 downto 0);
    grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start <= grp_loop_perfect_Pipeline_LOOP_I_fu_275_ap_start_reg;
        mul_i_i_14_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_14_fu_376_p2),11));

    mul_i_i_14_fu_376_p2 <= std_logic_vector(signed(p_shl4_cast_fu_360_p1) - signed(p_shl5_cast_fu_372_p1));
        mul_i_i_15_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_15_fu_402_p2),11));

    mul_i_i_15_fu_402_p2 <= std_logic_vector(signed(p_shl3_cast_fu_398_p1) - signed(A_1_load_5_cast28_fu_386_p1));
        mul_i_i_16_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_s_fu_616_p3),11));

        mul_i_i_2_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_2_fu_304_p3),9));

    mul_i_i_2_fu_304_p3 <= (reg_288 & ap_const_lv1_0);
        mul_i_i_3_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_3_fu_330_p2),9));

    mul_i_i_3_fu_330_p2 <= std_logic_vector(signed(p_shl15_cast_fu_326_p1) - signed(A_0_load_2_cast22_fu_316_p1));
        mul_i_i_4_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_4_fu_340_p3),9));

    mul_i_i_4_fu_340_p3 <= (A_0_q0 & ap_const_lv2_0);
        mul_i_i_6_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_6_fu_469_p2),10));

    mul_i_i_6_fu_469_p2 <= std_logic_vector(signed(p_shl12_cast_fu_453_p1) - signed(p_shl13_cast_fu_465_p1));
        mul_i_i_7_cast_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_7_fu_495_p2),10));

    mul_i_i_7_fu_495_p2 <= std_logic_vector(signed(p_shl11_cast_fu_491_p1) - signed(A_0_load_6_cast24_fu_479_p1));
        mul_i_i_8_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_i_i_8_fu_564_p3),10));

    mul_i_i_8_fu_564_p3 <= (A_0_q0 & ap_const_lv3_0);
    mul_i_i_s_fu_616_p3 <= (A_1_load_6_reg_1017 & ap_const_lv4_0);
    neg_mul_fu_807_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(empty_fu_804_p1));
    neg_ti_fu_839_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(empty_15_fu_832_p3));
        p_shl10_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl10_fu_580_p3),9));

    p_shl10_fu_580_p1 <= A_0_q1;
    p_shl10_fu_580_p3 <= (p_shl10_fu_580_p1 & ap_const_lv3_0);
        p_shl11_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl11_fu_483_p3),9));

    p_shl11_fu_483_p1 <= A_0_q1;
    p_shl11_fu_483_p3 <= (p_shl11_fu_483_p1 & ap_const_lv3_0);
        p_shl12_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl12_fu_445_p3),9));

    p_shl12_fu_445_p3 <= (A_0_q0 & ap_const_lv3_0);
        p_shl13_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl13_fu_457_p3),9));

    p_shl13_fu_457_p3 <= (A_0_q0 & ap_const_lv1_0);
        p_shl14_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl14_fu_433_p3),10));

    p_shl14_fu_433_p1 <= reg_288;
    p_shl14_fu_433_p3 <= (p_shl14_fu_433_p1 & ap_const_lv2_0);
        p_shl15_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl15_fu_319_p3),8));

    p_shl15_fu_319_p3 <= (A_0_load_2_reg_931 & ap_const_lv2_0);
        p_shl1_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_655_p3),10));

    p_shl1_fu_655_p3 <= (A_1_q0 & ap_const_lv1_0);
        p_shl2_cast_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl2_fu_631_p3),10));

    p_shl2_fu_631_p1 <= A_1_q1;
    p_shl2_fu_631_p3 <= (p_shl2_fu_631_p1 & ap_const_lv4_0);
        p_shl3_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl3_fu_390_p3),10));

    p_shl3_fu_390_p1 <= A_1_q0;
    p_shl3_fu_390_p3 <= (p_shl3_fu_390_p1 & ap_const_lv4_0);
        p_shl4_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl4_fu_352_p3),10));

    p_shl4_fu_352_p3 <= (A_1_q1 & ap_const_lv4_0);
        p_shl5_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl5_fu_364_p3),10));

    p_shl5_fu_364_p3 <= (A_1_q1 & ap_const_lv1_0);
        p_shl6_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl6_fu_505_p3),10));

    p_shl6_fu_505_p3 <= (reg_284 & ap_const_lv4_0);
        p_shl7_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_fu_517_p3),10));

    p_shl7_fu_517_p3 <= (reg_284 & ap_const_lv2_0);
        p_shl8_cast_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl8_fu_592_p3),11));

    p_shl8_fu_592_p3 <= (reg_284 & ap_const_lv3_0);
        p_shl9_cast_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_fu_604_p3),9));

    p_shl9_fu_604_p3 <= (reg_284 & ap_const_lv1_0);
        p_shl_cast_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_643_p3),11));

    p_shl_fu_643_p3 <= (A_1_q0 & ap_const_lv4_0);
        tmp10_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_860_p3),11));

    tmp11_fu_780_p2 <= std_logic_vector(signed(tmp17_cast_fu_777_p1) + signed(tmp12_fu_771_p2));
    tmp12_fu_771_p2 <= std_logic_vector(signed(tmp15_cast_fu_768_p1) + signed(tmp13_cast_fu_765_p1));
        tmp13_cast_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp13_reg_1037),12));

        tmp15_cast_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp15_reg_1047),12));

    tmp15_fu_712_p2 <= std_logic_vector(signed(tmp16_cast_fu_708_p1) + signed(mul_i_i_16_cast_fu_623_p1));
        tmp16_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp16_fu_702_p2),11));

    tmp16_fu_702_p2 <= std_logic_vector(signed(p_shl2_cast_fu_639_p1) + signed(p_shl1_cast_fu_663_p1));
        tmp17_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp17_reg_1052),12));

    tmp17_fu_747_p2 <= std_logic_vector(signed(tmp20_cast_fu_743_p1) + signed(tmp18_fu_721_p2));
    tmp18_fu_721_p2 <= std_logic_vector(signed(tmp19_cast_fu_718_p1) + signed(p_shl_cast_fu_651_p1));
        tmp19_cast_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_869_p3),11));

        tmp1_cast_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1032),12));

    tmp1_fu_554_p2 <= std_logic_vector(signed(tmp4_cast_fu_550_p1) + signed(tmp2_cast_fu_535_p1));
        tmp20_cast_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp20_fu_737_p2),11));

    tmp20_fu_737_p2 <= std_logic_vector(signed(tmp21_cast_fu_733_p1) + signed(A_0_load_4_cast_fu_560_p1));
        tmp21_cast_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp21_fu_727_p2),7));

    tmp21_fu_727_p2 <= std_logic_vector(signed(A_0_load_8_cast30_fu_576_p1) + signed(A_1_load_7_cast31_fu_627_p1));
        tmp2_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_reg_987),11));

    tmp2_fu_418_p2 <= std_logic_vector(unsigned(tmp3_fu_412_p2) + unsigned(mul_i_i_2_cast_fu_312_p1));
    tmp3_fu_412_p2 <= std_logic_vector(signed(mul_i_i_3_cast_fu_336_p1) + signed(mul_i_i_4_cast_fu_348_p1));
        tmp4_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_544_p2),11));

    tmp4_fu_544_p2 <= std_logic_vector(unsigned(tmp5_fu_538_p2) + unsigned(p_shl14_cast_fu_441_p1));
    tmp5_fu_538_p2 <= std_logic_vector(signed(mul_i_i_6_cast_fu_475_p1) + signed(mul_i_i_7_cast_fu_501_p1));
        tmp6_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_reg_1042),12));

    tmp6_fu_696_p2 <= std_logic_vector(unsigned(tmp9_fu_690_p2) + unsigned(tmp7_cast_fu_683_p1));
        tmp7_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_677_p2),11));

    tmp7_fu_677_p2 <= std_logic_vector(signed(tmp8_cast_fu_673_p1) + signed(mul_i_i_8_cast_fu_572_p1));
        tmp8_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_fu_667_p2),10));

    tmp8_fu_667_p2 <= std_logic_vector(signed(p_shl10_cast_fu_588_p1) + signed(p_shl9_cast_fu_612_p1));
    tmp9_fu_690_p2 <= std_logic_vector(signed(tmp10_cast_fu_687_p1) + signed(p_shl8_cast_fu_600_p1));
    tmp_3_fu_813_p4 <= neg_mul_fu_807_p2(22 downto 17);
    tmp_4_fu_823_p4 <= grp_fu_878_p2(22 downto 17);
    tmp_fu_759_p2 <= std_logic_vector(signed(tmp6_cast_fu_756_p1) + signed(tmp1_cast_fu_753_p1));
end behav;
