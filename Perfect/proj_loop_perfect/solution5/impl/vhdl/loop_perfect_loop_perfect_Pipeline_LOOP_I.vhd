-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_perfect_loop_perfect_Pipeline_LOOP_I is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    B_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_we0 : OUT STD_LOGIC;
    B_0_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_we0 : OUT STD_LOGIC;
    B_1_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    empty : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of loop_perfect_loop_perfect_Pipeline_LOOP_I is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_34 : STD_LOGIC_VECTOR (10 downto 0) := "00000110100";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln23_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln21_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_11_fu_144_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_182_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_0_addr_1_gep_fu_94_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_1_addr_1_gep_fu_103_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_fu_52 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_fu_148_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_phi_mul_load : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_56 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_135_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln23_fu_125_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_12_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_fu_160_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_14_fu_166_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_170 : BOOLEAN;
    signal ap_condition_174 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component loop_perfect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component loop_perfect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((icmp_ln23_fu_129_p2 = ap_const_lv1_0)) then 
                    i_fu_56 <= add_ln23_fu_135_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_56 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((icmp_ln23_fu_129_p2 = ap_const_lv1_0)) then 
                    phi_mul_fu_52 <= next_mul_fu_148_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul_fu_52 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_0_addr_1_gep_fu_94_p3 <= zext_ln21_fu_174_p1(4 - 1 downto 0);

    B_0_address0_assign_proc : process(zext_ln21_fu_174_p1, empty_11_fu_144_p1, B_0_addr_1_gep_fu_94_p3, ap_condition_170)
    begin
        if ((ap_const_boolean_1 = ap_condition_170)) then
            if ((empty_11_fu_144_p1 = ap_const_lv1_1)) then 
                B_0_address0 <= B_0_addr_1_gep_fu_94_p3;
            elsif ((empty_11_fu_144_p1 = ap_const_lv1_0)) then 
                B_0_address0 <= zext_ln21_fu_174_p1(4 - 1 downto 0);
            else 
                B_0_address0 <= "XXXX";
            end if;
        else 
            B_0_address0 <= "XXXX";
        end if; 
    end process;


    B_0_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_129_p2, empty_11_fu_144_p1, tmp_1_fu_182_p3, ap_start_int)
    begin
        if ((((tmp_1_fu_182_p3 = ap_const_lv1_0) and (empty_11_fu_144_p1 = ap_const_lv1_1) and (icmp_ln23_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)) or ((tmp_1_fu_182_p3 = ap_const_lv1_0) and (empty_11_fu_144_p1 = ap_const_lv1_0) and (icmp_ln23_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_0_d0_assign_proc : process(empty, empty_11_fu_144_p1, ap_condition_170)
    begin
        if ((ap_const_boolean_1 = ap_condition_170)) then
            if ((empty_11_fu_144_p1 = ap_const_lv1_1)) then 
                B_0_d0 <= ap_const_lv6_0;
            elsif ((empty_11_fu_144_p1 = ap_const_lv1_0)) then 
                B_0_d0 <= empty;
            else 
                B_0_d0 <= "XXXXXX";
            end if;
        else 
            B_0_d0 <= "XXXXXX";
        end if; 
    end process;


    B_0_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_129_p2, empty_11_fu_144_p1, tmp_1_fu_182_p3, ap_start_int)
    begin
        if ((((tmp_1_fu_182_p3 = ap_const_lv1_0) and (empty_11_fu_144_p1 = ap_const_lv1_1) and (icmp_ln23_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)) or ((tmp_1_fu_182_p3 = ap_const_lv1_0) and (empty_11_fu_144_p1 = ap_const_lv1_0) and (icmp_ln23_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            B_0_we0 <= ap_const_logic_1;
        else 
            B_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    B_1_addr_1_gep_fu_103_p3 <= zext_ln21_fu_174_p1(4 - 1 downto 0);

    B_1_address0_assign_proc : process(zext_ln21_fu_174_p1, empty_11_fu_144_p1, B_1_addr_1_gep_fu_103_p3, ap_condition_174)
    begin
        if ((ap_const_boolean_1 = ap_condition_174)) then
            if ((empty_11_fu_144_p1 = ap_const_lv1_1)) then 
                B_1_address0 <= B_1_addr_1_gep_fu_103_p3;
            elsif ((empty_11_fu_144_p1 = ap_const_lv1_0)) then 
                B_1_address0 <= zext_ln21_fu_174_p1(4 - 1 downto 0);
            else 
                B_1_address0 <= "XXXX";
            end if;
        else 
            B_1_address0 <= "XXXX";
        end if; 
    end process;


    B_1_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_129_p2, empty_11_fu_144_p1, tmp_1_fu_182_p3, ap_start_int)
    begin
        if ((((tmp_1_fu_182_p3 = ap_const_lv1_1) and (empty_11_fu_144_p1 = ap_const_lv1_1) and (icmp_ln23_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)) or ((tmp_1_fu_182_p3 = ap_const_lv1_1) and (empty_11_fu_144_p1 = ap_const_lv1_0) and (icmp_ln23_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_d0_assign_proc : process(empty, empty_11_fu_144_p1, ap_condition_174)
    begin
        if ((ap_const_boolean_1 = ap_condition_174)) then
            if ((empty_11_fu_144_p1 = ap_const_lv1_1)) then 
                B_1_d0 <= ap_const_lv6_0;
            elsif ((empty_11_fu_144_p1 = ap_const_lv1_0)) then 
                B_1_d0 <= empty;
            else 
                B_1_d0 <= "XXXXXX";
            end if;
        else 
            B_1_d0 <= "XXXXXX";
        end if; 
    end process;


    B_1_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_129_p2, empty_11_fu_144_p1, tmp_1_fu_182_p3, ap_start_int)
    begin
        if ((((tmp_1_fu_182_p3 = ap_const_lv1_1) and (empty_11_fu_144_p1 = ap_const_lv1_1) and (icmp_ln23_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)) or ((tmp_1_fu_182_p3 = ap_const_lv1_1) and (empty_11_fu_144_p1 = ap_const_lv1_0) and (icmp_ln23_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            B_1_we0 <= ap_const_logic_1;
        else 
            B_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln23_fu_135_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_170_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_129_p2, tmp_1_fu_182_p3)
    begin
                ap_condition_170 <= ((tmp_1_fu_182_p3 = ap_const_lv1_0) and (icmp_ln23_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_174_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_129_p2, tmp_1_fu_182_p3)
    begin
                ap_condition_174 <= ((tmp_1_fu_182_p3 = ap_const_lv1_1) and (icmp_ln23_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_129_p2, ap_start_int)
    begin
        if (((icmp_ln23_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_56)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_phi_mul_load_assign_proc : process(ap_CS_fsm_state1, phi_mul_fu_52, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_phi_mul_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_phi_mul_load <= phi_mul_fu_52;
        end if; 
    end process;

    empty_11_fu_144_p1 <= ap_sig_allocacmp_i_1(1 - 1 downto 0);
    empty_12_fu_154_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_1) < unsigned(ap_const_lv5_A)) else "0";
    empty_13_fu_160_p2 <= std_logic_vector(unsigned(trunc_ln23_fu_125_p1) + unsigned(ap_const_lv4_6));
    empty_14_fu_166_p3 <= 
        trunc_ln23_fu_125_p1 when (empty_12_fu_154_p2(0) = '1') else 
        empty_13_fu_160_p2;
    icmp_ln23_fu_129_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv5_14) else "0";
    next_mul_fu_148_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_mul_load) + unsigned(ap_const_lv11_34));
    tmp_1_fu_182_p3 <= ap_sig_allocacmp_phi_mul_load(9 downto 9);
    trunc_ln23_fu_125_p1 <= ap_sig_allocacmp_i_1(4 - 1 downto 0);
    zext_ln21_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_14_fu_166_p3),64));
end behav;
