// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module loop_perfect_loop_perfect_Pipeline_LOOP_I (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        B_0_address0,
        B_0_ce0,
        B_0_we0,
        B_0_d0,
        B_1_address0,
        B_1_ce0,
        B_1_we0,
        B_1_d0,
        empty
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] B_0_address0;
output   B_0_ce0;
output   B_0_we0;
output  [5:0] B_0_d0;
output  [3:0] B_1_address0;
output   B_1_ce0;
output   B_1_we0;
output  [5:0] B_1_d0;
input  [5:0] empty;

reg ap_idle;
reg[3:0] B_0_address0;
reg B_0_ce0;
reg B_0_we0;
reg[5:0] B_0_d0;
reg[3:0] B_1_address0;
reg B_1_ce0;
reg B_1_we0;
reg[5:0] B_1_d0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln23_fu_129_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln21_fu_174_p1;
wire   [0:0] empty_11_fu_144_p1;
wire   [0:0] tmp_1_fu_182_p3;
wire   [3:0] B_0_addr_1_gep_fu_94_p3;
wire   [3:0] B_1_addr_1_gep_fu_103_p3;
reg   [10:0] phi_mul_fu_52;
wire   [10:0] next_mul_fu_148_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_phi_mul_load;
reg   [4:0] i_fu_56;
wire   [4:0] add_ln23_fu_135_p2;
reg   [4:0] ap_sig_allocacmp_i_1;
wire   [3:0] trunc_ln23_fu_125_p1;
wire   [0:0] empty_12_fu_154_p2;
wire   [3:0] empty_13_fu_160_p2;
wire   [3:0] empty_14_fu_166_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_170;
reg    ap_condition_174;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

loop_perfect_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln23_fu_129_p2 == 1'd0)) begin
            i_fu_56 <= add_ln23_fu_135_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_56 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln23_fu_129_p2 == 1'd0)) begin
            phi_mul_fu_52 <= next_mul_fu_148_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_mul_fu_52 <= 11'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_170)) begin
        if ((empty_11_fu_144_p1 == 1'd1)) begin
            B_0_address0 = B_0_addr_1_gep_fu_94_p3;
        end else if ((empty_11_fu_144_p1 == 1'd0)) begin
            B_0_address0 = zext_ln21_fu_174_p1;
        end else begin
            B_0_address0 = 'bx;
        end
    end else begin
        B_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_1_fu_182_p3 == 1'd0) & (empty_11_fu_144_p1 == 1'd1) & (icmp_ln23_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((tmp_1_fu_182_p3 == 1'd0) & (empty_11_fu_144_p1 == 1'd0) & (icmp_ln23_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        B_0_ce0 = 1'b1;
    end else begin
        B_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_170)) begin
        if ((empty_11_fu_144_p1 == 1'd1)) begin
            B_0_d0 = 6'd0;
        end else if ((empty_11_fu_144_p1 == 1'd0)) begin
            B_0_d0 = empty;
        end else begin
            B_0_d0 = 'bx;
        end
    end else begin
        B_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_1_fu_182_p3 == 1'd0) & (empty_11_fu_144_p1 == 1'd1) & (icmp_ln23_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((tmp_1_fu_182_p3 == 1'd0) & (empty_11_fu_144_p1 == 1'd0) & (icmp_ln23_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        B_0_we0 = 1'b1;
    end else begin
        B_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_174)) begin
        if ((empty_11_fu_144_p1 == 1'd1)) begin
            B_1_address0 = B_1_addr_1_gep_fu_103_p3;
        end else if ((empty_11_fu_144_p1 == 1'd0)) begin
            B_1_address0 = zext_ln21_fu_174_p1;
        end else begin
            B_1_address0 = 'bx;
        end
    end else begin
        B_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_1_fu_182_p3 == 1'd1) & (empty_11_fu_144_p1 == 1'd1) & (icmp_ln23_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((tmp_1_fu_182_p3 == 1'd1) & (empty_11_fu_144_p1 == 1'd0) & (icmp_ln23_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        B_1_ce0 = 1'b1;
    end else begin
        B_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_174)) begin
        if ((empty_11_fu_144_p1 == 1'd1)) begin
            B_1_d0 = 6'd0;
        end else if ((empty_11_fu_144_p1 == 1'd0)) begin
            B_1_d0 = empty;
        end else begin
            B_1_d0 = 'bx;
        end
    end else begin
        B_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_1_fu_182_p3 == 1'd1) & (empty_11_fu_144_p1 == 1'd1) & (icmp_ln23_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((tmp_1_fu_182_p3 == 1'd1) & (empty_11_fu_144_p1 == 1'd0) & (icmp_ln23_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        B_1_we0 = 1'b1;
    end else begin
        B_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_phi_mul_load = 11'd0;
    end else begin
        ap_sig_allocacmp_phi_mul_load = phi_mul_fu_52;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_0_addr_1_gep_fu_94_p3 = zext_ln21_fu_174_p1;

assign B_1_addr_1_gep_fu_103_p3 = zext_ln21_fu_174_p1;

assign add_ln23_fu_135_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_condition_170 = ((tmp_1_fu_182_p3 == 1'd0) & (icmp_ln23_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_condition_174 = ((tmp_1_fu_182_p3 == 1'd1) & (icmp_ln23_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_11_fu_144_p1 = ap_sig_allocacmp_i_1[0:0];

assign empty_12_fu_154_p2 = ((ap_sig_allocacmp_i_1 < 5'd10) ? 1'b1 : 1'b0);

assign empty_13_fu_160_p2 = (trunc_ln23_fu_125_p1 + 4'd6);

assign empty_14_fu_166_p3 = ((empty_12_fu_154_p2[0:0] == 1'b1) ? trunc_ln23_fu_125_p1 : empty_13_fu_160_p2);

assign icmp_ln23_fu_129_p2 = ((ap_sig_allocacmp_i_1 == 5'd20) ? 1'b1 : 1'b0);

assign next_mul_fu_148_p2 = (ap_sig_allocacmp_phi_mul_load + 11'd52);

assign tmp_1_fu_182_p3 = ap_sig_allocacmp_phi_mul_load[32'd9];

assign trunc_ln23_fu_125_p1 = ap_sig_allocacmp_i_1[3:0];

assign zext_ln21_fu_174_p1 = empty_14_fu_166_p3;

endmodule //loop_perfect_loop_perfect_Pipeline_LOOP_I
