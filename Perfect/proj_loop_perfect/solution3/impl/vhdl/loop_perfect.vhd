-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_perfect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_we0 : OUT STD_LOGIC;
    B_0_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_we0 : OUT STD_LOGIC;
    B_1_d0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of loop_perfect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_perfect_loop_perfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.050000,HLS_SYN_LAT=2841,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=119,HLS_SYN_LUT=353,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_34 : STD_LOGIC_VECTOR (10 downto 0) := "00000110100";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv26_199A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001100110011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln23_1_fu_191_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_1_reg_453 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln23_fu_203_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_reg_461 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_13_fu_209_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_reg_466 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_1_addr_reg_474 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_0_addr_reg_479 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln24_fu_257_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln24_reg_487 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln232_1_fu_263_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln232_1_reg_492 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln24_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_497 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln25_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln27_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_416_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_V_3_reg_536 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln1559_1_fu_404_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1559_1_reg_547 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_reg_148 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal phi_mul_reg_160 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast1_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul4_fu_84 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal acc_V_fu_92 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln23_fu_187_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_14_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_fu_219_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_16_fu_225_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln24_fu_247_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln232_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln232_fu_285_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln232_fu_291_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_319_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1559_fu_355_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1559_fu_358_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_371_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_381_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1559_fu_390_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1559_1_fu_398_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_416_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_416_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_425_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal grp_fu_416_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component loop_perfect_mux_22_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component loop_perfect_mac_muladd_5ns_5s_12s_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component loop_perfect_mul_mul_12s_13ns_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mux_22_5_1_1_U1 : component loop_perfect_mux_22_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 2,
        dout_WIDTH => 5)
    port map (
        din0 => A_0_q0,
        din1 => A_1_q0,
        din2 => tmp_2_reg_497,
        dout => tmp_fu_319_p4);

    mac_muladd_5ns_5s_12s_12_4_1_U2 : component loop_perfect_mac_muladd_5ns_5s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_416_p0,
        din1 => tmp_fu_319_p4,
        din2 => grp_fu_416_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_416_p3);

    mul_mul_12s_13ns_26_4_1_U3 : component loop_perfect_mul_mul_12s_13ns_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_416_p3,
        din1 => grp_fu_425_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_425_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_88 <= ap_const_lv5_0;
            elsif (((icmp_ln24_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_88 <= add_ln23_reg_461;
            end if; 
        end if;
    end process;

    j_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_reg_148 <= add_ln24_reg_487;
            elsif (((icmp_ln23_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_148 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul4_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul4_fu_84 <= ap_const_lv11_0;
            elsif (((icmp_ln24_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul4_fu_84 <= add_ln23_1_reg_453;
            end if; 
        end if;
    end process;

    phi_mul_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_mul_reg_160 <= add_ln232_1_reg_492;
            elsif (((icmp_ln23_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_160 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                B_0_addr_reg_479 <= p_cast1_fu_233_p1(4 - 1 downto 0);
                B_1_addr_reg_474 <= p_cast1_fu_233_p1(4 - 1 downto 0);
                empty_13_reg_466 <= empty_13_fu_209_p1;
                tmp_1_reg_470 <= phi_mul4_fu_84(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                acc_V_3_reg_536 <= grp_fu_416_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                acc_V_fu_92 <= acc_V_3_reg_536;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln232_1_reg_492 <= add_ln232_1_fu_263_p2;
                tmp_2_reg_497 <= phi_mul_reg_160(10 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln23_1_reg_453 <= add_ln23_1_fu_191_p2;
                add_ln23_reg_461 <= add_ln23_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln24_reg_487 <= add_ln24_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln25_reg_512 <= icmp_ln25_fu_313_p2;
                icmp_ln27_reg_527 <= icmp_ln27_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                select_ln1559_1_reg_547 <= select_ln1559_1_fu_404_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, empty_13_reg_466, icmp_ln23_fu_197_p2, ap_CS_fsm_state3, icmp_ln24_fu_251_p2, icmp_ln27_reg_527, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln23_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln24_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((empty_13_reg_466 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln27_reg_527 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    A_0_address0 <= zext_ln232_fu_299_p1(4 - 1 downto 0);

    A_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_address0 <= zext_ln232_fu_299_p1(4 - 1 downto 0);

    A_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_0_address0 <= B_0_addr_reg_479;

    B_0_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_0_d0_assign_proc : process(ap_CS_fsm_state7, select_ln1559_1_reg_547, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            B_0_d0 <= select_ln1559_1_reg_547;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            B_0_d0 <= ap_const_lv6_0;
        else 
            B_0_d0 <= "XXXXXX";
        end if; 
    end process;


    B_0_we0_assign_proc : process(empty_13_reg_466, tmp_1_reg_470, icmp_ln27_reg_527, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((((tmp_1_reg_470 = ap_const_lv1_0) and (empty_13_reg_466 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln27_reg_527 = ap_const_lv1_1)) or ((tmp_1_reg_470 = ap_const_lv1_0) and (empty_13_reg_466 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln27_reg_527 = ap_const_lv1_1)))) then 
            B_0_we0 <= ap_const_logic_1;
        else 
            B_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= B_1_addr_reg_474;

    B_1_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_d0_assign_proc : process(ap_CS_fsm_state7, select_ln1559_1_reg_547, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            B_1_d0 <= select_ln1559_1_reg_547;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            B_1_d0 <= ap_const_lv6_0;
        else 
            B_1_d0 <= "XXXXXX";
        end if; 
    end process;


    B_1_we0_assign_proc : process(empty_13_reg_466, tmp_1_reg_470, icmp_ln27_reg_527, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((((tmp_1_reg_470 = ap_const_lv1_1) and (empty_13_reg_466 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln27_reg_527 = ap_const_lv1_1)) or ((tmp_1_reg_470 = ap_const_lv1_1) and (empty_13_reg_466 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln27_reg_527 = ap_const_lv1_1)))) then 
            B_1_we0 <= ap_const_logic_1;
        else 
            B_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln232_1_fu_263_p2 <= std_logic_vector(unsigned(phi_mul_reg_160) + unsigned(ap_const_lv11_34));
    add_ln232_fu_285_p2 <= std_logic_vector(unsigned(trunc_ln24_fu_247_p1) + unsigned(ap_const_lv4_6));
    add_ln23_1_fu_191_p2 <= std_logic_vector(unsigned(phi_mul4_fu_84) + unsigned(ap_const_lv11_34));
    add_ln23_fu_203_p2 <= std_logic_vector(unsigned(i_fu_88) + unsigned(ap_const_lv5_1));
    add_ln24_fu_257_p2 <= std_logic_vector(unsigned(j_reg_148) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_197_p2)
    begin
        if (((icmp_ln23_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_197_p2)
    begin
        if (((icmp_ln23_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_13_fu_209_p1 <= i_fu_88(1 - 1 downto 0);
    empty_14_fu_213_p2 <= "1" when (unsigned(i_fu_88) < unsigned(ap_const_lv5_A)) else "0";
    empty_15_fu_219_p2 <= std_logic_vector(unsigned(trunc_ln23_fu_187_p1) + unsigned(ap_const_lv4_6));
    empty_16_fu_225_p3 <= 
        trunc_ln23_fu_187_p1 when (empty_14_fu_213_p2(0) = '1') else 
        empty_15_fu_219_p2;
    grp_fu_416_p0 <= grp_fu_416_p00(5 - 1 downto 0);
    grp_fu_416_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_148),10));
    grp_fu_416_p2 <= 
        ap_const_lv12_0 when (icmp_ln25_reg_512(0) = '1') else 
        acc_V_fu_92;
    grp_fu_425_p1 <= ap_const_lv26_199A(13 - 1 downto 0);
    icmp_ln232_fu_279_p2 <= "1" when (unsigned(j_reg_148) < unsigned(ap_const_lv5_A)) else "0";
    icmp_ln23_fu_197_p2 <= "1" when (i_fu_88 = ap_const_lv5_14) else "0";
    icmp_ln24_fu_251_p2 <= "1" when (j_reg_148 = ap_const_lv5_14) else "0";
    icmp_ln25_fu_313_p2 <= "1" when (j_reg_148 = ap_const_lv5_0) else "0";
    icmp_ln27_fu_336_p2 <= "1" when (j_reg_148 = ap_const_lv5_13) else "0";
    p_cast1_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_16_fu_225_p3),64));
    select_ln1559_1_fu_404_p3 <= 
        sub_ln1559_1_fu_398_p2 when (tmp_3_fu_364_p3(0) = '1') else 
        tmp_5_fu_381_p4;
    select_ln1559_fu_390_p3 <= 
        tmp_4_fu_371_p4 when (tmp_3_fu_364_p3(0) = '1') else 
        tmp_5_fu_381_p4;
    select_ln232_fu_291_p3 <= 
        trunc_ln24_fu_247_p1 when (icmp_ln232_fu_279_p2(0) = '1') else 
        add_ln232_fu_285_p2;
    sub_ln1559_1_fu_398_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(select_ln1559_fu_390_p3));
    sub_ln1559_fu_358_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(trunc_ln1559_fu_355_p1));
    tmp_3_fu_364_p3 <= acc_V_3_reg_536(11 downto 11);
    tmp_4_fu_371_p4 <= sub_ln1559_fu_358_p2(22 downto 17);
    tmp_5_fu_381_p4 <= grp_fu_425_p2(22 downto 17);
    trunc_ln1559_fu_355_p1 <= grp_fu_425_p2(25 - 1 downto 0);
    trunc_ln23_fu_187_p1 <= i_fu_88(4 - 1 downto 0);
    trunc_ln24_fu_247_p1 <= j_reg_148(4 - 1 downto 0);
    zext_ln232_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln232_fu_291_p3),64));
end behav;
