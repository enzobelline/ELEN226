// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_perfect_loop_perfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.050000,HLS_SYN_LAT=2841,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=119,HLS_SYN_LUT=353,HLS_VERSION=2022_1}" *)

module loop_perfect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        B_0_address0,
        B_0_ce0,
        B_0_we0,
        B_0_d0,
        B_1_address0,
        B_1_ce0,
        B_1_we0,
        B_1_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_0_address0;
output   A_0_ce0;
input  [4:0] A_0_q0;
output  [3:0] A_1_address0;
output   A_1_ce0;
input  [4:0] A_1_q0;
output  [3:0] B_0_address0;
output   B_0_ce0;
output   B_0_we0;
output  [5:0] B_0_d0;
output  [3:0] B_1_address0;
output   B_1_ce0;
output   B_1_we0;
output  [5:0] B_1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_0_ce0;
reg A_1_ce0;
reg B_0_ce0;
reg B_0_we0;
reg[5:0] B_0_d0;
reg B_1_ce0;
reg B_1_we0;
reg[5:0] B_1_d0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] add_ln23_1_fu_191_p2;
reg   [10:0] add_ln23_1_reg_453;
wire    ap_CS_fsm_state2;
wire   [4:0] add_ln23_fu_203_p2;
reg   [4:0] add_ln23_reg_461;
wire   [0:0] empty_13_fu_209_p1;
reg   [0:0] empty_13_reg_466;
wire   [0:0] icmp_ln23_fu_197_p2;
reg   [0:0] tmp_1_reg_470;
reg   [3:0] B_1_addr_reg_474;
reg   [3:0] B_0_addr_reg_479;
wire   [4:0] add_ln24_fu_257_p2;
reg   [4:0] add_ln24_reg_487;
wire    ap_CS_fsm_state3;
wire   [10:0] add_ln232_1_fu_263_p2;
reg   [10:0] add_ln232_1_reg_492;
wire   [0:0] icmp_ln24_fu_251_p2;
reg   [1:0] tmp_2_reg_497;
wire   [0:0] icmp_ln25_fu_313_p2;
reg   [0:0] icmp_ln25_reg_512;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln27_fu_336_p2;
reg   [0:0] icmp_ln27_reg_527;
wire    ap_CS_fsm_state6;
wire  signed [11:0] grp_fu_416_p3;
reg  signed [11:0] acc_V_3_reg_536;
wire    ap_CS_fsm_state7;
wire   [5:0] select_ln1559_1_fu_404_p3;
reg   [5:0] select_ln1559_1_reg_547;
wire    ap_CS_fsm_state10;
reg   [4:0] j_reg_148;
wire    ap_CS_fsm_state11;
reg   [10:0] phi_mul_reg_160;
wire   [63:0] p_cast1_fu_233_p1;
wire   [63:0] zext_ln232_fu_299_p1;
reg   [10:0] phi_mul4_fu_84;
reg   [4:0] i_fu_88;
reg   [11:0] acc_V_fu_92;
wire   [3:0] trunc_ln23_fu_187_p1;
wire   [0:0] empty_14_fu_213_p2;
wire   [3:0] empty_15_fu_219_p2;
wire   [3:0] empty_16_fu_225_p3;
wire   [3:0] trunc_ln24_fu_247_p1;
wire   [0:0] icmp_ln232_fu_279_p2;
wire   [3:0] add_ln232_fu_285_p2;
wire   [3:0] select_ln232_fu_291_p3;
wire  signed [4:0] tmp_fu_319_p4;
wire  signed [25:0] grp_fu_425_p2;
wire   [24:0] trunc_ln1559_fu_355_p1;
wire   [24:0] sub_ln1559_fu_358_p2;
wire   [0:0] tmp_3_fu_364_p3;
wire   [5:0] tmp_4_fu_371_p4;
wire   [5:0] tmp_5_fu_381_p4;
wire   [5:0] select_ln1559_fu_390_p3;
wire   [5:0] sub_ln1559_1_fu_398_p2;
wire   [4:0] grp_fu_416_p0;
wire  signed [11:0] grp_fu_416_p2;
wire   [12:0] grp_fu_425_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire   [9:0] grp_fu_416_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

loop_perfect_mux_22_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 5 ))
mux_22_5_1_1_U1(
    .din0(A_0_q0),
    .din1(A_1_q0),
    .din2(tmp_2_reg_497),
    .dout(tmp_fu_319_p4)
);

loop_perfect_mac_muladd_5ns_5s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mac_muladd_5ns_5s_12s_12_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_416_p0),
    .din1(tmp_fu_319_p4),
    .din2(grp_fu_416_p2),
    .ce(1'b1),
    .dout(grp_fu_416_p3)
);

loop_perfect_mul_mul_12s_13ns_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 26 ))
mul_mul_12s_13ns_26_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_416_p3),
    .din1(grp_fu_425_p1),
    .ce(1'b1),
    .dout(grp_fu_425_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_88 <= 5'd0;
    end else if (((icmp_ln24_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_fu_88 <= add_ln23_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_148 <= add_ln24_reg_487;
    end else if (((icmp_ln23_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_148 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul4_fu_84 <= 11'd0;
    end else if (((icmp_ln24_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul4_fu_84 <= add_ln23_1_reg_453;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_mul_reg_160 <= add_ln232_1_reg_492;
    end else if (((icmp_ln23_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_160 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        B_0_addr_reg_479 <= p_cast1_fu_233_p1;
        B_1_addr_reg_474 <= p_cast1_fu_233_p1;
        empty_13_reg_466 <= empty_13_fu_209_p1;
        tmp_1_reg_470 <= phi_mul4_fu_84[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_V_3_reg_536 <= grp_fu_416_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        acc_V_fu_92 <= acc_V_3_reg_536;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln232_1_reg_492 <= add_ln232_1_fu_263_p2;
        tmp_2_reg_497 <= {{phi_mul_reg_160[10:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln23_1_reg_453 <= add_ln23_1_fu_191_p2;
        add_ln23_reg_461 <= add_ln23_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln24_reg_487 <= add_ln24_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln25_reg_512 <= icmp_ln25_fu_313_p2;
        icmp_ln27_reg_527 <= icmp_ln27_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        select_ln1559_1_reg_547 <= select_ln1559_1_fu_404_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_0_ce0 = 1'b1;
    end else begin
        A_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        B_0_ce0 = 1'b1;
    end else begin
        B_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        B_0_d0 = select_ln1559_1_reg_547;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_0_d0 = 6'd0;
    end else begin
        B_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_1_reg_470 == 1'd0) & (empty_13_reg_466 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln27_reg_527 == 1'd1)) | ((tmp_1_reg_470 == 1'd0) & (empty_13_reg_466 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln27_reg_527 == 1'd1)))) begin
        B_0_we0 = 1'b1;
    end else begin
        B_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        B_1_ce0 = 1'b1;
    end else begin
        B_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        B_1_d0 = select_ln1559_1_reg_547;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_1_d0 = 6'd0;
    end else begin
        B_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_1_reg_470 == 1'd1) & (empty_13_reg_466 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln27_reg_527 == 1'd1)) | ((tmp_1_reg_470 == 1'd1) & (empty_13_reg_466 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln27_reg_527 == 1'd1)))) begin
        B_1_we0 = 1'b1;
    end else begin
        B_1_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln23_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln23_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln24_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((empty_13_reg_466 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln27_reg_527 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_address0 = zext_ln232_fu_299_p1;

assign A_1_address0 = zext_ln232_fu_299_p1;

assign B_0_address0 = B_0_addr_reg_479;

assign B_1_address0 = B_1_addr_reg_474;

assign add_ln232_1_fu_263_p2 = (phi_mul_reg_160 + 11'd52);

assign add_ln232_fu_285_p2 = (trunc_ln24_fu_247_p1 + 4'd6);

assign add_ln23_1_fu_191_p2 = (phi_mul4_fu_84 + 11'd52);

assign add_ln23_fu_203_p2 = (i_fu_88 + 5'd1);

assign add_ln24_fu_257_p2 = (j_reg_148 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign empty_13_fu_209_p1 = i_fu_88[0:0];

assign empty_14_fu_213_p2 = ((i_fu_88 < 5'd10) ? 1'b1 : 1'b0);

assign empty_15_fu_219_p2 = (trunc_ln23_fu_187_p1 + 4'd6);

assign empty_16_fu_225_p3 = ((empty_14_fu_213_p2[0:0] == 1'b1) ? trunc_ln23_fu_187_p1 : empty_15_fu_219_p2);

assign grp_fu_416_p0 = grp_fu_416_p00;

assign grp_fu_416_p00 = j_reg_148;

assign grp_fu_416_p2 = ((icmp_ln25_reg_512[0:0] == 1'b1) ? 12'd0 : acc_V_fu_92);

assign grp_fu_425_p1 = 26'd6554;

assign icmp_ln232_fu_279_p2 = ((j_reg_148 < 5'd10) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_197_p2 = ((i_fu_88 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_251_p2 = ((j_reg_148 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_313_p2 = ((j_reg_148 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_336_p2 = ((j_reg_148 == 5'd19) ? 1'b1 : 1'b0);

assign p_cast1_fu_233_p1 = empty_16_fu_225_p3;

assign select_ln1559_1_fu_404_p3 = ((tmp_3_fu_364_p3[0:0] == 1'b1) ? sub_ln1559_1_fu_398_p2 : tmp_5_fu_381_p4);

assign select_ln1559_fu_390_p3 = ((tmp_3_fu_364_p3[0:0] == 1'b1) ? tmp_4_fu_371_p4 : tmp_5_fu_381_p4);

assign select_ln232_fu_291_p3 = ((icmp_ln232_fu_279_p2[0:0] == 1'b1) ? trunc_ln24_fu_247_p1 : add_ln232_fu_285_p2);

assign sub_ln1559_1_fu_398_p2 = (6'd0 - select_ln1559_fu_390_p3);

assign sub_ln1559_fu_358_p2 = (25'd0 - trunc_ln1559_fu_355_p1);

assign tmp_3_fu_364_p3 = acc_V_3_reg_536[32'd11];

assign tmp_4_fu_371_p4 = {{sub_ln1559_fu_358_p2[22:17]}};

assign tmp_5_fu_381_p4 = {{grp_fu_425_p2[22:17]}};

assign trunc_ln1559_fu_355_p1 = grp_fu_425_p2[24:0];

assign trunc_ln23_fu_187_p1 = i_fu_88[3:0];

assign trunc_ln24_fu_247_p1 = j_reg_148[3:0];

assign zext_ln232_fu_299_p1 = select_ln232_fu_291_p3;

endmodule //loop_perfect
