-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_imperfect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_we0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of loop_imperfect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_imperfect_loop_imperfect,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k70t-fbg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.845625,HLS_SYN_LAT=42,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=289,HLS_SYN_LUT=702,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv10_13 : STD_LOGIC_VECTOR (9 downto 0) := "0000010011";
    constant ap_const_lv26_199A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001100110011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_289 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_294 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_299 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal reg_303 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal A_load_1_reg_928 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_load_5_reg_963 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_862_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_11_reg_974 : STD_LOGIC_VECTOR (10 downto 0);
    signal A_load_4_reg_979 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal A_load_7_reg_990 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln886_1_fu_421_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln886_1_reg_1000 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln886_2_fu_443_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln886_2_reg_1005 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln886_3_fu_463_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln886_3_reg_1025 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_870_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_12_reg_1030 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_6_fu_516_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_6_reg_1045 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_7_fu_522_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln886_7_reg_1050 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln886_9_fu_560_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_9_reg_1065 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln886_4_fu_597_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln886_4_reg_1070 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln886_5_fu_619_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln886_5_reg_1075 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_877_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_16_reg_1085 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_19_fu_639_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln886_19_reg_1090 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln886_fu_698_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln886_reg_1095 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln886_14_fu_710_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_14_reg_1100 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_20_fu_728_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_20_reg_1105 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_4_fu_762_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_4_reg_1110 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln886_21_fu_783_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_21_reg_1115 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_22_fu_801_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_22_reg_1120 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal trunc_ln1559_fu_817_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln1559_reg_1136 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_2_reg_1141 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1559_1_fu_850_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1559_1_reg_1147 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal select_ln1559_1_fu_856_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1559_1_reg_1152 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_start : STD_LOGIC;
    signal grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_done : STD_LOGIC;
    signal grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_idle : STD_LOGIC;
    signal grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_ready : STD_LOGIC;
    signal grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_ce0 : STD_LOGIC;
    signal grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_we0 : STD_LOGIC;
    signal grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal shl_ln886_10_fu_316_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_11_fu_328_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln886_10_fu_324_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_11_fu_336_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln886_3_fu_340_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln886_1_fu_354_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln886_1_fu_362_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln886_fu_350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln886_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln886_2_fu_376_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln886_3_fu_388_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln886_4_fu_399_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln886_5_fu_410_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln886_3_fu_406_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_4_fu_417_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_5_fu_427_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_6_fu_431_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_6_fu_431_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln886_6_fu_439_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_5_fu_427_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln232_3_fu_384_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln232_4_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln886_2_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln886_22_fu_459_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln232_2_fu_372_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_7_fu_475_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln886_9_fu_486_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln886_s_fu_498_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln232_6_fu_472_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln232_7_fu_482_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_5_fu_510_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln232_5_fu_469_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln232_9_fu_506_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_8_fu_494_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_8_fu_532_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_8_fu_532_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln886_26_fu_547_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln232_8_fu_540_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_8_fu_550_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_27_fu_556_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_25_fu_544_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_7_fu_569_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_12_fu_573_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_13_fu_585_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln886_13_fu_581_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_14_fu_593_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_15_fu_603_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_14_fu_607_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln886_14_fu_607_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_16_fu_615_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_15_fu_603_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_7_fu_569_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln886_17_fu_625_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln886_18_fu_629_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln886_32_fu_635_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln886_2_fu_566_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_645_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln886_15_fu_662_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_16_fu_674_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln886_18_fu_686_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln232_17_fu_694_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln232_1_fu_652_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln232_14_fu_659_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln232_15_fu_670_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_13_fu_704_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln232_13_fu_656_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_31_fu_716_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln232_16_fu_682_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_33_fu_725_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln886_17_fu_719_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln886_17_fu_734_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln886_20_fu_746_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_18_fu_742_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_1_fu_749_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln886_23_fu_759_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_21_fu_755_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln886_30_fu_771_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln886_29_fu_768_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln886_34_fu_780_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_15_fu_774_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln886_28_fu_792_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln886_24_fu_789_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_10_fu_795_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_885_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln1559_fu_829_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_fu_834_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1559_fu_844_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_862_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_870_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_877_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_885_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component loop_imperfect_loop_imperfect_Pipeline_LOOP_I IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_we0 : OUT STD_LOGIC;
        B_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        select_ln1559_1 : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component loop_imperfect_mac_muladd_5s_4ns_10s_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component loop_imperfect_mac_muladd_5s_4ns_11s_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component loop_imperfect_mac_muladd_5s_5ns_5s_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component loop_imperfect_mul_mul_12s_13ns_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    grp_loop_imperfect_Pipeline_LOOP_I_fu_282 : component loop_imperfect_loop_imperfect_Pipeline_LOOP_I
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_start,
        ap_done => grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_done,
        ap_idle => grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_idle,
        ap_ready => grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_ready,
        B_address0 => grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_address0,
        B_ce0 => grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_ce0,
        B_we0 => grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_we0,
        B_d0 => grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_d0,
        select_ln1559_1 => select_ln1559_1_reg_1152);

    mac_muladd_5s_4ns_10s_11_4_1_U3 : component loop_imperfect_mac_muladd_5s_4ns_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_q0,
        din1 => grp_fu_862_p1,
        din2 => sub_ln886_3_fu_340_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_862_p3);

    mac_muladd_5s_4ns_11s_11_4_1_U4 : component loop_imperfect_mac_muladd_5s_4ns_11s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_289,
        din1 => grp_fu_870_p1,
        din2 => add_ln886_11_reg_974,
        ce => ap_const_logic_1,
        dout => grp_fu_870_p3);

    mac_muladd_5s_5ns_5s_10_4_1_U5 : component loop_imperfect_mac_muladd_5s_5ns_5s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_299,
        din1 => grp_fu_877_p1,
        din2 => reg_289,
        ce => ap_const_logic_1,
        dout => grp_fu_877_p3);

    mul_mul_12s_13ns_26_4_1_U6 : component loop_imperfect_mul_mul_12s_13ns_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln886_22_reg_1120,
        din1 => grp_fu_885_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_885_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_ready = ap_const_logic_1)) then 
                    grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_289 <= A_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                reg_289 <= A_q0;
            end if; 
        end if;
    end process;

    reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_294 <= A_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                reg_294 <= A_q1;
            end if; 
        end if;
    end process;

    reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_303 <= A_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_303 <= A_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                A_load_1_reg_928 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                A_load_4_reg_979 <= A_q0;
                A_load_7_reg_990 <= A_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                A_load_5_reg_963 <= A_q1;
                add_ln886_11_reg_974 <= grp_fu_862_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln886_12_reg_1030 <= grp_fu_870_p3;
                add_ln886_3_reg_1025 <= add_ln886_3_fu_463_p2;
                    sub_ln886_1_reg_1000(8 downto 1) <= sub_ln886_1_fu_421_p2(8 downto 1);
                sub_ln886_2_reg_1005 <= sub_ln886_2_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln886_14_reg_1100 <= add_ln886_14_fu_710_p2;
                add_ln886_20_reg_1105 <= add_ln886_20_fu_728_p2;
                    add_ln886_reg_1095(6 downto 1) <= add_ln886_fu_698_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln886_16_reg_1085 <= grp_fu_877_p3;
                add_ln886_19_reg_1090 <= add_ln886_19_fu_639_p2;
                    sub_ln886_4_reg_1070(9 downto 1) <= sub_ln886_4_fu_597_p2(9 downto 1);
                sub_ln886_5_reg_1075 <= sub_ln886_5_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln886_21_reg_1115 <= add_ln886_21_fu_783_p2;
                add_ln886_4_reg_1110 <= add_ln886_4_fu_762_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln886_22_reg_1120 <= add_ln886_22_fu_801_p2;
                tmp_reg_1125 <= add_ln886_22_fu_801_p2(11 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln886_6_reg_1045 <= add_ln886_6_fu_516_p2;
                    add_ln886_7_reg_1050(8 downto 1) <= add_ln886_7_fu_522_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln886_9_reg_1065 <= add_ln886_9_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_299 <= A_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                select_ln1559_1_reg_1152 <= select_ln1559_1_fu_856_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1125 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                sub_ln1559_1_reg_1147 <= sub_ln1559_1_fu_850_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_2_reg_1141 <= grp_fu_885_p2(22 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1125 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                trunc_ln1559_reg_1136 <= trunc_ln1559_fu_817_p1;
            end if;
        end if;
    end process;
    sub_ln886_1_reg_1000(0) <= '0';
    add_ln886_7_reg_1050(0) <= '0';
    sub_ln886_4_reg_1070(0) <= '0';
    add_ln886_reg_1095(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_done, ap_CS_fsm_state21)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            A_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        else 
            A_address0 <= "XXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        else 
            A_address1 <= "XXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_address0;
    B_ce0 <= grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_ce0;
    B_d0 <= grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_d0;
    B_we0 <= grp_loop_imperfect_Pipeline_LOOP_I_fu_282_B_we0;
    add_ln886_10_fu_795_p2 <= std_logic_vector(signed(sext_ln886_28_fu_792_p1) + signed(sext_ln886_24_fu_789_p1));
    add_ln886_13_fu_704_p2 <= std_logic_vector(signed(sext_ln232_14_fu_659_p1) + signed(sext_ln232_15_fu_670_p1));
    add_ln886_14_fu_710_p2 <= std_logic_vector(unsigned(add_ln886_13_fu_704_p2) + unsigned(sext_ln232_13_fu_656_p1));
    add_ln886_15_fu_774_p2 <= std_logic_vector(signed(sext_ln886_30_fu_771_p1) + signed(sext_ln886_29_fu_768_p1));
    add_ln886_17_fu_719_p2 <= std_logic_vector(signed(sext_ln886_31_fu_716_p1) + signed(sext_ln232_16_fu_682_p1));
    add_ln886_18_fu_629_p2 <= std_logic_vector(signed(sext_ln886_7_fu_569_p1) + signed(sext_ln886_17_fu_625_p1));
    add_ln886_19_fu_639_p2 <= std_logic_vector(signed(sext_ln886_32_fu_635_p1) + signed(sext_ln886_2_fu_566_p1));
    add_ln886_1_fu_749_p2 <= std_logic_vector(signed(sext_ln886_20_fu_746_p1) + signed(sext_ln886_18_fu_742_p1));
    add_ln886_20_fu_728_p2 <= std_logic_vector(signed(sext_ln886_33_fu_725_p1) + signed(add_ln886_17_fu_719_p2));
    add_ln886_21_fu_783_p2 <= std_logic_vector(signed(sext_ln886_34_fu_780_p1) + signed(add_ln886_15_fu_774_p2));
    add_ln886_22_fu_801_p2 <= std_logic_vector(unsigned(add_ln886_21_reg_1115) + unsigned(add_ln886_10_fu_795_p2));
    add_ln886_2_fu_453_p2 <= std_logic_vector(signed(sext_ln232_3_fu_384_p1) + signed(sext_ln232_4_fu_395_p1));
    add_ln886_3_fu_463_p2 <= std_logic_vector(signed(sext_ln886_22_fu_459_p1) + signed(sext_ln232_2_fu_372_p1));
    add_ln886_4_fu_762_p2 <= std_logic_vector(signed(sext_ln886_23_fu_759_p1) + signed(sext_ln886_21_fu_755_p1));
    add_ln886_5_fu_510_p2 <= std_logic_vector(signed(sext_ln232_6_fu_472_p1) + signed(sext_ln232_7_fu_482_p1));
    add_ln886_6_fu_516_p2 <= std_logic_vector(unsigned(add_ln886_5_fu_510_p2) + unsigned(sext_ln232_5_fu_469_p1));
    add_ln886_7_fu_522_p2 <= std_logic_vector(signed(sext_ln232_9_fu_506_p1) + signed(sext_ln886_8_fu_494_p1));
    add_ln886_8_fu_550_p2 <= std_logic_vector(signed(sext_ln886_26_fu_547_p1) + signed(sext_ln232_8_fu_540_p1));
    add_ln886_9_fu_560_p2 <= std_logic_vector(signed(sext_ln886_27_fu_556_p1) + signed(sext_ln886_25_fu_544_p1));
    add_ln886_fu_698_p2 <= std_logic_vector(signed(sext_ln232_17_fu_694_p1) + signed(sext_ln232_1_fu_652_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_done)
    begin
        if ((grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_done, ap_CS_fsm_state21)
    begin
        if (((grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_done, ap_CS_fsm_state21)
    begin
        if (((grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_862_p1 <= ap_const_lv10_D(4 - 1 downto 0);
    grp_fu_870_p1 <= ap_const_lv10_B(4 - 1 downto 0);
    grp_fu_877_p1 <= ap_const_lv10_13(5 - 1 downto 0);
    grp_fu_885_p1 <= ap_const_lv26_199A(13 - 1 downto 0);
    grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_start <= grp_loop_imperfect_Pipeline_LOOP_I_fu_282_ap_start_reg;
    select_ln1559_1_fu_856_p3 <= 
        sub_ln1559_1_reg_1147 when (tmp_reg_1125(0) = '1') else 
        tmp_2_reg_1141;
    select_ln1559_fu_844_p3 <= 
        tmp_1_fu_834_p4 when (tmp_reg_1125(0) = '1') else 
        tmp_2_reg_1141;
        sext_ln232_13_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln886_4_reg_1070),11));

        sext_ln232_14_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln886_5_reg_1075),11));

        sext_ln232_15_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_15_fu_662_p3),11));

        sext_ln232_16_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_16_fu_674_p3),11));

        sext_ln232_17_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_18_fu_686_p3),7));

        sext_ln232_1_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_645_p3),7));

        sext_ln232_2_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln886_fu_366_p2),9));

        sext_ln232_3_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_2_fu_376_p3),8));

        sext_ln232_4_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_3_fu_388_p3),8));

        sext_ln232_5_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln886_1_reg_1000),10));

        sext_ln232_6_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln886_2_reg_1005),10));

        sext_ln232_7_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_7_fu_475_p3),10));

        sext_ln232_8_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_8_fu_532_p3),10));

        sext_ln232_9_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_s_fu_498_p3),9));

        sext_ln886_10_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_10_fu_316_p3),10));

        sext_ln886_11_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_11_fu_328_p3),10));

        sext_ln886_13_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_12_fu_573_p3),10));

        sext_ln886_14_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_13_fu_585_p3),10));

    sext_ln886_15_fu_603_p0 <= reg_299;
        sext_ln886_15_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln886_15_fu_603_p0),10));

        sext_ln886_16_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_14_fu_607_p3),10));

        sext_ln886_17_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_303),6));

        sext_ln886_18_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_17_fu_734_p3),10));

        sext_ln886_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_1_fu_354_p3),8));

        sext_ln886_20_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_reg_1095),10));

        sext_ln886_21_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_1_fu_749_p2),11));

        sext_ln886_22_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_2_fu_453_p2),9));

        sext_ln886_23_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_3_reg_1025),11));

        sext_ln886_24_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_4_reg_1110),12));

        sext_ln886_25_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_6_reg_1045),11));

        sext_ln886_26_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_7_reg_1050),10));

        sext_ln886_27_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_8_fu_550_p2),11));

        sext_ln886_28_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_9_reg_1065),12));

        sext_ln886_29_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_12_reg_1030),12));

        sext_ln886_2_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_load_4_reg_979),7));

        sext_ln886_30_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_14_reg_1100),12));

        sext_ln886_31_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_16_reg_1085),11));

        sext_ln886_32_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_18_fu_629_p2),7));

        sext_ln886_33_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_19_reg_1090),11));

        sext_ln886_34_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln886_20_reg_1105),12));

        sext_ln886_3_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_4_fu_399_p3),9));

        sext_ln886_4_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_5_fu_410_p3),9));

    sext_ln886_5_fu_427_p0 <= A_q0;
        sext_ln886_5_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln886_5_fu_427_p0),9));

        sext_ln886_6_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_6_fu_431_p3),9));

    sext_ln886_7_fu_569_p0 <= reg_294;
        sext_ln886_7_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln886_7_fu_569_p0),6));

        sext_ln886_8_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln886_9_fu_486_p3),9));

        sext_ln886_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_303),8));

    shl_ln886_10_fu_316_p3 <= (reg_294 & ap_const_lv4_0);
    shl_ln886_11_fu_328_p3 <= (reg_294 & ap_const_lv2_0);
    shl_ln886_12_fu_573_p3 <= (reg_289 & ap_const_lv4_0);
    shl_ln886_13_fu_585_p3 <= (reg_289 & ap_const_lv1_0);
    shl_ln886_14_fu_607_p1 <= reg_299;
    shl_ln886_14_fu_607_p3 <= (shl_ln886_14_fu_607_p1 & ap_const_lv4_0);
    shl_ln886_15_fu_662_p3 <= (reg_289 & ap_const_lv4_0);
    shl_ln886_16_fu_674_p3 <= (reg_303 & ap_const_lv4_0);
    shl_ln886_17_fu_734_p3 <= (reg_289 & ap_const_lv4_0);
    shl_ln886_18_fu_686_p3 <= (A_q0 & ap_const_lv1_0);
    shl_ln886_1_fu_354_p3 <= (reg_303 & ap_const_lv2_0);
    shl_ln886_2_fu_376_p3 <= (reg_294 & ap_const_lv2_0);
    shl_ln886_3_fu_388_p3 <= (A_load_4_reg_979 & ap_const_lv2_0);
    shl_ln886_4_fu_399_p3 <= (A_load_5_reg_963 & ap_const_lv3_0);
    shl_ln886_5_fu_410_p3 <= (A_load_5_reg_963 & ap_const_lv1_0);
    shl_ln886_6_fu_431_p1 <= A_q0;
    shl_ln886_6_fu_431_p3 <= (shl_ln886_6_fu_431_p1 & ap_const_lv3_0);
    shl_ln886_7_fu_475_p3 <= (A_load_7_reg_990 & ap_const_lv3_0);
    shl_ln886_8_fu_532_p1 <= reg_294;
    shl_ln886_8_fu_532_p3 <= (shl_ln886_8_fu_532_p1 & ap_const_lv3_0);
    shl_ln886_9_fu_486_p3 <= (reg_294 & ap_const_lv3_0);
    shl_ln886_s_fu_498_p3 <= (reg_294 & ap_const_lv1_0);
    shl_ln_fu_645_p3 <= (A_load_1_reg_928 & ap_const_lv1_0);
    sub_ln1559_1_fu_850_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(select_ln1559_fu_844_p3));
    sub_ln1559_fu_829_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(trunc_ln1559_reg_1136));
    sub_ln886_1_fu_421_p2 <= std_logic_vector(signed(sext_ln886_3_fu_406_p1) - signed(sext_ln886_4_fu_417_p1));
    sub_ln886_2_fu_443_p2 <= std_logic_vector(signed(sext_ln886_6_fu_439_p1) - signed(sext_ln886_5_fu_427_p1));
    sub_ln886_3_fu_340_p2 <= std_logic_vector(signed(sext_ln886_10_fu_324_p1) - signed(sext_ln886_11_fu_336_p1));
    sub_ln886_4_fu_597_p2 <= std_logic_vector(signed(sext_ln886_13_fu_581_p1) - signed(sext_ln886_14_fu_593_p1));
    sub_ln886_5_fu_619_p2 <= std_logic_vector(signed(sext_ln886_16_fu_615_p1) - signed(sext_ln886_15_fu_603_p1));
    sub_ln886_fu_366_p2 <= std_logic_vector(signed(sext_ln886_1_fu_362_p1) - signed(sext_ln886_fu_350_p1));
    tmp_1_fu_834_p4 <= sub_ln1559_fu_829_p2(22 downto 17);
    trunc_ln1559_fu_817_p1 <= grp_fu_885_p2(25 - 1 downto 0);
end behav;
