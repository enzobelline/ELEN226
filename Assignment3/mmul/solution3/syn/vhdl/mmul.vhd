-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_0_ce0 : OUT STD_LOGIC;
    a_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_1_ce0 : OUT STD_LOGIC;
    a_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_2_ce0 : OUT STD_LOGIC;
    a_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_3_ce0 : OUT STD_LOGIC;
    a_3_we0 : OUT STD_LOGIC;
    a_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_3_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_3_ce1 : OUT STD_LOGIC;
    a_3_we1 : OUT STD_LOGIC;
    a_3_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    b_2_ce0 : OUT STD_LOGIC;
    b_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    b_3_ce0 : OUT STD_LOGIC;
    b_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of mmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mmul_mmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.787500,HLS_SYN_LAT=81,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=323,HLS_SYN_LUT=407,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln8_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_1_fu_320_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln8_1_reg_553 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln8_1_reg_553_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln10_fu_355_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_reg_560 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_reg_560_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_1_fu_363_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_1_reg_566 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln14_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_572 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_572_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_572_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_572_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_572_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_577_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_577_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_577_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_577_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_577_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_577_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln12_fu_383_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln12_reg_581 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln16_fu_433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_586 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_586_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_586_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_586_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_586_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_449_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_626 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_460_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_631 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_addr_reg_641 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_491_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_reg_646 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_1_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln12_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_3_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_V_1_fu_90 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_acc_V_1_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_94 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (2 downto 0);
    signal j_fu_98 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_102 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln10_2_fu_280_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_106 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten36_fu_110 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_1_fu_256_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten36_load : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln10_1_fu_274_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln8_fu_307_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln12_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_fu_313_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln8_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_344_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_406_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_399_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_fu_413_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln16_fu_417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_2_fu_430_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_491_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_240 : BOOLEAN;
    signal ap_condition_242 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component mmul_mux_32_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mmul_mux_43_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mmul_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mmul_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mux_32_16_1_1_U1 : component mmul_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => a_0_q0,
        din1 => a_1_q0,
        din2 => a_2_q0,
        din3 => select_ln8_1_reg_553_pp0_iter2_reg,
        dout => tmp_fu_449_p5);

    mux_43_16_1_1_U2 : component mmul_mux_43_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => b_0_q0,
        din1 => b_1_q0,
        din2 => b_2_q0,
        din3 => b_3_q0,
        din4 => select_ln10_reg_560_pp0_iter2_reg,
        dout => tmp_1_fu_460_p6);

    mac_muladd_16s_16s_16ns_16_4_1_U3 : component mmul_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_631,
        din1 => tmp_reg_626,
        din2 => grp_fu_491_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_491_p3);

    flow_control_loop_pipe_U : component mmul_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    acc_V_1_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_240)) then 
                    acc_V_1_fu_90 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    acc_V_1_fu_90 <= grp_fu_491_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_106 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_106 <= select_ln8_1_fu_320_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten36_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_242)) then
                if ((icmp_ln8_fu_250_p2 = ap_const_lv1_0)) then 
                    indvar_flatten36_fu_110 <= add_ln8_1_fu_256_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten36_fu_110 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_242)) then
                if ((icmp_ln8_fu_250_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_102 <= select_ln10_2_fu_280_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_102 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_98 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_98 <= select_ln10_1_fu_363_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_240)) then 
                    k_fu_94 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    k_fu_94 <= add_ln12_reg_581;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                acc_V_reg_646 <= grp_fu_491_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln12_reg_581 <= add_ln12_fu_383_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln14_reg_572 <= icmp_ln14_fu_371_p2;
                icmp_ln16_reg_577 <= icmp_ln16_fu_377_p2;
                select_ln10_1_reg_566 <= select_ln10_1_fu_363_p3;
                select_ln10_reg_560 <= select_ln10_fu_355_p3;
                select_ln8_1_reg_553 <= select_ln8_1_fu_320_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln16_reg_586 <= add_ln16_fu_433_p2;
                add_ln16_reg_586_pp0_iter3_reg <= add_ln16_reg_586;
                add_ln16_reg_586_pp0_iter4_reg <= add_ln16_reg_586_pp0_iter3_reg;
                add_ln16_reg_586_pp0_iter5_reg <= add_ln16_reg_586_pp0_iter4_reg;
                add_ln16_reg_586_pp0_iter6_reg <= add_ln16_reg_586_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                c_addr_reg_641 <= zext_ln16_3_fu_483_p1(5 - 1 downto 0);
                icmp_ln14_reg_572_pp0_iter2_reg <= icmp_ln14_reg_572;
                icmp_ln14_reg_572_pp0_iter3_reg <= icmp_ln14_reg_572_pp0_iter2_reg;
                icmp_ln14_reg_572_pp0_iter4_reg <= icmp_ln14_reg_572_pp0_iter3_reg;
                icmp_ln14_reg_572_pp0_iter5_reg <= icmp_ln14_reg_572_pp0_iter4_reg;
                icmp_ln16_reg_577_pp0_iter2_reg <= icmp_ln16_reg_577;
                icmp_ln16_reg_577_pp0_iter3_reg <= icmp_ln16_reg_577_pp0_iter2_reg;
                icmp_ln16_reg_577_pp0_iter4_reg <= icmp_ln16_reg_577_pp0_iter3_reg;
                icmp_ln16_reg_577_pp0_iter5_reg <= icmp_ln16_reg_577_pp0_iter4_reg;
                icmp_ln16_reg_577_pp0_iter6_reg <= icmp_ln16_reg_577_pp0_iter5_reg;
                icmp_ln16_reg_577_pp0_iter7_reg <= icmp_ln16_reg_577_pp0_iter6_reg;
                select_ln10_reg_560_pp0_iter2_reg <= select_ln10_reg_560;
                select_ln8_1_reg_553_pp0_iter2_reg <= select_ln8_1_reg_553;
                tmp_1_reg_631 <= tmp_1_fu_460_p6;
                tmp_reg_626 <= tmp_fu_449_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_250_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_545 <= icmp_ln10_fu_265_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_0_address0 <= zext_ln12_fu_439_p1(2 - 1 downto 0);

    a_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            a_0_ce0 <= ap_const_logic_1;
        else 
            a_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_1_address0 <= zext_ln12_fu_439_p1(2 - 1 downto 0);

    a_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            a_1_ce0 <= ap_const_logic_1;
        else 
            a_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_2_address0 <= zext_ln12_fu_439_p1(2 - 1 downto 0);

    a_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            a_2_ce0 <= ap_const_logic_1;
        else 
            a_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_3_address0 <= ap_const_lv2_0;
    a_3_address1 <= ap_const_lv2_0;
    a_3_ce0 <= ap_const_logic_0;
    a_3_ce1 <= ap_const_logic_0;
    a_3_d0 <= ap_const_lv16_0;
    a_3_d1 <= ap_const_lv16_0;
    a_3_we0 <= ap_const_logic_0;
    a_3_we1 <= ap_const_logic_0;
    add_ln10_1_fu_274_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    add_ln10_fu_344_p2 <= std_logic_vector(unsigned(select_ln8_fu_313_p3) + unsigned(ap_const_lv3_1));
    add_ln12_fu_383_p2 <= std_logic_vector(unsigned(select_ln10_fu_355_p3) + unsigned(ap_const_lv3_1));
    add_ln16_fu_433_p2 <= std_logic_vector(unsigned(sub_ln16_fu_417_p2) + unsigned(zext_ln16_2_fu_430_p1));
    add_ln8_1_fu_256_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten36_load) + unsigned(ap_const_lv7_1));
    add_ln8_fu_307_p2 <= std_logic_vector(unsigned(i_fu_106) + unsigned(ap_const_lv2_1));
    and_ln8_fu_338_p2 <= (xor_ln8_fu_327_p2 and icmp_ln12_fu_332_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_240_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init)
    begin
                ap_condition_240 <= ((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_242_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_242 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln8_fu_250_p2)
    begin
        if (((icmp_ln8_fu_250_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_acc_V_1_load_assign_proc : process(ap_enable_reg_pp0_iter7, grp_fu_491_p3, ap_block_pp0_stage0, acc_V_1_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            ap_sig_allocacmp_acc_V_1_load <= grp_fu_491_p3;
        else 
            ap_sig_allocacmp_acc_V_1_load <= acc_V_1_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten36_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten36_fu_110)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten36_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten36_load <= indvar_flatten36_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load_1 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load_1 <= indvar_flatten_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_enable_reg_pp0_iter2, add_ln12_reg_581, ap_block_pp0_stage0, k_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_k_load <= add_ln12_reg_581;
        else 
            ap_sig_allocacmp_k_load <= k_fu_94;
        end if; 
    end process;

    b_0_address0 <= zext_ln16_1_fu_423_p1(3 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_1_address0 <= zext_ln16_1_fu_423_p1(3 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_2_address0 <= zext_ln16_1_fu_423_p1(3 - 1 downto 0);

    b_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            b_2_ce0 <= ap_const_logic_1;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_3_address0 <= zext_ln16_1_fu_423_p1(3 - 1 downto 0);

    b_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            b_3_ce0 <= ap_const_logic_1;
        else 
            b_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= c_addr_reg_641;

    c_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_d0 <= acc_V_reg_646;

    c_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, icmp_ln16_reg_577_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln16_reg_577_pp0_iter7_reg = ap_const_lv1_1))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_491_p2 <= 
        ap_const_lv16_0 when (icmp_ln14_reg_572_pp0_iter5_reg(0) = '1') else 
        ap_sig_allocacmp_acc_V_1_load;
    icmp_ln10_fu_265_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load_1 = ap_const_lv6_18) else "0";
    icmp_ln12_fu_332_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv3_4) else "0";
    icmp_ln14_fu_371_p2 <= "1" when (select_ln10_fu_355_p3 = ap_const_lv3_0) else "0";
    icmp_ln16_fu_377_p2 <= "1" when (select_ln10_fu_355_p3 = ap_const_lv3_3) else "0";
    icmp_ln8_fu_250_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten36_load = ap_const_lv7_48) else "0";
    or_ln10_fu_350_p2 <= (icmp_ln10_reg_545 or and_ln8_fu_338_p2);
    select_ln10_1_fu_363_p3 <= 
        add_ln10_fu_344_p2 when (and_ln8_fu_338_p2(0) = '1') else 
        select_ln8_fu_313_p3;
    select_ln10_2_fu_280_p3 <= 
        ap_const_lv6_1 when (icmp_ln10_fu_265_p2(0) = '1') else 
        add_ln10_1_fu_274_p2;
    select_ln10_fu_355_p3 <= 
        ap_const_lv3_0 when (or_ln10_fu_350_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    select_ln8_1_fu_320_p3 <= 
        add_ln8_fu_307_p2 when (icmp_ln10_reg_545(0) = '1') else 
        i_fu_106;
    select_ln8_fu_313_p3 <= 
        ap_const_lv3_0 when (icmp_ln10_reg_545(0) = '1') else 
        j_fu_98;
    sub_ln16_fu_417_p2 <= std_logic_vector(unsigned(tmp_2_fu_399_p3) - unsigned(zext_ln16_fu_413_p1));
    tmp_2_fu_399_p3 <= (select_ln8_1_reg_553 & ap_const_lv3_0);
    tmp_3_fu_406_p3 <= (select_ln8_1_reg_553 & ap_const_lv1_0);
    xor_ln8_fu_327_p2 <= (icmp_ln10_reg_545 xor ap_const_lv1_1);
    zext_ln12_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_reg_560),64));
    zext_ln16_1_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_1_reg_566),64));
    zext_ln16_2_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_1_reg_566),5));
    zext_ln16_3_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_reg_586_pp0_iter6_reg),64));
    zext_ln16_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_406_p3),5));
end behav;
