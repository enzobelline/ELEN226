// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmul_mmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.787500,HLS_SYN_LAT=78,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1405,HLS_SYN_LUT=838,HLS_VERSION=2022_1}" *)

module mmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_0,
        a_0_1,
        a_0_2,
        a_0_3,
        a_1_0,
        a_1_1,
        a_1_2,
        a_1_3,
        a_2_0,
        a_2_1,
        a_2_2,
        a_2_3,
        b_0_0,
        b_0_1,
        b_0_2,
        b_0_3,
        b_0_4,
        b_0_5,
        b_1_0,
        b_1_1,
        b_1_2,
        b_1_3,
        b_1_4,
        b_1_5,
        b_2_0,
        b_2_1,
        b_2_2,
        b_2_3,
        b_2_4,
        b_2_5,
        b_3_0,
        b_3_1,
        b_3_2,
        b_3_3,
        b_3_4,
        b_3_5,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] a_0_0;
input  [15:0] a_0_1;
input  [15:0] a_0_2;
input  [15:0] a_0_3;
input  [15:0] a_1_0;
input  [15:0] a_1_1;
input  [15:0] a_1_2;
input  [15:0] a_1_3;
input  [15:0] a_2_0;
input  [15:0] a_2_1;
input  [15:0] a_2_2;
input  [15:0] a_2_3;
input  [15:0] b_0_0;
input  [15:0] b_0_1;
input  [15:0] b_0_2;
input  [15:0] b_0_3;
input  [15:0] b_0_4;
input  [15:0] b_0_5;
input  [15:0] b_1_0;
input  [15:0] b_1_1;
input  [15:0] b_1_2;
input  [15:0] b_1_3;
input  [15:0] b_1_4;
input  [15:0] b_1_5;
input  [15:0] b_2_0;
input  [15:0] b_2_1;
input  [15:0] b_2_2;
input  [15:0] b_2_3;
input  [15:0] b_2_4;
input  [15:0] b_2_5;
input  [15:0] b_3_0;
input  [15:0] b_3_1;
input  [15:0] b_3_2;
input  [15:0] b_3_3;
input  [15:0] b_3_4;
input  [15:0] b_3_5;
output  [4:0] c_address0;
output   c_ce0;
output   c_we0;
output  [15:0] c_d0;

reg ap_idle;
reg c_ce0;
reg c_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln8_fu_737_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] a_0_0_read_reg_1182;
reg   [15:0] a_0_1_read_reg_1187;
reg   [15:0] a_0_2_read_reg_1192;
reg   [15:0] a_0_3_read_reg_1197;
reg   [15:0] a_1_0_read_reg_1202;
reg   [15:0] a_1_1_read_reg_1207;
reg   [15:0] a_1_2_read_reg_1212;
reg   [15:0] a_1_3_read_reg_1217;
reg   [15:0] a_2_0_read_reg_1222;
reg   [15:0] a_2_1_read_reg_1227;
reg   [15:0] a_2_2_read_reg_1232;
reg   [15:0] a_2_3_read_reg_1237;
reg   [15:0] b_0_0_read_reg_1242;
reg   [15:0] b_0_0_read_reg_1242_pp0_iter1_reg;
reg   [15:0] b_0_1_read_reg_1249;
reg   [15:0] b_0_1_read_reg_1249_pp0_iter1_reg;
reg   [15:0] b_0_2_read_reg_1255;
reg   [15:0] b_0_2_read_reg_1255_pp0_iter1_reg;
reg   [15:0] b_0_3_read_reg_1261;
reg   [15:0] b_0_3_read_reg_1261_pp0_iter1_reg;
reg   [15:0] b_0_4_read_reg_1267;
reg   [15:0] b_0_4_read_reg_1267_pp0_iter1_reg;
reg   [15:0] b_0_5_read_reg_1273;
reg   [15:0] b_0_5_read_reg_1273_pp0_iter1_reg;
reg   [15:0] b_1_0_read_reg_1279;
reg   [15:0] b_1_0_read_reg_1279_pp0_iter1_reg;
reg   [15:0] b_1_1_read_reg_1286;
reg   [15:0] b_1_1_read_reg_1286_pp0_iter1_reg;
reg   [15:0] b_1_2_read_reg_1292;
reg   [15:0] b_1_2_read_reg_1292_pp0_iter1_reg;
reg   [15:0] b_1_3_read_reg_1298;
reg   [15:0] b_1_3_read_reg_1298_pp0_iter1_reg;
reg   [15:0] b_1_4_read_reg_1304;
reg   [15:0] b_1_4_read_reg_1304_pp0_iter1_reg;
reg   [15:0] b_1_5_read_reg_1310;
reg   [15:0] b_1_5_read_reg_1310_pp0_iter1_reg;
reg   [15:0] b_2_0_read_reg_1316;
reg   [15:0] b_2_0_read_reg_1316_pp0_iter1_reg;
reg   [15:0] b_2_1_read_reg_1323;
reg   [15:0] b_2_1_read_reg_1323_pp0_iter1_reg;
reg   [15:0] b_2_2_read_reg_1329;
reg   [15:0] b_2_2_read_reg_1329_pp0_iter1_reg;
reg   [15:0] b_2_3_read_reg_1335;
reg   [15:0] b_2_3_read_reg_1335_pp0_iter1_reg;
reg   [15:0] b_2_4_read_reg_1341;
reg   [15:0] b_2_4_read_reg_1341_pp0_iter1_reg;
reg   [15:0] b_2_5_read_reg_1347;
reg   [15:0] b_2_5_read_reg_1347_pp0_iter1_reg;
reg   [15:0] b_3_0_read_reg_1353;
reg   [15:0] b_3_0_read_reg_1353_pp0_iter1_reg;
reg   [15:0] b_3_1_read_reg_1360;
reg   [15:0] b_3_1_read_reg_1360_pp0_iter1_reg;
reg   [15:0] b_3_2_read_reg_1366;
reg   [15:0] b_3_2_read_reg_1366_pp0_iter1_reg;
reg   [15:0] b_3_3_read_reg_1372;
reg   [15:0] b_3_3_read_reg_1372_pp0_iter1_reg;
reg   [15:0] b_3_4_read_reg_1378;
reg   [15:0] b_3_4_read_reg_1378_pp0_iter1_reg;
reg   [15:0] b_3_5_read_reg_1384;
reg   [15:0] b_3_5_read_reg_1384_pp0_iter1_reg;
wire   [0:0] icmp_ln10_fu_755_p2;
reg   [0:0] icmp_ln10_reg_1394;
reg   [0:0] icmp_ln10_reg_1394_pp0_iter1_reg;
wire   [0:0] and_ln8_fu_773_p2;
reg   [0:0] and_ln8_reg_1404;
reg   [0:0] and_ln8_reg_1404_pp0_iter1_reg;
wire   [2:0] select_ln10_fu_785_p3;
reg   [2:0] select_ln10_reg_1413;
reg   [2:0] select_ln10_reg_1413_pp0_iter1_reg;
reg   [2:0] select_ln10_reg_1413_pp0_iter2_reg;
reg   [2:0] j_load_reg_1424;
wire   [1:0] select_ln8_1_fu_839_p3;
reg   [1:0] select_ln8_1_reg_1432;
wire   [2:0] add_ln10_fu_846_p2;
reg   [2:0] add_ln10_reg_1438;
wire   [2:0] select_ln10_1_fu_852_p3;
reg   [2:0] select_ln10_1_reg_1446;
wire  signed [15:0] tmp_7_fu_886_p5;
reg  signed [15:0] tmp_7_reg_1451;
reg  signed [15:0] tmp_7_reg_1451_pp0_iter2_reg;
wire   [0:0] icmp_ln16_fu_898_p2;
reg   [0:0] icmp_ln16_reg_1456;
reg   [0:0] icmp_ln16_reg_1456_pp0_iter2_reg;
reg   [0:0] icmp_ln16_reg_1456_pp0_iter3_reg;
reg   [0:0] icmp_ln16_reg_1456_pp0_iter4_reg;
wire   [4:0] add_ln16_fu_1018_p2;
reg   [4:0] add_ln16_reg_1460;
reg   [4:0] add_ln16_reg_1460_pp0_iter3_reg;
reg   [4:0] add_ln16_reg_1460_pp0_iter4_reg;
wire  signed [15:0] tmp_8_fu_1096_p6;
reg  signed [15:0] tmp_8_reg_1465;
wire   [0:0] icmp_ln14_fu_1109_p2;
reg   [0:0] icmp_ln14_reg_1470;
reg   [0:0] icmp_ln14_reg_1470_pp0_iter4_reg;
wire   [15:0] grp_fu_476_p2;
reg   [15:0] mul_ln859_reg_1475;
wire   [63:0] zext_ln16_2_fu_1117_p1;
wire    ap_block_pp0_stage0;
reg   [15:0] acc_V_1_fu_156;
wire   [15:0] acc_V_fu_1128_p2;
wire    ap_loop_init;
reg   [2:0] k_fu_160;
wire   [2:0] add_ln12_fu_903_p2;
reg   [2:0] ap_sig_allocacmp_k_load;
reg   [2:0] j_fu_164;
reg   [5:0] indvar_flatten_fu_168;
wire   [5:0] select_ln10_6_fu_802_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load_1;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [1:0] i_fu_172;
reg   [6:0] indvar_flatten24_fu_176;
wire   [6:0] add_ln8_1_fu_743_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten24_load;
wire   [0:0] icmp_ln12_fu_767_p2;
wire   [0:0] xor_ln8_fu_761_p2;
wire   [0:0] or_ln10_fu_779_p2;
wire   [5:0] add_ln10_1_fu_796_p2;
wire   [1:0] add_ln8_fu_826_p2;
wire   [2:0] select_ln8_fu_832_p3;
wire   [15:0] tmp_4_fu_859_p6;
wire   [15:0] tmp_5_fu_868_p6;
wire   [15:0] tmp_6_fu_877_p6;
wire   [1:0] tmp_7_fu_886_p4;
wire   [2:0] tmp_s_fu_930_p3;
wire   [4:0] tmp_9_fu_923_p3;
wire   [4:0] zext_ln16_fu_937_p1;
wire   [15:0] tmp_fu_947_p8;
wire   [15:0] tmp_1_fu_964_p8;
wire   [15:0] tmp_2_fu_981_p8;
wire   [15:0] tmp_3_fu_998_p8;
wire   [4:0] sub_ln16_fu_941_p2;
wire   [4:0] zext_ln16_1_fu_1015_p1;
wire   [15:0] tmp_mid1_fu_1024_p8;
wire   [15:0] select_ln8_2_fu_958_p3;
wire   [15:0] tmp_1_mid1_fu_1042_p8;
wire   [15:0] select_ln8_3_fu_975_p3;
wire   [15:0] tmp_2_mid1_fu_1060_p8;
wire   [15:0] select_ln8_4_fu_992_p3;
wire   [15:0] tmp_3_mid1_fu_1078_p8;
wire   [15:0] select_ln8_5_fu_1009_p3;
wire   [15:0] tmp_8_fu_1096_p1;
wire   [15:0] tmp_8_fu_1096_p2;
wire   [15:0] tmp_8_fu_1096_p3;
wire   [15:0] tmp_8_fu_1096_p4;
wire   [15:0] acc_V_2_fu_1121_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_304;
reg    ap_condition_306;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mmul_mul_16s_16s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_16s_16s_16_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_8_reg_1465),
    .din1(tmp_7_reg_1451_pp0_iter2_reg),
    .ce(1'b1),
    .dout(grp_fu_476_p2)
);

mmul_mux_43_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_43_16_1_1_U2(
    .din0(a_0_0_read_reg_1182),
    .din1(a_0_1_read_reg_1187),
    .din2(a_0_2_read_reg_1192),
    .din3(a_0_3_read_reg_1197),
    .din4(select_ln10_reg_1413),
    .dout(tmp_4_fu_859_p6)
);

mmul_mux_43_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_43_16_1_1_U3(
    .din0(a_1_0_read_reg_1202),
    .din1(a_1_1_read_reg_1207),
    .din2(a_1_2_read_reg_1212),
    .din3(a_1_3_read_reg_1217),
    .din4(select_ln10_reg_1413),
    .dout(tmp_5_fu_868_p6)
);

mmul_mux_43_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_43_16_1_1_U4(
    .din0(a_2_0_read_reg_1222),
    .din1(a_2_1_read_reg_1227),
    .din2(a_2_2_read_reg_1232),
    .din3(a_2_3_read_reg_1237),
    .din4(select_ln10_reg_1413),
    .dout(tmp_6_fu_877_p6)
);

mmul_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_32_16_1_1_U5(
    .din0(tmp_4_fu_859_p6),
    .din1(tmp_5_fu_868_p6),
    .din2(tmp_6_fu_877_p6),
    .din3(tmp_7_fu_886_p4),
    .dout(tmp_7_fu_886_p5)
);

mmul_mux_63_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_63_16_1_1_U6(
    .din0(b_0_0_read_reg_1242_pp0_iter1_reg),
    .din1(b_0_1_read_reg_1249_pp0_iter1_reg),
    .din2(b_0_2_read_reg_1255_pp0_iter1_reg),
    .din3(b_0_3_read_reg_1261_pp0_iter1_reg),
    .din4(b_0_4_read_reg_1267_pp0_iter1_reg),
    .din5(b_0_5_read_reg_1273_pp0_iter1_reg),
    .din6(j_load_reg_1424),
    .dout(tmp_fu_947_p8)
);

mmul_mux_63_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_63_16_1_1_U7(
    .din0(b_1_0_read_reg_1279_pp0_iter1_reg),
    .din1(b_1_1_read_reg_1286_pp0_iter1_reg),
    .din2(b_1_2_read_reg_1292_pp0_iter1_reg),
    .din3(b_1_3_read_reg_1298_pp0_iter1_reg),
    .din4(b_1_4_read_reg_1304_pp0_iter1_reg),
    .din5(b_1_5_read_reg_1310_pp0_iter1_reg),
    .din6(j_load_reg_1424),
    .dout(tmp_1_fu_964_p8)
);

mmul_mux_63_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_63_16_1_1_U8(
    .din0(b_2_0_read_reg_1316_pp0_iter1_reg),
    .din1(b_2_1_read_reg_1323_pp0_iter1_reg),
    .din2(b_2_2_read_reg_1329_pp0_iter1_reg),
    .din3(b_2_3_read_reg_1335_pp0_iter1_reg),
    .din4(b_2_4_read_reg_1341_pp0_iter1_reg),
    .din5(b_2_5_read_reg_1347_pp0_iter1_reg),
    .din6(j_load_reg_1424),
    .dout(tmp_2_fu_981_p8)
);

mmul_mux_63_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_63_16_1_1_U9(
    .din0(b_3_0_read_reg_1353_pp0_iter1_reg),
    .din1(b_3_1_read_reg_1360_pp0_iter1_reg),
    .din2(b_3_2_read_reg_1366_pp0_iter1_reg),
    .din3(b_3_3_read_reg_1372_pp0_iter1_reg),
    .din4(b_3_4_read_reg_1378_pp0_iter1_reg),
    .din5(b_3_5_read_reg_1384_pp0_iter1_reg),
    .din6(j_load_reg_1424),
    .dout(tmp_3_fu_998_p8)
);

mmul_mux_63_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_63_16_1_1_U10(
    .din0(b_0_0_read_reg_1242_pp0_iter1_reg),
    .din1(b_0_1_read_reg_1249_pp0_iter1_reg),
    .din2(b_0_2_read_reg_1255_pp0_iter1_reg),
    .din3(b_0_3_read_reg_1261_pp0_iter1_reg),
    .din4(b_0_4_read_reg_1267_pp0_iter1_reg),
    .din5(b_0_5_read_reg_1273_pp0_iter1_reg),
    .din6(add_ln10_reg_1438),
    .dout(tmp_mid1_fu_1024_p8)
);

mmul_mux_63_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_63_16_1_1_U11(
    .din0(b_1_0_read_reg_1279_pp0_iter1_reg),
    .din1(b_1_1_read_reg_1286_pp0_iter1_reg),
    .din2(b_1_2_read_reg_1292_pp0_iter1_reg),
    .din3(b_1_3_read_reg_1298_pp0_iter1_reg),
    .din4(b_1_4_read_reg_1304_pp0_iter1_reg),
    .din5(b_1_5_read_reg_1310_pp0_iter1_reg),
    .din6(add_ln10_reg_1438),
    .dout(tmp_1_mid1_fu_1042_p8)
);

mmul_mux_63_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_63_16_1_1_U12(
    .din0(b_2_0_read_reg_1316_pp0_iter1_reg),
    .din1(b_2_1_read_reg_1323_pp0_iter1_reg),
    .din2(b_2_2_read_reg_1329_pp0_iter1_reg),
    .din3(b_2_3_read_reg_1335_pp0_iter1_reg),
    .din4(b_2_4_read_reg_1341_pp0_iter1_reg),
    .din5(b_2_5_read_reg_1347_pp0_iter1_reg),
    .din6(add_ln10_reg_1438),
    .dout(tmp_2_mid1_fu_1060_p8)
);

mmul_mux_63_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_63_16_1_1_U13(
    .din0(b_3_0_read_reg_1353_pp0_iter1_reg),
    .din1(b_3_1_read_reg_1360_pp0_iter1_reg),
    .din2(b_3_2_read_reg_1366_pp0_iter1_reg),
    .din3(b_3_3_read_reg_1372_pp0_iter1_reg),
    .din4(b_3_4_read_reg_1378_pp0_iter1_reg),
    .din5(b_3_5_read_reg_1384_pp0_iter1_reg),
    .din6(add_ln10_reg_1438),
    .dout(tmp_3_mid1_fu_1078_p8)
);

mmul_mux_43_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_43_16_1_1_U14(
    .din0(tmp_8_fu_1096_p1),
    .din1(tmp_8_fu_1096_p2),
    .din2(tmp_8_fu_1096_p3),
    .din3(tmp_8_fu_1096_p4),
    .din4(select_ln10_reg_1413_pp0_iter1_reg),
    .dout(tmp_8_fu_1096_p6)
);

mmul_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_304)) begin
            acc_V_1_fu_156 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            acc_V_1_fu_156 <= acc_V_fu_1128_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_172 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_172 <= select_ln8_1_fu_839_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_306)) begin
        if ((icmp_ln8_fu_737_p2 == 1'd0)) begin
            indvar_flatten24_fu_176 <= add_ln8_1_fu_743_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten24_fu_176 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_306)) begin
        if ((icmp_ln8_fu_737_p2 == 1'd0)) begin
            indvar_flatten_fu_168 <= select_ln10_6_fu_802_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_168 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_164 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_164 <= select_ln10_1_fu_852_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_160 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            k_fu_160 <= add_ln12_fu_903_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_0_0_read_reg_1182 <= a_0_0;
        a_0_1_read_reg_1187 <= a_0_1;
        a_0_2_read_reg_1192 <= a_0_2;
        a_0_3_read_reg_1197 <= a_0_3;
        a_1_0_read_reg_1202 <= a_1_0;
        a_1_1_read_reg_1207 <= a_1_1;
        a_1_2_read_reg_1212 <= a_1_2;
        a_1_3_read_reg_1217 <= a_1_3;
        a_2_0_read_reg_1222 <= a_2_0;
        a_2_1_read_reg_1227 <= a_2_1;
        a_2_2_read_reg_1232 <= a_2_2;
        a_2_3_read_reg_1237 <= a_2_3;
        add_ln10_reg_1438 <= add_ln10_fu_846_p2;
        and_ln8_reg_1404_pp0_iter1_reg <= and_ln8_reg_1404;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        b_0_0_read_reg_1242 <= b_0_0;
        b_0_0_read_reg_1242_pp0_iter1_reg <= b_0_0_read_reg_1242;
        b_0_1_read_reg_1249 <= b_0_1;
        b_0_1_read_reg_1249_pp0_iter1_reg <= b_0_1_read_reg_1249;
        b_0_2_read_reg_1255 <= b_0_2;
        b_0_2_read_reg_1255_pp0_iter1_reg <= b_0_2_read_reg_1255;
        b_0_3_read_reg_1261 <= b_0_3;
        b_0_3_read_reg_1261_pp0_iter1_reg <= b_0_3_read_reg_1261;
        b_0_4_read_reg_1267 <= b_0_4;
        b_0_4_read_reg_1267_pp0_iter1_reg <= b_0_4_read_reg_1267;
        b_0_5_read_reg_1273 <= b_0_5;
        b_0_5_read_reg_1273_pp0_iter1_reg <= b_0_5_read_reg_1273;
        b_1_0_read_reg_1279 <= b_1_0;
        b_1_0_read_reg_1279_pp0_iter1_reg <= b_1_0_read_reg_1279;
        b_1_1_read_reg_1286 <= b_1_1;
        b_1_1_read_reg_1286_pp0_iter1_reg <= b_1_1_read_reg_1286;
        b_1_2_read_reg_1292 <= b_1_2;
        b_1_2_read_reg_1292_pp0_iter1_reg <= b_1_2_read_reg_1292;
        b_1_3_read_reg_1298 <= b_1_3;
        b_1_3_read_reg_1298_pp0_iter1_reg <= b_1_3_read_reg_1298;
        b_1_4_read_reg_1304 <= b_1_4;
        b_1_4_read_reg_1304_pp0_iter1_reg <= b_1_4_read_reg_1304;
        b_1_5_read_reg_1310 <= b_1_5;
        b_1_5_read_reg_1310_pp0_iter1_reg <= b_1_5_read_reg_1310;
        b_2_0_read_reg_1316 <= b_2_0;
        b_2_0_read_reg_1316_pp0_iter1_reg <= b_2_0_read_reg_1316;
        b_2_1_read_reg_1323 <= b_2_1;
        b_2_1_read_reg_1323_pp0_iter1_reg <= b_2_1_read_reg_1323;
        b_2_2_read_reg_1329 <= b_2_2;
        b_2_2_read_reg_1329_pp0_iter1_reg <= b_2_2_read_reg_1329;
        b_2_3_read_reg_1335 <= b_2_3;
        b_2_3_read_reg_1335_pp0_iter1_reg <= b_2_3_read_reg_1335;
        b_2_4_read_reg_1341 <= b_2_4;
        b_2_4_read_reg_1341_pp0_iter1_reg <= b_2_4_read_reg_1341;
        b_2_5_read_reg_1347 <= b_2_5;
        b_2_5_read_reg_1347_pp0_iter1_reg <= b_2_5_read_reg_1347;
        b_3_0_read_reg_1353 <= b_3_0;
        b_3_0_read_reg_1353_pp0_iter1_reg <= b_3_0_read_reg_1353;
        b_3_1_read_reg_1360 <= b_3_1;
        b_3_1_read_reg_1360_pp0_iter1_reg <= b_3_1_read_reg_1360;
        b_3_2_read_reg_1366 <= b_3_2;
        b_3_2_read_reg_1366_pp0_iter1_reg <= b_3_2_read_reg_1366;
        b_3_3_read_reg_1372 <= b_3_3;
        b_3_3_read_reg_1372_pp0_iter1_reg <= b_3_3_read_reg_1372;
        b_3_4_read_reg_1378 <= b_3_4;
        b_3_4_read_reg_1378_pp0_iter1_reg <= b_3_4_read_reg_1378;
        b_3_5_read_reg_1384 <= b_3_5;
        b_3_5_read_reg_1384_pp0_iter1_reg <= b_3_5_read_reg_1384;
        icmp_ln10_reg_1394_pp0_iter1_reg <= icmp_ln10_reg_1394;
        icmp_ln16_reg_1456 <= icmp_ln16_fu_898_p2;
        j_load_reg_1424 <= j_fu_164;
        select_ln10_1_reg_1446 <= select_ln10_1_fu_852_p3;
        select_ln10_reg_1413_pp0_iter1_reg <= select_ln10_reg_1413;
        select_ln8_1_reg_1432 <= select_ln8_1_fu_839_p3;
        tmp_7_reg_1451 <= tmp_7_fu_886_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln16_reg_1460 <= add_ln16_fu_1018_p2;
        add_ln16_reg_1460_pp0_iter3_reg <= add_ln16_reg_1460;
        add_ln16_reg_1460_pp0_iter4_reg <= add_ln16_reg_1460_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln14_reg_1470 <= icmp_ln14_fu_1109_p2;
        icmp_ln14_reg_1470_pp0_iter4_reg <= icmp_ln14_reg_1470;
        icmp_ln16_reg_1456_pp0_iter2_reg <= icmp_ln16_reg_1456;
        icmp_ln16_reg_1456_pp0_iter3_reg <= icmp_ln16_reg_1456_pp0_iter2_reg;
        icmp_ln16_reg_1456_pp0_iter4_reg <= icmp_ln16_reg_1456_pp0_iter3_reg;
        mul_ln859_reg_1475 <= grp_fu_476_p2;
        select_ln10_reg_1413_pp0_iter2_reg <= select_ln10_reg_1413_pp0_iter1_reg;
        tmp_7_reg_1451_pp0_iter2_reg <= tmp_7_reg_1451;
        tmp_8_reg_1465 <= tmp_8_fu_1096_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_737_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln8_reg_1404 <= and_ln8_fu_773_p2;
        icmp_ln10_reg_1394 <= icmp_ln10_fu_755_p2;
        select_ln10_reg_1413 <= select_ln10_fu_785_p3;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_737_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten24_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten24_load = indvar_flatten24_fu_176;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_168;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load_1 = indvar_flatten_fu_168;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            ap_sig_allocacmp_k_load = 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_k_load = add_ln12_fu_903_p2;
        end else begin
            ap_sig_allocacmp_k_load = k_fu_160;
        end
    end else begin
        ap_sig_allocacmp_k_load = k_fu_160;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln16_reg_1456_pp0_iter4_reg == 1'd1))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_V_2_fu_1121_p3 = ((icmp_ln14_reg_1470_pp0_iter4_reg[0:0] == 1'b1) ? 16'd0 : acc_V_1_fu_156);

assign acc_V_fu_1128_p2 = (mul_ln859_reg_1475 + acc_V_2_fu_1121_p3);

assign add_ln10_1_fu_796_p2 = (ap_sig_allocacmp_indvar_flatten_load + 6'd1);

assign add_ln10_fu_846_p2 = (select_ln8_fu_832_p3 + 3'd1);

assign add_ln12_fu_903_p2 = (select_ln10_reg_1413 + 3'd1);

assign add_ln16_fu_1018_p2 = (sub_ln16_fu_941_p2 + zext_ln16_1_fu_1015_p1);

assign add_ln8_1_fu_743_p2 = (ap_sig_allocacmp_indvar_flatten24_load + 7'd1);

assign add_ln8_fu_826_p2 = (i_fu_172 + 2'd1);

assign and_ln8_fu_773_p2 = (xor_ln8_fu_761_p2 & icmp_ln12_fu_767_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_304 = ((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_306 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign c_address0 = zext_ln16_2_fu_1117_p1;

assign c_d0 = (mul_ln859_reg_1475 + acc_V_2_fu_1121_p3);

assign icmp_ln10_fu_755_p2 = ((ap_sig_allocacmp_indvar_flatten_load_1 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_767_p2 = ((ap_sig_allocacmp_k_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_1109_p2 = ((select_ln10_reg_1413_pp0_iter2_reg == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_898_p2 = ((select_ln10_reg_1413 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_737_p2 = ((ap_sig_allocacmp_indvar_flatten24_load == 7'd72) ? 1'b1 : 1'b0);

assign or_ln10_fu_779_p2 = (icmp_ln10_fu_755_p2 | and_ln8_fu_773_p2);

assign select_ln10_1_fu_852_p3 = ((and_ln8_reg_1404[0:0] == 1'b1) ? add_ln10_fu_846_p2 : select_ln8_fu_832_p3);

assign select_ln10_6_fu_802_p3 = ((icmp_ln10_fu_755_p2[0:0] == 1'b1) ? 6'd1 : add_ln10_1_fu_796_p2);

assign select_ln10_fu_785_p3 = ((or_ln10_fu_779_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_k_load);

assign select_ln8_1_fu_839_p3 = ((icmp_ln10_reg_1394[0:0] == 1'b1) ? add_ln8_fu_826_p2 : i_fu_172);

assign select_ln8_2_fu_958_p3 = ((icmp_ln10_reg_1394_pp0_iter1_reg[0:0] == 1'b1) ? b_0_0_read_reg_1242_pp0_iter1_reg : tmp_fu_947_p8);

assign select_ln8_3_fu_975_p3 = ((icmp_ln10_reg_1394_pp0_iter1_reg[0:0] == 1'b1) ? b_1_0_read_reg_1279_pp0_iter1_reg : tmp_1_fu_964_p8);

assign select_ln8_4_fu_992_p3 = ((icmp_ln10_reg_1394_pp0_iter1_reg[0:0] == 1'b1) ? b_2_0_read_reg_1316_pp0_iter1_reg : tmp_2_fu_981_p8);

assign select_ln8_5_fu_1009_p3 = ((icmp_ln10_reg_1394_pp0_iter1_reg[0:0] == 1'b1) ? b_3_0_read_reg_1353_pp0_iter1_reg : tmp_3_fu_998_p8);

assign select_ln8_fu_832_p3 = ((icmp_ln10_reg_1394[0:0] == 1'b1) ? 3'd0 : j_fu_164);

assign sub_ln16_fu_941_p2 = (tmp_9_fu_923_p3 - zext_ln16_fu_937_p1);

assign tmp_7_fu_886_p4 = ((icmp_ln10_reg_1394[0:0] == 1'b1) ? add_ln8_fu_826_p2 : i_fu_172);

assign tmp_8_fu_1096_p1 = ((and_ln8_reg_1404_pp0_iter1_reg[0:0] == 1'b1) ? tmp_mid1_fu_1024_p8 : select_ln8_2_fu_958_p3);

assign tmp_8_fu_1096_p2 = ((and_ln8_reg_1404_pp0_iter1_reg[0:0] == 1'b1) ? tmp_1_mid1_fu_1042_p8 : select_ln8_3_fu_975_p3);

assign tmp_8_fu_1096_p3 = ((and_ln8_reg_1404_pp0_iter1_reg[0:0] == 1'b1) ? tmp_2_mid1_fu_1060_p8 : select_ln8_4_fu_992_p3);

assign tmp_8_fu_1096_p4 = ((and_ln8_reg_1404_pp0_iter1_reg[0:0] == 1'b1) ? tmp_3_mid1_fu_1078_p8 : select_ln8_5_fu_1009_p3);

assign tmp_9_fu_923_p3 = {{select_ln8_1_reg_1432}, {3'd0}};

assign tmp_s_fu_930_p3 = {{select_ln8_1_reg_1432}, {1'd0}};

assign xor_ln8_fu_761_p2 = (icmp_ln10_fu_755_p2 ^ 1'd1);

assign zext_ln16_1_fu_1015_p1 = select_ln10_1_reg_1446;

assign zext_ln16_2_fu_1117_p1 = add_ln16_reg_1460_pp0_iter4_reg;

assign zext_ln16_fu_937_p1 = tmp_s_fu_930_p3;

endmodule //mmul
