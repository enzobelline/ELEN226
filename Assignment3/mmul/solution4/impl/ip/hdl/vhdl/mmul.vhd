-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_0_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_0_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_0_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_1_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_1_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_1_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_1_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_2_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_2_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_2_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_2_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_0_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_0_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_0_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_0_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_0_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_0_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_1_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_1_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_1_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_1_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_1_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_1_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_2_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_2_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_2_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_2_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_2_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_2_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_3_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_3_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_3_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_3_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_3_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_3_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of mmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mmul_mmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.787500,HLS_SYN_LAT=78,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1405,HLS_SYN_LUT=838,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln8_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal a_0_0_read_reg_1182 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_0_1_read_reg_1187 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_0_2_read_reg_1192 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_0_3_read_reg_1197 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_1_0_read_reg_1202 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_1_1_read_reg_1207 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_1_2_read_reg_1212 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_1_3_read_reg_1217 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_2_0_read_reg_1222 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_2_1_read_reg_1227 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_2_2_read_reg_1232 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_2_3_read_reg_1237 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_0_read_reg_1242 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_0_read_reg_1242_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_1_read_reg_1249 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_1_read_reg_1249_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_2_read_reg_1255 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_2_read_reg_1255_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_3_read_reg_1261 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_3_read_reg_1261_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_4_read_reg_1267 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_4_read_reg_1267_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_5_read_reg_1273 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_5_read_reg_1273_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_0_read_reg_1279 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_0_read_reg_1279_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_1_read_reg_1286 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_1_read_reg_1286_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_2_read_reg_1292 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_2_read_reg_1292_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_3_read_reg_1298 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_3_read_reg_1298_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_4_read_reg_1304 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_4_read_reg_1304_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_5_read_reg_1310 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_5_read_reg_1310_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_0_read_reg_1316 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_0_read_reg_1316_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_1_read_reg_1323 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_1_read_reg_1323_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_2_read_reg_1329 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_2_read_reg_1329_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_3_read_reg_1335 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_3_read_reg_1335_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_4_read_reg_1341 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_4_read_reg_1341_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_5_read_reg_1347 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_5_read_reg_1347_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_0_read_reg_1353 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_0_read_reg_1353_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_1_read_reg_1360 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_1_read_reg_1360_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_2_read_reg_1366 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_2_read_reg_1366_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_3_read_reg_1372 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_3_read_reg_1372_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_4_read_reg_1378 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_4_read_reg_1378_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_5_read_reg_1384 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_5_read_reg_1384_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln10_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1394 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1394_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_reg_1404 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_reg_1404_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_fu_785_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_reg_1413 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_reg_1413_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_reg_1413_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal j_load_reg_1424 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln8_1_fu_839_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln8_1_reg_1432 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln10_fu_846_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln10_reg_1438 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_1_fu_852_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln10_1_reg_1446 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_886_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1451 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1451_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln16_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1456 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1456_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1456_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1456_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln16_fu_1018_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_1460 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_1460_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_1460_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_1096_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_1465 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln14_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_1470 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_1470_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_476_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln859_reg_1475 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_2_fu_1117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal acc_V_1_fu_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_fu_1128_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_160 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln12_fu_903_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (2 downto 0);
    signal j_fu_164 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_168 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln10_6_fu_802_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_172 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten24_fu_176 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_1_fu_743_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten24_load : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln12_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_1_fu_796_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln8_fu_826_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln8_fu_832_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_859_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_868_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_877_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_886_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_930_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_923_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_fu_937_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_947_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_964_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_981_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_998_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln16_fu_941_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_1_fu_1015_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_fu_1024_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln8_2_fu_958_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_mid1_fu_1042_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln8_3_fu_975_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_mid1_fu_1060_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln8_4_fu_992_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_mid1_fu_1078_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln8_5_fu_1009_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_1096_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_1096_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_1096_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_1096_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_2_fu_1121_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_304 : BOOLEAN;
    signal ap_condition_306 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component mmul_mul_16s_16s_16_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mmul_mux_43_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mmul_mux_32_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mmul_mux_63_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mmul_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mul_16s_16s_16_2_1_U1 : component mmul_mul_16s_16s_16_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_reg_1465,
        din1 => tmp_7_reg_1451_pp0_iter2_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_476_p2);

    mux_43_16_1_1_U2 : component mmul_mux_43_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => a_0_0_read_reg_1182,
        din1 => a_0_1_read_reg_1187,
        din2 => a_0_2_read_reg_1192,
        din3 => a_0_3_read_reg_1197,
        din4 => select_ln10_reg_1413,
        dout => tmp_4_fu_859_p6);

    mux_43_16_1_1_U3 : component mmul_mux_43_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => a_1_0_read_reg_1202,
        din1 => a_1_1_read_reg_1207,
        din2 => a_1_2_read_reg_1212,
        din3 => a_1_3_read_reg_1217,
        din4 => select_ln10_reg_1413,
        dout => tmp_5_fu_868_p6);

    mux_43_16_1_1_U4 : component mmul_mux_43_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => a_2_0_read_reg_1222,
        din1 => a_2_1_read_reg_1227,
        din2 => a_2_2_read_reg_1232,
        din3 => a_2_3_read_reg_1237,
        din4 => select_ln10_reg_1413,
        dout => tmp_6_fu_877_p6);

    mux_32_16_1_1_U5 : component mmul_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_4_fu_859_p6,
        din1 => tmp_5_fu_868_p6,
        din2 => tmp_6_fu_877_p6,
        din3 => tmp_7_fu_886_p4,
        dout => tmp_7_fu_886_p5);

    mux_63_16_1_1_U6 : component mmul_mux_63_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => b_0_0_read_reg_1242_pp0_iter1_reg,
        din1 => b_0_1_read_reg_1249_pp0_iter1_reg,
        din2 => b_0_2_read_reg_1255_pp0_iter1_reg,
        din3 => b_0_3_read_reg_1261_pp0_iter1_reg,
        din4 => b_0_4_read_reg_1267_pp0_iter1_reg,
        din5 => b_0_5_read_reg_1273_pp0_iter1_reg,
        din6 => j_load_reg_1424,
        dout => tmp_fu_947_p8);

    mux_63_16_1_1_U7 : component mmul_mux_63_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => b_1_0_read_reg_1279_pp0_iter1_reg,
        din1 => b_1_1_read_reg_1286_pp0_iter1_reg,
        din2 => b_1_2_read_reg_1292_pp0_iter1_reg,
        din3 => b_1_3_read_reg_1298_pp0_iter1_reg,
        din4 => b_1_4_read_reg_1304_pp0_iter1_reg,
        din5 => b_1_5_read_reg_1310_pp0_iter1_reg,
        din6 => j_load_reg_1424,
        dout => tmp_1_fu_964_p8);

    mux_63_16_1_1_U8 : component mmul_mux_63_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => b_2_0_read_reg_1316_pp0_iter1_reg,
        din1 => b_2_1_read_reg_1323_pp0_iter1_reg,
        din2 => b_2_2_read_reg_1329_pp0_iter1_reg,
        din3 => b_2_3_read_reg_1335_pp0_iter1_reg,
        din4 => b_2_4_read_reg_1341_pp0_iter1_reg,
        din5 => b_2_5_read_reg_1347_pp0_iter1_reg,
        din6 => j_load_reg_1424,
        dout => tmp_2_fu_981_p8);

    mux_63_16_1_1_U9 : component mmul_mux_63_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => b_3_0_read_reg_1353_pp0_iter1_reg,
        din1 => b_3_1_read_reg_1360_pp0_iter1_reg,
        din2 => b_3_2_read_reg_1366_pp0_iter1_reg,
        din3 => b_3_3_read_reg_1372_pp0_iter1_reg,
        din4 => b_3_4_read_reg_1378_pp0_iter1_reg,
        din5 => b_3_5_read_reg_1384_pp0_iter1_reg,
        din6 => j_load_reg_1424,
        dout => tmp_3_fu_998_p8);

    mux_63_16_1_1_U10 : component mmul_mux_63_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => b_0_0_read_reg_1242_pp0_iter1_reg,
        din1 => b_0_1_read_reg_1249_pp0_iter1_reg,
        din2 => b_0_2_read_reg_1255_pp0_iter1_reg,
        din3 => b_0_3_read_reg_1261_pp0_iter1_reg,
        din4 => b_0_4_read_reg_1267_pp0_iter1_reg,
        din5 => b_0_5_read_reg_1273_pp0_iter1_reg,
        din6 => add_ln10_reg_1438,
        dout => tmp_mid1_fu_1024_p8);

    mux_63_16_1_1_U11 : component mmul_mux_63_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => b_1_0_read_reg_1279_pp0_iter1_reg,
        din1 => b_1_1_read_reg_1286_pp0_iter1_reg,
        din2 => b_1_2_read_reg_1292_pp0_iter1_reg,
        din3 => b_1_3_read_reg_1298_pp0_iter1_reg,
        din4 => b_1_4_read_reg_1304_pp0_iter1_reg,
        din5 => b_1_5_read_reg_1310_pp0_iter1_reg,
        din6 => add_ln10_reg_1438,
        dout => tmp_1_mid1_fu_1042_p8);

    mux_63_16_1_1_U12 : component mmul_mux_63_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => b_2_0_read_reg_1316_pp0_iter1_reg,
        din1 => b_2_1_read_reg_1323_pp0_iter1_reg,
        din2 => b_2_2_read_reg_1329_pp0_iter1_reg,
        din3 => b_2_3_read_reg_1335_pp0_iter1_reg,
        din4 => b_2_4_read_reg_1341_pp0_iter1_reg,
        din5 => b_2_5_read_reg_1347_pp0_iter1_reg,
        din6 => add_ln10_reg_1438,
        dout => tmp_2_mid1_fu_1060_p8);

    mux_63_16_1_1_U13 : component mmul_mux_63_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => b_3_0_read_reg_1353_pp0_iter1_reg,
        din1 => b_3_1_read_reg_1360_pp0_iter1_reg,
        din2 => b_3_2_read_reg_1366_pp0_iter1_reg,
        din3 => b_3_3_read_reg_1372_pp0_iter1_reg,
        din4 => b_3_4_read_reg_1378_pp0_iter1_reg,
        din5 => b_3_5_read_reg_1384_pp0_iter1_reg,
        din6 => add_ln10_reg_1438,
        dout => tmp_3_mid1_fu_1078_p8);

    mux_43_16_1_1_U14 : component mmul_mux_43_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_8_fu_1096_p1,
        din1 => tmp_8_fu_1096_p2,
        din2 => tmp_8_fu_1096_p3,
        din3 => tmp_8_fu_1096_p4,
        din4 => select_ln10_reg_1413_pp0_iter1_reg,
        dout => tmp_8_fu_1096_p6);

    flow_control_loop_pipe_U : component mmul_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    acc_V_1_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_304)) then 
                    acc_V_1_fu_156 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    acc_V_1_fu_156 <= acc_V_fu_1128_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_172 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_172 <= select_ln8_1_fu_839_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten24_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_306)) then
                if ((icmp_ln8_fu_737_p2 = ap_const_lv1_0)) then 
                    indvar_flatten24_fu_176 <= add_ln8_1_fu_743_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten24_fu_176 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_306)) then
                if ((icmp_ln8_fu_737_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_168 <= select_ln10_6_fu_802_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_168 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_164 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_164 <= select_ln10_1_fu_852_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_160 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_160 <= add_ln12_fu_903_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_0_0_read_reg_1182 <= a_0_0;
                a_0_1_read_reg_1187 <= a_0_1;
                a_0_2_read_reg_1192 <= a_0_2;
                a_0_3_read_reg_1197 <= a_0_3;
                a_1_0_read_reg_1202 <= a_1_0;
                a_1_1_read_reg_1207 <= a_1_1;
                a_1_2_read_reg_1212 <= a_1_2;
                a_1_3_read_reg_1217 <= a_1_3;
                a_2_0_read_reg_1222 <= a_2_0;
                a_2_1_read_reg_1227 <= a_2_1;
                a_2_2_read_reg_1232 <= a_2_2;
                a_2_3_read_reg_1237 <= a_2_3;
                add_ln10_reg_1438 <= add_ln10_fu_846_p2;
                and_ln8_reg_1404_pp0_iter1_reg <= and_ln8_reg_1404;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                b_0_0_read_reg_1242 <= b_0_0;
                b_0_0_read_reg_1242_pp0_iter1_reg <= b_0_0_read_reg_1242;
                b_0_1_read_reg_1249 <= b_0_1;
                b_0_1_read_reg_1249_pp0_iter1_reg <= b_0_1_read_reg_1249;
                b_0_2_read_reg_1255 <= b_0_2;
                b_0_2_read_reg_1255_pp0_iter1_reg <= b_0_2_read_reg_1255;
                b_0_3_read_reg_1261 <= b_0_3;
                b_0_3_read_reg_1261_pp0_iter1_reg <= b_0_3_read_reg_1261;
                b_0_4_read_reg_1267 <= b_0_4;
                b_0_4_read_reg_1267_pp0_iter1_reg <= b_0_4_read_reg_1267;
                b_0_5_read_reg_1273 <= b_0_5;
                b_0_5_read_reg_1273_pp0_iter1_reg <= b_0_5_read_reg_1273;
                b_1_0_read_reg_1279 <= b_1_0;
                b_1_0_read_reg_1279_pp0_iter1_reg <= b_1_0_read_reg_1279;
                b_1_1_read_reg_1286 <= b_1_1;
                b_1_1_read_reg_1286_pp0_iter1_reg <= b_1_1_read_reg_1286;
                b_1_2_read_reg_1292 <= b_1_2;
                b_1_2_read_reg_1292_pp0_iter1_reg <= b_1_2_read_reg_1292;
                b_1_3_read_reg_1298 <= b_1_3;
                b_1_3_read_reg_1298_pp0_iter1_reg <= b_1_3_read_reg_1298;
                b_1_4_read_reg_1304 <= b_1_4;
                b_1_4_read_reg_1304_pp0_iter1_reg <= b_1_4_read_reg_1304;
                b_1_5_read_reg_1310 <= b_1_5;
                b_1_5_read_reg_1310_pp0_iter1_reg <= b_1_5_read_reg_1310;
                b_2_0_read_reg_1316 <= b_2_0;
                b_2_0_read_reg_1316_pp0_iter1_reg <= b_2_0_read_reg_1316;
                b_2_1_read_reg_1323 <= b_2_1;
                b_2_1_read_reg_1323_pp0_iter1_reg <= b_2_1_read_reg_1323;
                b_2_2_read_reg_1329 <= b_2_2;
                b_2_2_read_reg_1329_pp0_iter1_reg <= b_2_2_read_reg_1329;
                b_2_3_read_reg_1335 <= b_2_3;
                b_2_3_read_reg_1335_pp0_iter1_reg <= b_2_3_read_reg_1335;
                b_2_4_read_reg_1341 <= b_2_4;
                b_2_4_read_reg_1341_pp0_iter1_reg <= b_2_4_read_reg_1341;
                b_2_5_read_reg_1347 <= b_2_5;
                b_2_5_read_reg_1347_pp0_iter1_reg <= b_2_5_read_reg_1347;
                b_3_0_read_reg_1353 <= b_3_0;
                b_3_0_read_reg_1353_pp0_iter1_reg <= b_3_0_read_reg_1353;
                b_3_1_read_reg_1360 <= b_3_1;
                b_3_1_read_reg_1360_pp0_iter1_reg <= b_3_1_read_reg_1360;
                b_3_2_read_reg_1366 <= b_3_2;
                b_3_2_read_reg_1366_pp0_iter1_reg <= b_3_2_read_reg_1366;
                b_3_3_read_reg_1372 <= b_3_3;
                b_3_3_read_reg_1372_pp0_iter1_reg <= b_3_3_read_reg_1372;
                b_3_4_read_reg_1378 <= b_3_4;
                b_3_4_read_reg_1378_pp0_iter1_reg <= b_3_4_read_reg_1378;
                b_3_5_read_reg_1384 <= b_3_5;
                b_3_5_read_reg_1384_pp0_iter1_reg <= b_3_5_read_reg_1384;
                icmp_ln10_reg_1394_pp0_iter1_reg <= icmp_ln10_reg_1394;
                icmp_ln16_reg_1456 <= icmp_ln16_fu_898_p2;
                j_load_reg_1424 <= j_fu_164;
                select_ln10_1_reg_1446 <= select_ln10_1_fu_852_p3;
                select_ln10_reg_1413_pp0_iter1_reg <= select_ln10_reg_1413;
                select_ln8_1_reg_1432 <= select_ln8_1_fu_839_p3;
                tmp_7_reg_1451 <= tmp_7_fu_886_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln16_reg_1460 <= add_ln16_fu_1018_p2;
                add_ln16_reg_1460_pp0_iter3_reg <= add_ln16_reg_1460;
                add_ln16_reg_1460_pp0_iter4_reg <= add_ln16_reg_1460_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln14_reg_1470 <= icmp_ln14_fu_1109_p2;
                icmp_ln14_reg_1470_pp0_iter4_reg <= icmp_ln14_reg_1470;
                icmp_ln16_reg_1456_pp0_iter2_reg <= icmp_ln16_reg_1456;
                icmp_ln16_reg_1456_pp0_iter3_reg <= icmp_ln16_reg_1456_pp0_iter2_reg;
                icmp_ln16_reg_1456_pp0_iter4_reg <= icmp_ln16_reg_1456_pp0_iter3_reg;
                mul_ln859_reg_1475 <= grp_fu_476_p2;
                select_ln10_reg_1413_pp0_iter2_reg <= select_ln10_reg_1413_pp0_iter1_reg;
                tmp_7_reg_1451_pp0_iter2_reg <= tmp_7_reg_1451;
                tmp_8_reg_1465 <= tmp_8_fu_1096_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_737_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln8_reg_1404 <= and_ln8_fu_773_p2;
                icmp_ln10_reg_1394 <= icmp_ln10_fu_755_p2;
                select_ln10_reg_1413 <= select_ln10_fu_785_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_V_2_fu_1121_p3 <= 
        ap_const_lv16_0 when (icmp_ln14_reg_1470_pp0_iter4_reg(0) = '1') else 
        acc_V_1_fu_156;
    acc_V_fu_1128_p2 <= std_logic_vector(unsigned(mul_ln859_reg_1475) + unsigned(acc_V_2_fu_1121_p3));
    add_ln10_1_fu_796_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    add_ln10_fu_846_p2 <= std_logic_vector(unsigned(select_ln8_fu_832_p3) + unsigned(ap_const_lv3_1));
    add_ln12_fu_903_p2 <= std_logic_vector(unsigned(select_ln10_reg_1413) + unsigned(ap_const_lv3_1));
    add_ln16_fu_1018_p2 <= std_logic_vector(unsigned(sub_ln16_fu_941_p2) + unsigned(zext_ln16_1_fu_1015_p1));
    add_ln8_1_fu_743_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten24_load) + unsigned(ap_const_lv7_1));
    add_ln8_fu_826_p2 <= std_logic_vector(unsigned(i_fu_172) + unsigned(ap_const_lv2_1));
    and_ln8_fu_773_p2 <= (xor_ln8_fu_761_p2 and icmp_ln12_fu_767_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_304_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init)
    begin
                ap_condition_304 <= ((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_306_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_306 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln8_fu_737_p2)
    begin
        if (((icmp_ln8_fu_737_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten24_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten24_fu_176)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten24_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten24_load <= indvar_flatten24_fu_176;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_168)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_168;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_168)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load_1 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load_1 <= indvar_flatten_fu_168;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_loop_init, k_fu_160, add_ln12_fu_903_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_sig_allocacmp_k_load <= ap_const_lv3_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_k_load <= add_ln12_fu_903_p2;
            else 
                ap_sig_allocacmp_k_load <= k_fu_160;
            end if;
        else 
            ap_sig_allocacmp_k_load <= k_fu_160;
        end if; 
    end process;

    c_address0 <= zext_ln16_2_fu_1117_p1(5 - 1 downto 0);

    c_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_d0 <= std_logic_vector(unsigned(mul_ln859_reg_1475) + unsigned(acc_V_2_fu_1121_p3));

    c_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, icmp_ln16_reg_1456_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln16_reg_1456_pp0_iter4_reg = ap_const_lv1_1))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln10_fu_755_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load_1 = ap_const_lv6_18) else "0";
    icmp_ln12_fu_767_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv3_4) else "0";
    icmp_ln14_fu_1109_p2 <= "1" when (select_ln10_reg_1413_pp0_iter2_reg = ap_const_lv3_0) else "0";
    icmp_ln16_fu_898_p2 <= "1" when (select_ln10_reg_1413 = ap_const_lv3_3) else "0";
    icmp_ln8_fu_737_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten24_load = ap_const_lv7_48) else "0";
    or_ln10_fu_779_p2 <= (icmp_ln10_fu_755_p2 or and_ln8_fu_773_p2);
    select_ln10_1_fu_852_p3 <= 
        add_ln10_fu_846_p2 when (and_ln8_reg_1404(0) = '1') else 
        select_ln8_fu_832_p3;
    select_ln10_6_fu_802_p3 <= 
        ap_const_lv6_1 when (icmp_ln10_fu_755_p2(0) = '1') else 
        add_ln10_1_fu_796_p2;
    select_ln10_fu_785_p3 <= 
        ap_const_lv3_0 when (or_ln10_fu_779_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    select_ln8_1_fu_839_p3 <= 
        add_ln8_fu_826_p2 when (icmp_ln10_reg_1394(0) = '1') else 
        i_fu_172;
    select_ln8_2_fu_958_p3 <= 
        b_0_0_read_reg_1242_pp0_iter1_reg when (icmp_ln10_reg_1394_pp0_iter1_reg(0) = '1') else 
        tmp_fu_947_p8;
    select_ln8_3_fu_975_p3 <= 
        b_1_0_read_reg_1279_pp0_iter1_reg when (icmp_ln10_reg_1394_pp0_iter1_reg(0) = '1') else 
        tmp_1_fu_964_p8;
    select_ln8_4_fu_992_p3 <= 
        b_2_0_read_reg_1316_pp0_iter1_reg when (icmp_ln10_reg_1394_pp0_iter1_reg(0) = '1') else 
        tmp_2_fu_981_p8;
    select_ln8_5_fu_1009_p3 <= 
        b_3_0_read_reg_1353_pp0_iter1_reg when (icmp_ln10_reg_1394_pp0_iter1_reg(0) = '1') else 
        tmp_3_fu_998_p8;
    select_ln8_fu_832_p3 <= 
        ap_const_lv3_0 when (icmp_ln10_reg_1394(0) = '1') else 
        j_fu_164;
    sub_ln16_fu_941_p2 <= std_logic_vector(unsigned(tmp_9_fu_923_p3) - unsigned(zext_ln16_fu_937_p1));
    tmp_7_fu_886_p4 <= 
        add_ln8_fu_826_p2 when (icmp_ln10_reg_1394(0) = '1') else 
        i_fu_172;
    tmp_8_fu_1096_p1 <= 
        tmp_mid1_fu_1024_p8 when (and_ln8_reg_1404_pp0_iter1_reg(0) = '1') else 
        select_ln8_2_fu_958_p3;
    tmp_8_fu_1096_p2 <= 
        tmp_1_mid1_fu_1042_p8 when (and_ln8_reg_1404_pp0_iter1_reg(0) = '1') else 
        select_ln8_3_fu_975_p3;
    tmp_8_fu_1096_p3 <= 
        tmp_2_mid1_fu_1060_p8 when (and_ln8_reg_1404_pp0_iter1_reg(0) = '1') else 
        select_ln8_4_fu_992_p3;
    tmp_8_fu_1096_p4 <= 
        tmp_3_mid1_fu_1078_p8 when (and_ln8_reg_1404_pp0_iter1_reg(0) = '1') else 
        select_ln8_5_fu_1009_p3;
    tmp_9_fu_923_p3 <= (select_ln8_1_reg_1432 & ap_const_lv3_0);
    tmp_s_fu_930_p3 <= (select_ln8_1_reg_1432 & ap_const_lv1_0);
    xor_ln8_fu_761_p2 <= (icmp_ln10_fu_755_p2 xor ap_const_lv1_1);
    zext_ln16_1_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_1_reg_1446),5));
    zext_ln16_2_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_reg_1460_pp0_iter4_reg),64));
    zext_ln16_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_930_p3),5));
end behav;
