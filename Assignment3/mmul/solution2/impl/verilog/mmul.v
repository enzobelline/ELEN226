// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmul_mmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.787500,HLS_SYN_LAT=81,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=301,HLS_SYN_LUT=404,HLS_VERSION=2022_1}" *)

module mmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [4:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [4:0] c_address0;
output   c_ce0;
output   c_we0;
output  [15:0] c_d0;

reg ap_idle;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg c_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln8_fu_173_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln10_fu_188_p2;
reg   [0:0] icmp_ln10_reg_493;
wire   [1:0] select_ln8_1_fu_243_p3;
reg   [1:0] select_ln8_1_reg_501;
wire   [2:0] select_ln10_fu_286_p3;
reg   [2:0] select_ln10_reg_507;
wire   [1:0] trunc_ln10_fu_294_p1;
reg   [1:0] trunc_ln10_reg_512;
wire   [2:0] select_ln10_1_fu_298_p3;
reg   [2:0] select_ln10_1_reg_517;
wire   [3:0] add_ln1317_fu_310_p2;
reg   [3:0] add_ln1317_reg_522;
reg   [3:0] add_ln1317_reg_522_pp0_iter2_reg;
wire   [0:0] icmp_ln14_fu_316_p2;
reg   [0:0] icmp_ln14_reg_527;
reg   [0:0] icmp_ln14_reg_527_pp0_iter2_reg;
reg   [0:0] icmp_ln14_reg_527_pp0_iter3_reg;
reg   [0:0] icmp_ln14_reg_527_pp0_iter4_reg;
reg   [0:0] icmp_ln14_reg_527_pp0_iter5_reg;
wire   [0:0] icmp_ln16_fu_322_p2;
reg   [0:0] icmp_ln16_reg_532;
reg   [0:0] icmp_ln16_reg_532_pp0_iter2_reg;
reg   [0:0] icmp_ln16_reg_532_pp0_iter3_reg;
reg   [0:0] icmp_ln16_reg_532_pp0_iter4_reg;
reg   [0:0] icmp_ln16_reg_532_pp0_iter5_reg;
reg   [0:0] icmp_ln16_reg_532_pp0_iter6_reg;
reg   [0:0] icmp_ln16_reg_532_pp0_iter7_reg;
wire   [2:0] add_ln12_fu_328_p2;
reg   [2:0] add_ln12_reg_536;
wire   [4:0] add_ln16_fu_371_p2;
reg   [4:0] add_ln16_reg_541;
reg   [4:0] add_ln16_reg_541_pp0_iter3_reg;
reg   [4:0] add_ln16_reg_541_pp0_iter4_reg;
reg   [4:0] add_ln16_reg_541_pp0_iter5_reg;
reg   [4:0] add_ln16_reg_541_pp0_iter6_reg;
wire   [4:0] add_ln1319_fu_401_p2;
reg   [4:0] add_ln1319_reg_546;
reg   [4:0] c_addr_reg_576;
wire   [15:0] grp_fu_437_p3;
reg  signed [15:0] acc_V_reg_581;
wire   [63:0] zext_ln1317_1_fu_411_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1319_1_fu_415_p1;
wire   [63:0] zext_ln16_2_fu_429_p1;
reg   [15:0] acc_V_1_fu_78;
reg   [15:0] ap_sig_allocacmp_acc_V_1_load;
wire    ap_loop_init;
reg   [2:0] k_fu_82;
reg   [2:0] ap_sig_allocacmp_k_load;
reg   [2:0] j_fu_86;
reg   [5:0] indvar_flatten_fu_90;
wire   [5:0] select_ln10_2_fu_203_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load_1;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [1:0] i_fu_94;
reg   [6:0] indvar_flatten16_fu_98;
wire   [6:0] add_ln8_1_fu_179_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten16_load;
wire   [5:0] add_ln10_1_fu_197_p2;
wire   [1:0] add_ln8_fu_230_p2;
wire   [0:0] icmp_ln12_fu_263_p2;
wire   [0:0] xor_ln8_fu_258_p2;
wire   [2:0] select_ln8_fu_236_p3;
wire   [0:0] and_ln8_fu_269_p2;
wire   [0:0] or_ln10_fu_281_p2;
wire   [2:0] add_ln10_fu_275_p2;
wire   [3:0] tmp_fu_250_p3;
wire   [3:0] zext_ln1317_fu_306_p1;
wire   [2:0] tmp_2_fu_351_p3;
wire   [4:0] tmp_1_fu_344_p3;
wire   [4:0] zext_ln16_fu_358_p1;
wire   [4:0] sub_ln16_fu_362_p2;
wire   [4:0] zext_ln16_1_fu_368_p1;
wire   [3:0] tmp_4_fu_384_p3;
wire   [4:0] tmp_3_fu_377_p3;
wire   [4:0] zext_ln1319_fu_391_p1;
wire   [4:0] sub_ln1319_fu_395_p2;
wire   [15:0] grp_fu_437_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_189;
reg    ap_condition_191;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mmul_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_q0),
    .din1(a_q0),
    .din2(grp_fu_437_p2),
    .ce(1'b1),
    .dout(grp_fu_437_p3)
);

mmul_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_189)) begin
            acc_V_1_fu_78 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
            acc_V_1_fu_78 <= grp_fu_437_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
            i_fu_94 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_94 <= select_ln8_1_fu_243_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_191)) begin
        if ((icmp_ln8_fu_173_p2 == 1'd0)) begin
            indvar_flatten16_fu_98 <= add_ln8_1_fu_179_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten16_fu_98 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_191)) begin
        if ((icmp_ln8_fu_173_p2 == 1'd0)) begin
            indvar_flatten_fu_90 <= select_ln10_2_fu_203_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_90 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
            j_fu_86 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_86 <= select_ln10_1_fu_298_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_189)) begin
            k_fu_82 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            k_fu_82 <= add_ln12_reg_536;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        acc_V_reg_581 <= grp_fu_437_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln12_reg_536 <= add_ln12_fu_328_p2;
        add_ln1317_reg_522 <= add_ln1317_fu_310_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln14_reg_527 <= icmp_ln14_fu_316_p2;
        icmp_ln16_reg_532 <= icmp_ln16_fu_322_p2;
        select_ln10_1_reg_517 <= select_ln10_1_fu_298_p3;
        select_ln10_reg_507 <= select_ln10_fu_286_p3;
        select_ln8_1_reg_501 <= select_ln8_1_fu_243_p3;
        trunc_ln10_reg_512 <= trunc_ln10_fu_294_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln1317_reg_522_pp0_iter2_reg <= add_ln1317_reg_522;
        add_ln1319_reg_546 <= add_ln1319_fu_401_p2;
        add_ln16_reg_541 <= add_ln16_fu_371_p2;
        add_ln16_reg_541_pp0_iter3_reg <= add_ln16_reg_541;
        add_ln16_reg_541_pp0_iter4_reg <= add_ln16_reg_541_pp0_iter3_reg;
        add_ln16_reg_541_pp0_iter5_reg <= add_ln16_reg_541_pp0_iter4_reg;
        add_ln16_reg_541_pp0_iter6_reg <= add_ln16_reg_541_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        c_addr_reg_576 <= zext_ln16_2_fu_429_p1;
        icmp_ln14_reg_527_pp0_iter2_reg <= icmp_ln14_reg_527;
        icmp_ln14_reg_527_pp0_iter3_reg <= icmp_ln14_reg_527_pp0_iter2_reg;
        icmp_ln14_reg_527_pp0_iter4_reg <= icmp_ln14_reg_527_pp0_iter3_reg;
        icmp_ln14_reg_527_pp0_iter5_reg <= icmp_ln14_reg_527_pp0_iter4_reg;
        icmp_ln16_reg_532_pp0_iter2_reg <= icmp_ln16_reg_532;
        icmp_ln16_reg_532_pp0_iter3_reg <= icmp_ln16_reg_532_pp0_iter2_reg;
        icmp_ln16_reg_532_pp0_iter4_reg <= icmp_ln16_reg_532_pp0_iter3_reg;
        icmp_ln16_reg_532_pp0_iter5_reg <= icmp_ln16_reg_532_pp0_iter4_reg;
        icmp_ln16_reg_532_pp0_iter6_reg <= icmp_ln16_reg_532_pp0_iter5_reg;
        icmp_ln16_reg_532_pp0_iter7_reg <= icmp_ln16_reg_532_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_173_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_493 <= icmp_ln10_fu_188_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_sig_allocacmp_acc_V_1_load = grp_fu_437_p3;
    end else begin
        ap_sig_allocacmp_acc_V_1_load = acc_V_1_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten16_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten16_load = indvar_flatten16_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load_1 = indvar_flatten_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_k_load = add_ln12_reg_536;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln16_reg_532_pp0_iter7_reg == 1'd1))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln1317_1_fu_411_p1;

assign add_ln10_1_fu_197_p2 = (ap_sig_allocacmp_indvar_flatten_load + 6'd1);

assign add_ln10_fu_275_p2 = (select_ln8_fu_236_p3 + 3'd1);

assign add_ln12_fu_328_p2 = (select_ln10_fu_286_p3 + 3'd1);

assign add_ln1317_fu_310_p2 = (tmp_fu_250_p3 + zext_ln1317_fu_306_p1);

assign add_ln1319_fu_401_p2 = (sub_ln1319_fu_395_p2 + zext_ln16_1_fu_368_p1);

assign add_ln16_fu_371_p2 = (sub_ln16_fu_362_p2 + zext_ln16_1_fu_368_p1);

assign add_ln8_1_fu_179_p2 = (ap_sig_allocacmp_indvar_flatten16_load + 7'd1);

assign add_ln8_fu_230_p2 = (i_fu_94 + 2'd1);

assign and_ln8_fu_269_p2 = (xor_ln8_fu_258_p2 & icmp_ln12_fu_263_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_189 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

always @ (*) begin
    ap_condition_191 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_address0 = zext_ln1319_1_fu_415_p1;

assign c_address0 = c_addr_reg_576;

assign c_d0 = acc_V_reg_581;

assign grp_fu_437_p2 = ((icmp_ln14_reg_527_pp0_iter5_reg[0:0] == 1'b1) ? 16'd0 : ap_sig_allocacmp_acc_V_1_load);

assign icmp_ln10_fu_188_p2 = ((ap_sig_allocacmp_indvar_flatten_load_1 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_263_p2 = ((ap_sig_allocacmp_k_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_316_p2 = ((select_ln10_fu_286_p3 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_322_p2 = ((select_ln10_fu_286_p3 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_173_p2 = ((ap_sig_allocacmp_indvar_flatten16_load == 7'd72) ? 1'b1 : 1'b0);

assign or_ln10_fu_281_p2 = (icmp_ln10_reg_493 | and_ln8_fu_269_p2);

assign select_ln10_1_fu_298_p3 = ((and_ln8_fu_269_p2[0:0] == 1'b1) ? add_ln10_fu_275_p2 : select_ln8_fu_236_p3);

assign select_ln10_2_fu_203_p3 = ((icmp_ln10_fu_188_p2[0:0] == 1'b1) ? 6'd1 : add_ln10_1_fu_197_p2);

assign select_ln10_fu_286_p3 = ((or_ln10_fu_281_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_k_load);

assign select_ln8_1_fu_243_p3 = ((icmp_ln10_reg_493[0:0] == 1'b1) ? add_ln8_fu_230_p2 : i_fu_94);

assign select_ln8_fu_236_p3 = ((icmp_ln10_reg_493[0:0] == 1'b1) ? 3'd0 : j_fu_86);

assign sub_ln1319_fu_395_p2 = (tmp_3_fu_377_p3 - zext_ln1319_fu_391_p1);

assign sub_ln16_fu_362_p2 = (tmp_1_fu_344_p3 - zext_ln16_fu_358_p1);

assign tmp_1_fu_344_p3 = {{select_ln8_1_reg_501}, {3'd0}};

assign tmp_2_fu_351_p3 = {{select_ln8_1_reg_501}, {1'd0}};

assign tmp_3_fu_377_p3 = {{trunc_ln10_reg_512}, {3'd0}};

assign tmp_4_fu_384_p3 = {{select_ln10_reg_507}, {1'd0}};

assign tmp_fu_250_p3 = {{select_ln8_1_fu_243_p3}, {2'd0}};

assign trunc_ln10_fu_294_p1 = select_ln10_fu_286_p3[1:0];

assign xor_ln8_fu_258_p2 = (icmp_ln10_reg_493 ^ 1'd1);

assign zext_ln1317_1_fu_411_p1 = add_ln1317_reg_522_pp0_iter2_reg;

assign zext_ln1317_fu_306_p1 = select_ln10_fu_286_p3;

assign zext_ln1319_1_fu_415_p1 = add_ln1319_reg_546;

assign zext_ln1319_fu_391_p1 = tmp_4_fu_384_p3;

assign zext_ln16_1_fu_368_p1 = select_ln10_1_reg_517;

assign zext_ln16_2_fu_429_p1 = add_ln16_reg_541_pp0_iter6_reg;

assign zext_ln16_fu_358_p1 = tmp_2_fu_351_p3;

endmodule //mmul
