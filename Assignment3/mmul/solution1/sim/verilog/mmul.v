// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmul_mmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.168000,HLS_SYN_LAT=547,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=83,HLS_SYN_LUT=223,HLS_VERSION=2022_1}" *)

module mmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [4:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [4:0] c_address0;
output   c_ce0;
output   c_we0;
output  [15:0] c_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg c_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] tmp_fu_149_p3;
reg   [3:0] tmp_reg_339;
wire    ap_CS_fsm_state2;
wire   [4:0] sub_ln16_fu_177_p2;
reg   [4:0] sub_ln16_reg_344;
wire   [1:0] add_ln8_fu_189_p2;
reg   [1:0] add_ln8_reg_352;
wire   [4:0] zext_ln16_1_fu_195_p1;
reg   [4:0] zext_ln16_1_reg_357;
wire    ap_CS_fsm_state3;
reg   [4:0] c_addr_reg_362;
wire   [2:0] add_ln10_fu_215_p2;
reg   [2:0] add_ln10_reg_370;
reg   [3:0] a_addr_reg_375;
wire    ap_CS_fsm_state4;
reg   [4:0] b_addr_reg_380;
wire   [2:0] add_ln12_fu_285_p2;
reg   [2:0] add_ln12_reg_388;
wire   [0:0] icmp_ln14_fu_291_p2;
reg   [0:0] icmp_ln14_reg_393;
wire   [0:0] icmp_ln12_fu_279_p2;
wire   [0:0] icmp_ln16_fu_297_p2;
reg   [0:0] icmp_ln16_reg_398;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire   [15:0] grp_fu_317_p3;
reg  signed [15:0] acc_V_3_reg_417;
wire    ap_CS_fsm_state9;
reg   [2:0] j_reg_114;
wire   [0:0] icmp_ln8_fu_183_p2;
reg   [2:0] k_reg_125;
wire   [0:0] icmp_ln10_fu_209_p2;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln16_2_fu_204_p1;
wire   [63:0] zext_ln1317_1_fu_238_p1;
wire   [63:0] zext_ln1319_1_fu_274_p1;
reg   [1:0] i_fu_70;
reg   [15:0] acc_V_fu_74;
wire    ap_CS_fsm_state5;
wire   [2:0] tmp_2_fu_165_p3;
wire   [4:0] tmp_1_fu_157_p3;
wire   [4:0] zext_ln16_fu_173_p1;
wire   [4:0] add_ln16_fu_199_p2;
wire   [3:0] zext_ln1317_fu_229_p1;
wire   [3:0] add_ln1317_fu_233_p2;
wire   [1:0] trunc_ln12_fu_225_p1;
wire   [3:0] tmp_4_fu_251_p3;
wire   [4:0] tmp_3_fu_243_p3;
wire   [4:0] zext_ln1319_fu_259_p1;
wire   [4:0] sub_ln1319_fu_263_p2;
wire   [4:0] add_ln1319_fu_269_p2;
wire   [15:0] grp_fu_317_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

mmul_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_q0),
    .din1(a_q0),
    .din2(grp_fu_317_p2),
    .ce(1'b1),
    .dout(grp_fu_317_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        acc_V_fu_74 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_V_fu_74 <= acc_V_3_reg_417;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_70 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln10_fu_209_p2 == 1'd1))) begin
        i_fu_70 <= add_ln8_reg_352;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_183_p2 == 1'd0))) begin
        j_reg_114 <= 3'd0;
    end else if (((icmp_ln12_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_114 <= add_ln10_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_reg_125 <= add_ln12_reg_388;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln10_fu_209_p2 == 1'd0))) begin
        k_reg_125 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_addr_reg_375 <= zext_ln1317_1_fu_238_p1;
        add_ln12_reg_388 <= add_ln12_fu_285_p2;
        b_addr_reg_380 <= zext_ln1319_1_fu_274_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_V_3_reg_417 <= grp_fu_317_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln10_reg_370 <= add_ln10_fu_215_p2;
        c_addr_reg_362 <= zext_ln16_2_fu_204_p1;
        zext_ln16_1_reg_357[2 : 0] <= zext_ln16_1_fu_195_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_352 <= add_ln8_fu_189_p2;
        sub_ln16_reg_344[4 : 1] <= sub_ln16_fu_177_p2[4 : 1];
        tmp_reg_339[3 : 2] <= tmp_fu_149_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln14_reg_393 <= icmp_ln14_fu_291_p2;
        icmp_ln16_reg_398 <= icmp_ln16_fu_297_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_183_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_183_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_398 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_183_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln10_fu_209_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln12_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = a_addr_reg_375;

assign add_ln10_fu_215_p2 = (j_reg_114 + 3'd1);

assign add_ln12_fu_285_p2 = (k_reg_125 + 3'd1);

assign add_ln1317_fu_233_p2 = (tmp_reg_339 + zext_ln1317_fu_229_p1);

assign add_ln1319_fu_269_p2 = (sub_ln1319_fu_263_p2 + zext_ln16_1_reg_357);

assign add_ln16_fu_199_p2 = (sub_ln16_reg_344 + zext_ln16_1_fu_195_p1);

assign add_ln8_fu_189_p2 = (i_fu_70 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_address0 = b_addr_reg_380;

assign c_address0 = c_addr_reg_362;

assign c_d0 = acc_V_3_reg_417;

assign grp_fu_317_p2 = ((icmp_ln14_reg_393[0:0] == 1'b1) ? 16'd0 : acc_V_fu_74);

assign icmp_ln10_fu_209_p2 = ((j_reg_114 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_279_p2 = ((k_reg_125 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_291_p2 = ((k_reg_125 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_297_p2 = ((k_reg_125 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_183_p2 = ((i_fu_70 == 2'd3) ? 1'b1 : 1'b0);

assign sub_ln1319_fu_263_p2 = (tmp_3_fu_243_p3 - zext_ln1319_fu_259_p1);

assign sub_ln16_fu_177_p2 = (tmp_1_fu_157_p3 - zext_ln16_fu_173_p1);

assign tmp_1_fu_157_p3 = {{i_fu_70}, {3'd0}};

assign tmp_2_fu_165_p3 = {{i_fu_70}, {1'd0}};

assign tmp_3_fu_243_p3 = {{trunc_ln12_fu_225_p1}, {3'd0}};

assign tmp_4_fu_251_p3 = {{k_reg_125}, {1'd0}};

assign tmp_fu_149_p3 = {{i_fu_70}, {2'd0}};

assign trunc_ln12_fu_225_p1 = k_reg_125[1:0];

assign zext_ln1317_1_fu_238_p1 = add_ln1317_fu_233_p2;

assign zext_ln1317_fu_229_p1 = k_reg_125;

assign zext_ln1319_1_fu_274_p1 = add_ln1319_fu_269_p2;

assign zext_ln1319_fu_259_p1 = tmp_4_fu_251_p3;

assign zext_ln16_1_fu_195_p1 = j_reg_114;

assign zext_ln16_2_fu_204_p1 = add_ln16_fu_199_p2;

assign zext_ln16_fu_173_p1 = tmp_2_fu_165_p3;

always @ (posedge ap_clk) begin
    tmp_reg_339[1:0] <= 2'b00;
    sub_ln16_reg_344[0] <= 1'b0;
    zext_ln16_1_reg_357[4:3] <= 2'b00;
end

endmodule //mmul
