// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="inner_product_inner_product,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.981000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=338,HLS_SYN_LUT=230,HLS_VERSION=2022_1}" *)

module inner_product (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_address0,
        a_0_ce0,
        a_0_q0,
        a_0_address1,
        a_0_ce1,
        a_0_q1,
        a_1_address0,
        a_1_ce0,
        a_1_q0,
        a_1_address1,
        a_1_ce1,
        a_1_q1,
        b_0_address0,
        b_0_ce0,
        b_0_q0,
        b_0_address1,
        b_0_ce1,
        b_0_q1,
        b_1_address0,
        b_1_ce0,
        b_1_q0,
        b_1_address1,
        b_1_ce1,
        b_1_q1,
        s,
        s_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] a_0_address0;
output   a_0_ce0;
input  [15:0] a_0_q0;
output  [1:0] a_0_address1;
output   a_0_ce1;
input  [15:0] a_0_q1;
output  [1:0] a_1_address0;
output   a_1_ce0;
input  [15:0] a_1_q0;
output  [1:0] a_1_address1;
output   a_1_ce1;
input  [15:0] a_1_q1;
output  [1:0] b_0_address0;
output   b_0_ce0;
input  [15:0] b_0_q0;
output  [1:0] b_0_address1;
output   b_0_ce1;
input  [15:0] b_0_q1;
output  [1:0] b_1_address0;
output   b_1_ce0;
input  [15:0] b_1_q0;
output  [1:0] b_1_address1;
output   b_1_ce1;
input  [15:0] b_1_q1;
output  [15:0] s;
output   s_ap_vld;

reg ap_idle;
reg a_0_ce0;
reg a_0_ce1;
reg a_1_ce0;
reg a_1_ce1;
reg b_0_ce0;
reg b_0_ce1;
reg b_1_ce0;
reg b_1_ce1;
reg s_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_5_fu_262_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] i1_reg_187;
reg   [15:0] acc_V2_reg_200;
reg   [0:0] tmp_4_reg_323;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln6_fu_258_p1;
reg   [2:0] trunc_ln6_reg_371;
reg   [0:0] tmp_5_reg_376;
reg   [0:0] tmp_5_reg_376_pp0_iter1_reg;
reg   [0:0] tmp_5_reg_376_pp0_iter2_reg;
reg   [0:0] tmp_5_reg_376_pp0_iter3_reg;
reg   [0:0] tmp_5_reg_376_pp0_iter4_reg;
reg   [0:0] tmp_5_reg_376_pp0_iter5_reg;
reg   [0:0] tmp_5_reg_376_pp0_iter6_reg;
reg   [0:0] tmp_5_reg_376_pp0_iter7_reg;
wire  signed [15:0] tmp_fu_270_p4;
reg  signed [15:0] tmp_reg_380;
reg  signed [15:0] tmp_reg_380_pp0_iter2_reg;
reg  signed [15:0] tmp_reg_380_pp0_iter3_reg;
wire  signed [15:0] tmp_1_fu_279_p4;
reg  signed [15:0] tmp_1_reg_385;
reg  signed [15:0] tmp_1_reg_385_pp0_iter2_reg;
reg  signed [15:0] tmp_1_reg_385_pp0_iter3_reg;
wire  signed [15:0] tmp_2_fu_288_p4;
reg  signed [15:0] tmp_2_reg_390;
wire  signed [15:0] tmp_3_fu_297_p4;
reg  signed [15:0] tmp_3_reg_395;
wire  signed [15:0] grp_fu_314_p2;
reg   [15:0] mul_ln859_1_reg_400;
wire   [15:0] grp_fu_318_p3;
reg  signed [15:0] add_ln859_reg_405;
(* use_dsp48 = "no" *) wire   [15:0] acc_V_fu_306_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_i1_phi_fu_190_p6;
reg   [15:0] ap_phi_mux_acc_V2_phi_fu_204_p6;
reg    ap_loop_init_pp0_iter1_reg;
reg    ap_loop_init_pp0_iter2_reg;
reg    ap_loop_init_pp0_iter3_reg;
reg    ap_loop_init_pp0_iter4_reg;
reg    ap_loop_init_pp0_iter5_reg;
reg    ap_loop_init_pp0_iter6_reg;
reg    ap_loop_init_pp0_iter7_reg;
reg    ap_loop_init_pp0_iter8_reg;
wire   [63:0] zext_ln1317_fu_230_p1;
wire   [63:0] zext_ln1317_1_fu_244_p1;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] trunc_ln10_fu_218_p1;
wire   [1:0] or_ln1317_fu_238_p2;
wire   [3:0] i1_cast_fu_214_p1;
wire   [3:0] i_fu_252_p2;
reg    grp_fu_314_ce;
reg    grp_fu_318_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to7;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

inner_product_mux_21_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 16 ))
mux_21_16_1_1_U1(
    .din0(a_0_q1),
    .din1(a_1_q1),
    .din2(tmp_4_reg_323),
    .dout(tmp_fu_270_p4)
);

inner_product_mux_21_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 16 ))
mux_21_16_1_1_U2(
    .din0(b_0_q1),
    .din1(b_1_q1),
    .din2(tmp_4_reg_323),
    .dout(tmp_1_fu_279_p4)
);

inner_product_mux_21_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 16 ))
mux_21_16_1_1_U3(
    .din0(a_0_q0),
    .din1(a_1_q0),
    .din2(tmp_4_reg_323),
    .dout(tmp_2_fu_288_p4)
);

inner_product_mux_21_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 16 ))
mux_21_16_1_1_U4(
    .din0(b_0_q0),
    .din1(b_1_q0),
    .din2(tmp_4_reg_323),
    .dout(tmp_3_fu_297_p4)
);

inner_product_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_reg_395),
    .din1(tmp_2_reg_390),
    .ce(grp_fu_314_ce),
    .dout(grp_fu_314_p2)
);

inner_product_mac_muladd_16s_16s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_16s_16ns_16_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_385_pp0_iter3_reg),
    .din1(tmp_reg_380_pp0_iter3_reg),
    .din2(mul_ln859_1_reg_400),
    .ce(grp_fu_318_ce),
    .dout(grp_fu_318_p3)
);

inner_product_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        if ((tmp_5_reg_376_pp0_iter7_reg == 1'd1)) begin
            acc_V2_reg_200 <= 16'd0;
        end else if ((tmp_5_reg_376_pp0_iter7_reg == 1'd0)) begin
            acc_V2_reg_200 <= acc_V_fu_306_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_reg_376 == 1'd0))) begin
        i1_reg_187 <= trunc_ln6_reg_371;
    end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_reg_376 == 1'd1)))) begin
        i1_reg_187 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        add_ln859_reg_405 <= grp_fu_318_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        tmp_1_reg_385 <= tmp_1_fu_279_p4;
        tmp_2_reg_390 <= tmp_2_fu_288_p4;
        tmp_3_reg_395 <= tmp_3_fu_297_p4;
        tmp_4_reg_323 <= ap_phi_mux_i1_phi_fu_190_p6[32'd2];
        tmp_5_reg_376 <= i_fu_252_p2[32'd3];
        tmp_5_reg_376_pp0_iter1_reg <= tmp_5_reg_376;
        tmp_reg_380 <= tmp_fu_270_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_init_pp0_iter3_reg <= ap_loop_init_pp0_iter2_reg;
        ap_loop_init_pp0_iter4_reg <= ap_loop_init_pp0_iter3_reg;
        ap_loop_init_pp0_iter5_reg <= ap_loop_init_pp0_iter4_reg;
        ap_loop_init_pp0_iter6_reg <= ap_loop_init_pp0_iter5_reg;
        ap_loop_init_pp0_iter7_reg <= ap_loop_init_pp0_iter6_reg;
        ap_loop_init_pp0_iter8_reg <= ap_loop_init_pp0_iter7_reg;
        mul_ln859_1_reg_400 <= grp_fu_314_p2;
        tmp_1_reg_385_pp0_iter2_reg <= tmp_1_reg_385;
        tmp_1_reg_385_pp0_iter3_reg <= tmp_1_reg_385_pp0_iter2_reg;
        tmp_5_reg_376_pp0_iter2_reg <= tmp_5_reg_376_pp0_iter1_reg;
        tmp_5_reg_376_pp0_iter3_reg <= tmp_5_reg_376_pp0_iter2_reg;
        tmp_5_reg_376_pp0_iter4_reg <= tmp_5_reg_376_pp0_iter3_reg;
        tmp_5_reg_376_pp0_iter5_reg <= tmp_5_reg_376_pp0_iter4_reg;
        tmp_5_reg_376_pp0_iter6_reg <= tmp_5_reg_376_pp0_iter5_reg;
        tmp_5_reg_376_pp0_iter7_reg <= tmp_5_reg_376_pp0_iter6_reg;
        tmp_reg_380_pp0_iter2_reg <= tmp_reg_380;
        tmp_reg_380_pp0_iter3_reg <= tmp_reg_380_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln6_reg_371 <= trunc_ln6_fu_258_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_0_ce0 = 1'b1;
    end else begin
        a_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_0_ce1 = 1'b1;
    end else begin
        a_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_1_ce0 = 1'b1;
    end else begin
        a_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_1_ce1 = 1'b1;
    end else begin
        a_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_fu_262_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to7 = 1'b1;
    end else begin
        ap_idle_pp0_0to7 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_loop_init_pp0_iter8_reg == 1'b1)) begin
        ap_phi_mux_acc_V2_phi_fu_204_p6 = 16'd0;
    end else begin
        ap_phi_mux_acc_V2_phi_fu_204_p6 = acc_V2_reg_200;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_reg_376 == 1'd0))) begin
        ap_phi_mux_i1_phi_fu_190_p6 = trunc_ln6_reg_371;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_reg_376 == 1'd1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1)))) begin
        ap_phi_mux_i1_phi_fu_190_p6 = 3'd0;
    end else begin
        ap_phi_mux_i1_phi_fu_190_p6 = i1_reg_187;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0_0to7 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_0_ce0 = 1'b1;
    end else begin
        b_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_0_ce1 = 1'b1;
    end else begin
        b_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_1_ce0 = 1'b1;
    end else begin
        b_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_1_ce1 = 1'b1;
    end else begin
        b_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_314_ce = 1'b1;
    end else begin
        grp_fu_314_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_318_ce = 1'b1;
    end else begin
        grp_fu_318_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_5_reg_376_pp0_iter7_reg == 1'd1))) begin
        s_ap_vld = 1'b1;
    end else begin
        s_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_address0 = zext_ln1317_1_fu_244_p1;

assign a_0_address1 = zext_ln1317_fu_230_p1;

assign a_1_address0 = zext_ln1317_1_fu_244_p1;

assign a_1_address1 = zext_ln1317_fu_230_p1;

assign acc_V_fu_306_p2 = ($signed(ap_phi_mux_acc_V2_phi_fu_204_p6) + $signed(add_ln859_reg_405));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_0_address0 = zext_ln1317_1_fu_244_p1;

assign b_0_address1 = zext_ln1317_fu_230_p1;

assign b_1_address0 = zext_ln1317_1_fu_244_p1;

assign b_1_address1 = zext_ln1317_fu_230_p1;

assign i1_cast_fu_214_p1 = ap_phi_mux_i1_phi_fu_190_p6;

assign i_fu_252_p2 = (i1_cast_fu_214_p1 + 4'd2);

assign or_ln1317_fu_238_p2 = (trunc_ln10_fu_218_p1 | 2'd1);

assign s = ($signed(ap_phi_mux_acc_V2_phi_fu_204_p6) + $signed(add_ln859_reg_405));

assign tmp_5_fu_262_p3 = i_fu_252_p2[32'd3];

assign trunc_ln10_fu_218_p1 = ap_phi_mux_i1_phi_fu_190_p6[1:0];

assign trunc_ln6_fu_258_p1 = i_fu_252_p2[2:0];

assign zext_ln1317_1_fu_244_p1 = or_ln1317_fu_238_p2;

assign zext_ln1317_fu_230_p1 = trunc_ln10_fu_218_p1;

endmodule //inner_product
