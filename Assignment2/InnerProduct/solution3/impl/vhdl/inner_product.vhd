-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inner_product is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    s : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_ap_vld : OUT STD_LOGIC );
end;


architecture behav of inner_product is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "inner_product_inner_product,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.047000,HLS_SYN_LAT=7,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=440,HLS_SYN_LUT=57,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal a_0_read_reg_217 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal a_0_read_reg_217_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_read_reg_222 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_read_reg_222_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal a_3_read_reg_247 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_3_read_reg_247_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_read_reg_252 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_read_reg_252_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal a_5_read_reg_267 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_5_read_reg_267_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_5_read_reg_272 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_5_read_reg_272_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal a_7_read_reg_287 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_7_read_reg_287_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal b_7_read_reg_292 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_7_read_reg_292_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln859_reg_297 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln859_1_reg_302 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln859_3_reg_307 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln859_5_reg_312 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_197_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_reg_317 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_reg_317_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_202_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_1_reg_322 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_1_reg_322_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_207_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_3_reg_327 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_212_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_4_reg_332 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_5_fu_159_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln859_5_fu_159_p2 : signal is "no";
    signal add_ln859_5_reg_337 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln859_2_fu_163_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln859_2_fu_163_p2 : signal is "no";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component inner_product_mul_mul_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component inner_product_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_mul_16s_16s_16_4_1_U1 : component inner_product_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_1,
        din1 => a_1,
        ce => ap_const_logic_1,
        dout => grp_fu_173_p2);

    mul_mul_16s_16s_16_4_1_U2 : component inner_product_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_2,
        din1 => a_2,
        ce => ap_const_logic_1,
        dout => grp_fu_179_p2);

    mul_mul_16s_16s_16_4_1_U3 : component inner_product_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_4,
        din1 => a_4,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);

    mul_mul_16s_16s_16_4_1_U4 : component inner_product_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_6,
        din1 => a_6,
        ce => ap_const_logic_1,
        dout => grp_fu_191_p2);

    mac_muladd_16s_16s_16ns_16_4_1_U5 : component inner_product_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_0_read_reg_222_pp0_iter1_reg,
        din1 => a_0_read_reg_217_pp0_iter1_reg,
        din2 => mul_ln859_reg_297,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U6 : component inner_product_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_3_read_reg_252_pp0_iter1_reg,
        din1 => a_3_read_reg_247_pp0_iter1_reg,
        din2 => mul_ln859_1_reg_302,
        ce => ap_const_logic_1,
        dout => grp_fu_202_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U7 : component inner_product_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_5_read_reg_272_pp0_iter1_reg,
        din1 => a_5_read_reg_267_pp0_iter1_reg,
        din2 => mul_ln859_3_reg_307,
        ce => ap_const_logic_1,
        dout => grp_fu_207_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U8 : component inner_product_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_7_read_reg_292_pp0_iter1_reg,
        din1 => a_7_read_reg_287_pp0_iter1_reg,
        din2 => mul_ln859_5_reg_312,
        ce => ap_const_logic_1,
        dout => grp_fu_212_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_0_read_reg_217 <= a_0;
                a_0_read_reg_217_pp0_iter1_reg <= a_0_read_reg_217;
                a_3_read_reg_247 <= a_3;
                a_3_read_reg_247_pp0_iter1_reg <= a_3_read_reg_247;
                a_5_read_reg_267 <= a_5;
                a_5_read_reg_267_pp0_iter1_reg <= a_5_read_reg_267;
                a_7_read_reg_287 <= a_7;
                a_7_read_reg_287_pp0_iter1_reg <= a_7_read_reg_287;
                b_0_read_reg_222 <= b_0;
                b_0_read_reg_222_pp0_iter1_reg <= b_0_read_reg_222;
                b_3_read_reg_252 <= b_3;
                b_3_read_reg_252_pp0_iter1_reg <= b_3_read_reg_252;
                b_5_read_reg_272 <= b_5;
                b_5_read_reg_272_pp0_iter1_reg <= b_5_read_reg_272;
                b_7_read_reg_292 <= b_7;
                b_7_read_reg_292_pp0_iter1_reg <= b_7_read_reg_292;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                add_ln859_1_reg_322 <= grp_fu_202_p3;
                add_ln859_3_reg_327 <= grp_fu_207_p3;
                add_ln859_4_reg_332 <= grp_fu_212_p3;
                add_ln859_reg_317 <= grp_fu_197_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln859_1_reg_322_pp0_iter6_reg <= add_ln859_1_reg_322;
                add_ln859_5_reg_337 <= add_ln859_5_fu_159_p2;
                add_ln859_reg_317_pp0_iter6_reg <= add_ln859_reg_317;
                mul_ln859_1_reg_302 <= grp_fu_179_p2;
                mul_ln859_3_reg_307 <= grp_fu_185_p2;
                mul_ln859_5_reg_312 <= grp_fu_191_p2;
                mul_ln859_reg_297 <= grp_fu_173_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln859_2_fu_163_p2 <= std_logic_vector(signed(add_ln859_1_reg_322_pp0_iter6_reg) + signed(add_ln859_reg_317_pp0_iter6_reg));
    add_ln859_5_fu_159_p2 <= std_logic_vector(signed(add_ln859_4_reg_332) + signed(add_ln859_3_reg_327));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    s <= std_logic_vector(unsigned(add_ln859_5_reg_337) + unsigned(add_ln859_2_fu_163_p2));

    s_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            s_ap_vld <= ap_const_logic_1;
        else 
            s_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
