-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inner_product is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_0_ce0 : OUT STD_LOGIC;
    a_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_0_ce1 : OUT STD_LOGIC;
    a_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_1_ce0 : OUT STD_LOGIC;
    a_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_1_ce1 : OUT STD_LOGIC;
    a_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_2_ce0 : OUT STD_LOGIC;
    a_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_2_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_2_ce1 : OUT STD_LOGIC;
    a_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_3_ce0 : OUT STD_LOGIC;
    a_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_3_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_3_ce1 : OUT STD_LOGIC;
    a_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_0_ce1 : OUT STD_LOGIC;
    b_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_1_ce1 : OUT STD_LOGIC;
    b_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_2_ce0 : OUT STD_LOGIC;
    b_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_2_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_2_ce1 : OUT STD_LOGIC;
    b_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_3_ce0 : OUT STD_LOGIC;
    b_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_3_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_3_ce1 : OUT STD_LOGIC;
    b_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    s : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_ap_vld : OUT STD_LOGIC );
end;


architecture behav of inner_product is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "inner_product_inner_product,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.843857,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=820,HLS_SYN_LUT=805,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_8_fu_801_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal do_init_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i1_reg_318 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_3_load_1_phi_reg_555 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_3_load_1_phi_reg_568 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_3_load_phi_reg_581 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_3_load_phi_reg_594 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_load_1_phi_reg_607 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_load_1_phi_reg_620 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_load_1_phi_reg_633 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_2_load_1_phi_reg_646 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_1_load_1_phi_reg_659 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_0_load_1_phi_reg_672 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_load_phi_reg_685 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_load_phi_reg_698 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_0_load_phi_reg_711 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_2_load_phi_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_1_load_phi_reg_737 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_0_load_phi_reg_750 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V2_reg_763 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln_reg_1025 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln6_fu_797_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln6_reg_1034 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1039_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1039_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1039_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1039_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1039_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1039_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1039_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_809_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_1043 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_820_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_1048 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_831_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_1053 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_1053_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_1053_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_842_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1058 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1058_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1058_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_858_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1063 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_872_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1068 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_886_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_1073 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_1073_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_1073_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_900_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1078 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1078_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1078_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_927_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln859_reg_1083 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_931_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln859_2_reg_1088 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_935_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_reg_1093 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_940_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_1_reg_1098 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_fu_918_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i1_phi_fu_321_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_b_3_load_1_phi_phi_fu_559_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_b_3_load_1_phi_reg_555 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_a_3_load_1_phi_phi_fu_572_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_a_3_load_1_phi_reg_568 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_b_3_load_phi_phi_fu_585_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_b_3_load_phi_reg_581 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_a_3_load_phi_phi_fu_598_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_a_3_load_phi_reg_594 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_b_2_load_1_phi_phi_fu_611_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_b_2_load_1_phi_reg_607 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_b_1_load_1_phi_phi_fu_624_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_b_1_load_1_phi_reg_620 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_b_0_load_1_phi_phi_fu_637_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_b_0_load_1_phi_reg_633 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_a_2_load_1_phi_phi_fu_650_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_a_2_load_1_phi_reg_646 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_a_1_load_1_phi_phi_fu_663_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_a_1_load_1_phi_reg_659 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_a_0_load_1_phi_phi_fu_676_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_a_0_load_1_phi_reg_672 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_b_2_load_phi_phi_fu_689_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_b_2_load_phi_reg_685 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_b_1_load_phi_phi_fu_702_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_b_1_load_phi_reg_698 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_b_0_load_phi_phi_fu_715_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_b_0_load_phi_reg_711 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_a_2_load_phi_phi_fu_728_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_a_2_load_phi_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_a_1_load_phi_phi_fu_741_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_a_1_load_phi_reg_737 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_a_0_load_phi_phi_fu_754_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_a_0_load_phi_reg_750 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_acc_V2_phi_fu_767_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_init_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_init_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_init_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_init_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_init_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_init_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_init_pp0_iter8_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i1_cast_fu_777_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_791_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln1317_fu_853_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln859_2_fu_914_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln859_2_fu_914_p2 : signal is "no";
    signal grp_fu_927_ce : STD_LOGIC;
    signal grp_fu_931_ce : STD_LOGIC;
    signal grp_fu_935_ce : STD_LOGIC;
    signal grp_fu_940_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to7 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_327 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component inner_product_mux_32_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component inner_product_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component inner_product_mul_mul_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component inner_product_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component inner_product_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mux_32_16_1_1_U1 : component inner_product_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_phi_mux_a_0_load_phi_phi_fu_754_p4,
        din1 => ap_const_lv16_0,
        din2 => ap_phi_mux_a_2_load_phi_phi_fu_728_p4,
        din3 => lshr_ln_reg_1025,
        dout => tmp_fu_809_p5);

    mux_32_16_1_1_U2 : component inner_product_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_phi_mux_b_0_load_phi_phi_fu_715_p4,
        din1 => ap_const_lv16_0,
        din2 => ap_phi_mux_b_2_load_phi_phi_fu_689_p4,
        din3 => lshr_ln_reg_1025,
        dout => tmp_1_fu_820_p5);

    mux_32_16_1_1_U3 : component inner_product_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_phi_mux_a_0_load_1_phi_phi_fu_676_p4,
        din1 => ap_const_lv16_0,
        din2 => ap_phi_mux_a_2_load_1_phi_phi_fu_650_p4,
        din3 => lshr_ln_reg_1025,
        dout => tmp_2_fu_831_p5);

    mux_32_16_1_1_U4 : component inner_product_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_phi_mux_b_0_load_1_phi_phi_fu_637_p4,
        din1 => ap_const_lv16_0,
        din2 => ap_phi_mux_b_2_load_1_phi_phi_fu_611_p4,
        din3 => lshr_ln_reg_1025,
        dout => tmp_3_fu_842_p5);

    mux_42_16_1_1_U5 : component inner_product_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_phi_mux_a_1_load_phi_phi_fu_741_p4,
        din2 => ap_const_lv16_0,
        din3 => ap_phi_mux_a_3_load_phi_phi_fu_598_p4,
        din4 => or_ln1317_fu_853_p2,
        dout => tmp_4_fu_858_p6);

    mux_42_16_1_1_U6 : component inner_product_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_phi_mux_b_1_load_phi_phi_fu_702_p4,
        din2 => ap_const_lv16_0,
        din3 => ap_phi_mux_b_3_load_phi_phi_fu_585_p4,
        din4 => or_ln1317_fu_853_p2,
        dout => tmp_5_fu_872_p6);

    mux_42_16_1_1_U7 : component inner_product_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_phi_mux_a_1_load_1_phi_phi_fu_663_p4,
        din2 => ap_const_lv16_0,
        din3 => ap_phi_mux_a_3_load_1_phi_phi_fu_572_p4,
        din4 => or_ln1317_fu_853_p2,
        dout => tmp_6_fu_886_p6);

    mux_42_16_1_1_U8 : component inner_product_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_phi_mux_b_1_load_1_phi_phi_fu_624_p4,
        din2 => ap_const_lv16_0,
        din3 => ap_phi_mux_b_3_load_1_phi_phi_fu_559_p4,
        din4 => or_ln1317_fu_853_p2,
        dout => tmp_7_fu_900_p6);

    mul_mul_16s_16s_16_4_1_U9 : component inner_product_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_1048,
        din1 => tmp_reg_1043,
        ce => grp_fu_927_ce,
        dout => grp_fu_927_p2);

    mul_mul_16s_16s_16_4_1_U10 : component inner_product_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_reg_1068,
        din1 => tmp_4_reg_1063,
        ce => grp_fu_931_ce,
        dout => grp_fu_931_p2);

    mac_muladd_16s_16s_16ns_16_4_1_U11 : component inner_product_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_1058_pp0_iter3_reg,
        din1 => tmp_2_reg_1053_pp0_iter3_reg,
        din2 => mul_ln859_reg_1083,
        ce => grp_fu_935_ce,
        dout => grp_fu_935_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U12 : component inner_product_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_1078_pp0_iter3_reg,
        din1 => tmp_6_reg_1073_pp0_iter3_reg,
        din2 => mul_ln859_2_reg_1088,
        ce => grp_fu_940_ce,
        dout => grp_fu_940_p3);

    flow_control_loop_pipe_U : component inner_product_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    a_0_load_1_phi_reg_672_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    a_0_load_1_phi_reg_672 <= a_0_load_1_phi_reg_672;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    a_0_load_1_phi_reg_672 <= a_0_q0;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    a_0_load_1_phi_reg_672 <= ap_phi_reg_pp0_iter1_a_0_load_1_phi_reg_672;
                end if;
            end if; 
        end if;
    end process;

    a_0_load_phi_reg_750_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    a_0_load_phi_reg_750 <= a_0_load_phi_reg_750;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    a_0_load_phi_reg_750 <= a_0_q1;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    a_0_load_phi_reg_750 <= ap_phi_reg_pp0_iter1_a_0_load_phi_reg_750;
                end if;
            end if; 
        end if;
    end process;

    a_1_load_1_phi_reg_659_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    a_1_load_1_phi_reg_659 <= a_1_load_1_phi_reg_659;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    a_1_load_1_phi_reg_659 <= a_1_q0;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    a_1_load_1_phi_reg_659 <= ap_phi_reg_pp0_iter1_a_1_load_1_phi_reg_659;
                end if;
            end if; 
        end if;
    end process;

    a_1_load_phi_reg_737_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    a_1_load_phi_reg_737 <= a_1_load_phi_reg_737;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    a_1_load_phi_reg_737 <= a_1_q1;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    a_1_load_phi_reg_737 <= ap_phi_reg_pp0_iter1_a_1_load_phi_reg_737;
                end if;
            end if; 
        end if;
    end process;

    a_2_load_1_phi_reg_646_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    a_2_load_1_phi_reg_646 <= a_2_load_1_phi_reg_646;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    a_2_load_1_phi_reg_646 <= a_2_q0;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    a_2_load_1_phi_reg_646 <= ap_phi_reg_pp0_iter1_a_2_load_1_phi_reg_646;
                end if;
            end if; 
        end if;
    end process;

    a_2_load_phi_reg_724_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    a_2_load_phi_reg_724 <= a_2_load_phi_reg_724;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    a_2_load_phi_reg_724 <= a_2_q1;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    a_2_load_phi_reg_724 <= ap_phi_reg_pp0_iter1_a_2_load_phi_reg_724;
                end if;
            end if; 
        end if;
    end process;

    a_3_load_1_phi_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    a_3_load_1_phi_reg_568 <= a_3_load_1_phi_reg_568;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    a_3_load_1_phi_reg_568 <= a_3_q0;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    a_3_load_1_phi_reg_568 <= ap_phi_reg_pp0_iter1_a_3_load_1_phi_reg_568;
                end if;
            end if; 
        end if;
    end process;

    a_3_load_phi_reg_594_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    a_3_load_phi_reg_594 <= a_3_load_phi_reg_594;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    a_3_load_phi_reg_594 <= a_3_q1;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    a_3_load_phi_reg_594 <= ap_phi_reg_pp0_iter1_a_3_load_phi_reg_594;
                end if;
            end if; 
        end if;
    end process;

    acc_V2_reg_763_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                if ((tmp_8_reg_1039_pp0_iter7_reg = ap_const_lv1_1)) then 
                    acc_V2_reg_763 <= ap_const_lv16_0;
                elsif ((tmp_8_reg_1039_pp0_iter7_reg = ap_const_lv1_0)) then 
                    acc_V2_reg_763 <= acc_V_fu_918_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    b_0_load_1_phi_reg_633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    b_0_load_1_phi_reg_633 <= b_0_load_1_phi_reg_633;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    b_0_load_1_phi_reg_633 <= b_0_q0;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    b_0_load_1_phi_reg_633 <= ap_phi_reg_pp0_iter1_b_0_load_1_phi_reg_633;
                end if;
            end if; 
        end if;
    end process;

    b_0_load_phi_reg_711_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    b_0_load_phi_reg_711 <= b_0_load_phi_reg_711;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    b_0_load_phi_reg_711 <= b_0_q1;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    b_0_load_phi_reg_711 <= ap_phi_reg_pp0_iter1_b_0_load_phi_reg_711;
                end if;
            end if; 
        end if;
    end process;

    b_1_load_1_phi_reg_620_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    b_1_load_1_phi_reg_620 <= b_1_load_1_phi_reg_620;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    b_1_load_1_phi_reg_620 <= b_1_q0;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    b_1_load_1_phi_reg_620 <= ap_phi_reg_pp0_iter1_b_1_load_1_phi_reg_620;
                end if;
            end if; 
        end if;
    end process;

    b_1_load_phi_reg_698_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    b_1_load_phi_reg_698 <= b_1_load_phi_reg_698;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    b_1_load_phi_reg_698 <= b_1_q1;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    b_1_load_phi_reg_698 <= ap_phi_reg_pp0_iter1_b_1_load_phi_reg_698;
                end if;
            end if; 
        end if;
    end process;

    b_2_load_1_phi_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    b_2_load_1_phi_reg_607 <= b_2_load_1_phi_reg_607;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    b_2_load_1_phi_reg_607 <= b_2_q0;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    b_2_load_1_phi_reg_607 <= ap_phi_reg_pp0_iter1_b_2_load_1_phi_reg_607;
                end if;
            end if; 
        end if;
    end process;

    b_2_load_phi_reg_685_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    b_2_load_phi_reg_685 <= b_2_load_phi_reg_685;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    b_2_load_phi_reg_685 <= b_2_q1;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    b_2_load_phi_reg_685 <= ap_phi_reg_pp0_iter1_b_2_load_phi_reg_685;
                end if;
            end if; 
        end if;
    end process;

    b_3_load_1_phi_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    b_3_load_1_phi_reg_555 <= b_3_load_1_phi_reg_555;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    b_3_load_1_phi_reg_555 <= b_3_q0;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    b_3_load_1_phi_reg_555 <= ap_phi_reg_pp0_iter1_b_3_load_1_phi_reg_555;
                end if;
            end if; 
        end if;
    end process;

    b_3_load_phi_reg_581_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_327)) then
                if ((do_init_reg_303 = ap_const_lv1_0)) then 
                    b_3_load_phi_reg_581 <= b_3_load_phi_reg_581;
                elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
                    b_3_load_phi_reg_581 <= b_3_q1;
                elsif (not((tmp_8_reg_1039 = ap_const_lv1_1))) then 
                    b_3_load_phi_reg_581 <= ap_phi_reg_pp0_iter1_b_3_load_phi_reg_581;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_reg_1039 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                do_init_reg_303 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_reg_1039 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                do_init_reg_303 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i1_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_reg_1039 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i1_reg_318 <= trunc_ln6_reg_1034;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_reg_1039 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                i1_reg_318 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                add_ln859_1_reg_1098 <= grp_fu_940_p3;
                add_ln859_reg_1093 <= grp_fu_935_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_init_pp0_iter1_reg <= ap_loop_init;
                ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
                lshr_ln_reg_1025 <= ap_phi_mux_i1_phi_fu_321_p6(2 downto 1);
                tmp_1_reg_1048 <= tmp_1_fu_820_p5;
                tmp_2_reg_1053 <= tmp_2_fu_831_p5;
                tmp_3_reg_1058 <= tmp_3_fu_842_p5;
                tmp_4_reg_1063 <= tmp_4_fu_858_p6;
                tmp_5_reg_1068 <= tmp_5_fu_872_p6;
                tmp_6_reg_1073 <= tmp_6_fu_886_p6;
                tmp_7_reg_1078 <= tmp_7_fu_900_p6;
                tmp_8_reg_1039 <= i_fu_791_p2(3 downto 3);
                tmp_8_reg_1039_pp0_iter1_reg <= tmp_8_reg_1039;
                tmp_reg_1043 <= tmp_fu_809_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_init_pp0_iter3_reg <= ap_loop_init_pp0_iter2_reg;
                ap_loop_init_pp0_iter4_reg <= ap_loop_init_pp0_iter3_reg;
                ap_loop_init_pp0_iter5_reg <= ap_loop_init_pp0_iter4_reg;
                ap_loop_init_pp0_iter6_reg <= ap_loop_init_pp0_iter5_reg;
                ap_loop_init_pp0_iter7_reg <= ap_loop_init_pp0_iter6_reg;
                ap_loop_init_pp0_iter8_reg <= ap_loop_init_pp0_iter7_reg;
                mul_ln859_2_reg_1088 <= grp_fu_931_p2;
                mul_ln859_reg_1083 <= grp_fu_927_p2;
                tmp_2_reg_1053_pp0_iter2_reg <= tmp_2_reg_1053;
                tmp_2_reg_1053_pp0_iter3_reg <= tmp_2_reg_1053_pp0_iter2_reg;
                tmp_3_reg_1058_pp0_iter2_reg <= tmp_3_reg_1058;
                tmp_3_reg_1058_pp0_iter3_reg <= tmp_3_reg_1058_pp0_iter2_reg;
                tmp_6_reg_1073_pp0_iter2_reg <= tmp_6_reg_1073;
                tmp_6_reg_1073_pp0_iter3_reg <= tmp_6_reg_1073_pp0_iter2_reg;
                tmp_7_reg_1078_pp0_iter2_reg <= tmp_7_reg_1078;
                tmp_7_reg_1078_pp0_iter3_reg <= tmp_7_reg_1078_pp0_iter2_reg;
                tmp_8_reg_1039_pp0_iter2_reg <= tmp_8_reg_1039_pp0_iter1_reg;
                tmp_8_reg_1039_pp0_iter3_reg <= tmp_8_reg_1039_pp0_iter2_reg;
                tmp_8_reg_1039_pp0_iter4_reg <= tmp_8_reg_1039_pp0_iter3_reg;
                tmp_8_reg_1039_pp0_iter5_reg <= tmp_8_reg_1039_pp0_iter4_reg;
                tmp_8_reg_1039_pp0_iter6_reg <= tmp_8_reg_1039_pp0_iter5_reg;
                tmp_8_reg_1039_pp0_iter7_reg <= tmp_8_reg_1039_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln6_reg_1034 <= trunc_ln6_fu_797_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_0_address0 <= ap_const_lv64_1(1 - 1 downto 0);
    a_0_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    a_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_0_ce0 <= ap_const_logic_1;
        else 
            a_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_0_ce1 <= ap_const_logic_1;
        else 
            a_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_1_address0 <= ap_const_lv64_1(1 - 1 downto 0);
    a_1_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    a_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_1_ce0 <= ap_const_logic_1;
        else 
            a_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_1_ce1 <= ap_const_logic_1;
        else 
            a_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_2_address0 <= ap_const_lv64_1(1 - 1 downto 0);
    a_2_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    a_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_2_ce0 <= ap_const_logic_1;
        else 
            a_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_2_ce1 <= ap_const_logic_1;
        else 
            a_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_3_address0 <= ap_const_lv64_1(1 - 1 downto 0);
    a_3_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    a_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_3_ce0 <= ap_const_logic_1;
        else 
            a_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_3_ce1 <= ap_const_logic_1;
        else 
            a_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_V_fu_918_p2 <= std_logic_vector(unsigned(ap_phi_mux_acc_V2_phi_fu_767_p6) + unsigned(add_ln859_2_fu_914_p2));
    add_ln859_2_fu_914_p2 <= std_logic_vector(signed(add_ln859_1_reg_1098) + signed(add_ln859_reg_1093));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_327_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_327 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_8_fu_801_p3)
    begin
        if (((tmp_8_fu_801_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to7 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_a_0_load_1_phi_phi_fu_676_p4_assign_proc : process(a_0_q0, do_init_reg_303, a_0_load_1_phi_reg_672, ap_phi_reg_pp0_iter1_a_0_load_1_phi_reg_672)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_a_0_load_1_phi_phi_fu_676_p4 <= a_0_load_1_phi_reg_672;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_a_0_load_1_phi_phi_fu_676_p4 <= a_0_q0;
        else 
            ap_phi_mux_a_0_load_1_phi_phi_fu_676_p4 <= ap_phi_reg_pp0_iter1_a_0_load_1_phi_reg_672;
        end if; 
    end process;


    ap_phi_mux_a_0_load_phi_phi_fu_754_p4_assign_proc : process(a_0_q1, do_init_reg_303, a_0_load_phi_reg_750, ap_phi_reg_pp0_iter1_a_0_load_phi_reg_750)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_a_0_load_phi_phi_fu_754_p4 <= a_0_load_phi_reg_750;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_a_0_load_phi_phi_fu_754_p4 <= a_0_q1;
        else 
            ap_phi_mux_a_0_load_phi_phi_fu_754_p4 <= ap_phi_reg_pp0_iter1_a_0_load_phi_reg_750;
        end if; 
    end process;


    ap_phi_mux_a_1_load_1_phi_phi_fu_663_p4_assign_proc : process(a_1_q0, do_init_reg_303, a_1_load_1_phi_reg_659, ap_phi_reg_pp0_iter1_a_1_load_1_phi_reg_659)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_a_1_load_1_phi_phi_fu_663_p4 <= a_1_load_1_phi_reg_659;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_a_1_load_1_phi_phi_fu_663_p4 <= a_1_q0;
        else 
            ap_phi_mux_a_1_load_1_phi_phi_fu_663_p4 <= ap_phi_reg_pp0_iter1_a_1_load_1_phi_reg_659;
        end if; 
    end process;


    ap_phi_mux_a_1_load_phi_phi_fu_741_p4_assign_proc : process(a_1_q1, do_init_reg_303, a_1_load_phi_reg_737, ap_phi_reg_pp0_iter1_a_1_load_phi_reg_737)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_a_1_load_phi_phi_fu_741_p4 <= a_1_load_phi_reg_737;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_a_1_load_phi_phi_fu_741_p4 <= a_1_q1;
        else 
            ap_phi_mux_a_1_load_phi_phi_fu_741_p4 <= ap_phi_reg_pp0_iter1_a_1_load_phi_reg_737;
        end if; 
    end process;


    ap_phi_mux_a_2_load_1_phi_phi_fu_650_p4_assign_proc : process(a_2_q0, do_init_reg_303, a_2_load_1_phi_reg_646, ap_phi_reg_pp0_iter1_a_2_load_1_phi_reg_646)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_a_2_load_1_phi_phi_fu_650_p4 <= a_2_load_1_phi_reg_646;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_a_2_load_1_phi_phi_fu_650_p4 <= a_2_q0;
        else 
            ap_phi_mux_a_2_load_1_phi_phi_fu_650_p4 <= ap_phi_reg_pp0_iter1_a_2_load_1_phi_reg_646;
        end if; 
    end process;


    ap_phi_mux_a_2_load_phi_phi_fu_728_p4_assign_proc : process(a_2_q1, do_init_reg_303, a_2_load_phi_reg_724, ap_phi_reg_pp0_iter1_a_2_load_phi_reg_724)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_a_2_load_phi_phi_fu_728_p4 <= a_2_load_phi_reg_724;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_a_2_load_phi_phi_fu_728_p4 <= a_2_q1;
        else 
            ap_phi_mux_a_2_load_phi_phi_fu_728_p4 <= ap_phi_reg_pp0_iter1_a_2_load_phi_reg_724;
        end if; 
    end process;


    ap_phi_mux_a_3_load_1_phi_phi_fu_572_p4_assign_proc : process(a_3_q0, do_init_reg_303, a_3_load_1_phi_reg_568, ap_phi_reg_pp0_iter1_a_3_load_1_phi_reg_568)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_a_3_load_1_phi_phi_fu_572_p4 <= a_3_load_1_phi_reg_568;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_a_3_load_1_phi_phi_fu_572_p4 <= a_3_q0;
        else 
            ap_phi_mux_a_3_load_1_phi_phi_fu_572_p4 <= ap_phi_reg_pp0_iter1_a_3_load_1_phi_reg_568;
        end if; 
    end process;


    ap_phi_mux_a_3_load_phi_phi_fu_598_p4_assign_proc : process(a_3_q1, do_init_reg_303, a_3_load_phi_reg_594, ap_phi_reg_pp0_iter1_a_3_load_phi_reg_594)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_a_3_load_phi_phi_fu_598_p4 <= a_3_load_phi_reg_594;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_a_3_load_phi_phi_fu_598_p4 <= a_3_q1;
        else 
            ap_phi_mux_a_3_load_phi_phi_fu_598_p4 <= ap_phi_reg_pp0_iter1_a_3_load_phi_reg_594;
        end if; 
    end process;


    ap_phi_mux_acc_V2_phi_fu_767_p6_assign_proc : process(acc_V2_reg_763, ap_loop_init_pp0_iter8_reg)
    begin
        if ((ap_loop_init_pp0_iter8_reg = ap_const_logic_1)) then 
            ap_phi_mux_acc_V2_phi_fu_767_p6 <= ap_const_lv16_0;
        else 
            ap_phi_mux_acc_V2_phi_fu_767_p6 <= acc_V2_reg_763;
        end if; 
    end process;


    ap_phi_mux_b_0_load_1_phi_phi_fu_637_p4_assign_proc : process(b_0_q0, do_init_reg_303, b_0_load_1_phi_reg_633, ap_phi_reg_pp0_iter1_b_0_load_1_phi_reg_633)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_b_0_load_1_phi_phi_fu_637_p4 <= b_0_load_1_phi_reg_633;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_b_0_load_1_phi_phi_fu_637_p4 <= b_0_q0;
        else 
            ap_phi_mux_b_0_load_1_phi_phi_fu_637_p4 <= ap_phi_reg_pp0_iter1_b_0_load_1_phi_reg_633;
        end if; 
    end process;


    ap_phi_mux_b_0_load_phi_phi_fu_715_p4_assign_proc : process(b_0_q1, do_init_reg_303, b_0_load_phi_reg_711, ap_phi_reg_pp0_iter1_b_0_load_phi_reg_711)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_b_0_load_phi_phi_fu_715_p4 <= b_0_load_phi_reg_711;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_b_0_load_phi_phi_fu_715_p4 <= b_0_q1;
        else 
            ap_phi_mux_b_0_load_phi_phi_fu_715_p4 <= ap_phi_reg_pp0_iter1_b_0_load_phi_reg_711;
        end if; 
    end process;


    ap_phi_mux_b_1_load_1_phi_phi_fu_624_p4_assign_proc : process(b_1_q0, do_init_reg_303, b_1_load_1_phi_reg_620, ap_phi_reg_pp0_iter1_b_1_load_1_phi_reg_620)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_b_1_load_1_phi_phi_fu_624_p4 <= b_1_load_1_phi_reg_620;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_b_1_load_1_phi_phi_fu_624_p4 <= b_1_q0;
        else 
            ap_phi_mux_b_1_load_1_phi_phi_fu_624_p4 <= ap_phi_reg_pp0_iter1_b_1_load_1_phi_reg_620;
        end if; 
    end process;


    ap_phi_mux_b_1_load_phi_phi_fu_702_p4_assign_proc : process(b_1_q1, do_init_reg_303, b_1_load_phi_reg_698, ap_phi_reg_pp0_iter1_b_1_load_phi_reg_698)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_b_1_load_phi_phi_fu_702_p4 <= b_1_load_phi_reg_698;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_b_1_load_phi_phi_fu_702_p4 <= b_1_q1;
        else 
            ap_phi_mux_b_1_load_phi_phi_fu_702_p4 <= ap_phi_reg_pp0_iter1_b_1_load_phi_reg_698;
        end if; 
    end process;


    ap_phi_mux_b_2_load_1_phi_phi_fu_611_p4_assign_proc : process(b_2_q0, do_init_reg_303, b_2_load_1_phi_reg_607, ap_phi_reg_pp0_iter1_b_2_load_1_phi_reg_607)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_b_2_load_1_phi_phi_fu_611_p4 <= b_2_load_1_phi_reg_607;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_b_2_load_1_phi_phi_fu_611_p4 <= b_2_q0;
        else 
            ap_phi_mux_b_2_load_1_phi_phi_fu_611_p4 <= ap_phi_reg_pp0_iter1_b_2_load_1_phi_reg_607;
        end if; 
    end process;


    ap_phi_mux_b_2_load_phi_phi_fu_689_p4_assign_proc : process(b_2_q1, do_init_reg_303, b_2_load_phi_reg_685, ap_phi_reg_pp0_iter1_b_2_load_phi_reg_685)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_b_2_load_phi_phi_fu_689_p4 <= b_2_load_phi_reg_685;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_b_2_load_phi_phi_fu_689_p4 <= b_2_q1;
        else 
            ap_phi_mux_b_2_load_phi_phi_fu_689_p4 <= ap_phi_reg_pp0_iter1_b_2_load_phi_reg_685;
        end if; 
    end process;


    ap_phi_mux_b_3_load_1_phi_phi_fu_559_p4_assign_proc : process(b_3_q0, do_init_reg_303, b_3_load_1_phi_reg_555, ap_phi_reg_pp0_iter1_b_3_load_1_phi_reg_555)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_b_3_load_1_phi_phi_fu_559_p4 <= b_3_load_1_phi_reg_555;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_b_3_load_1_phi_phi_fu_559_p4 <= b_3_q0;
        else 
            ap_phi_mux_b_3_load_1_phi_phi_fu_559_p4 <= ap_phi_reg_pp0_iter1_b_3_load_1_phi_reg_555;
        end if; 
    end process;


    ap_phi_mux_b_3_load_phi_phi_fu_585_p4_assign_proc : process(b_3_q1, do_init_reg_303, b_3_load_phi_reg_581, ap_phi_reg_pp0_iter1_b_3_load_phi_reg_581)
    begin
        if ((do_init_reg_303 = ap_const_lv1_0)) then 
            ap_phi_mux_b_3_load_phi_phi_fu_585_p4 <= b_3_load_phi_reg_581;
        elsif ((do_init_reg_303 = ap_const_lv1_1)) then 
            ap_phi_mux_b_3_load_phi_phi_fu_585_p4 <= b_3_q1;
        else 
            ap_phi_mux_b_3_load_phi_phi_fu_585_p4 <= ap_phi_reg_pp0_iter1_b_3_load_phi_reg_581;
        end if; 
    end process;


    ap_phi_mux_i1_phi_fu_321_p6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i1_reg_318, trunc_ln6_reg_1034, tmp_8_reg_1039, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_8_reg_1039 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i1_phi_fu_321_p6 <= trunc_ln6_reg_1034;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_8_reg_1039 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_phi_mux_i1_phi_fu_321_p6 <= ap_const_lv3_0;
        else 
            ap_phi_mux_i1_phi_fu_321_p6 <= i1_reg_318;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_a_0_load_1_phi_reg_672 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_a_0_load_phi_reg_750 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_a_1_load_1_phi_reg_659 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_a_1_load_phi_reg_737 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_a_2_load_1_phi_reg_646 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_a_2_load_phi_reg_724 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_a_3_load_1_phi_reg_568 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_a_3_load_phi_reg_594 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_b_0_load_1_phi_reg_633 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_b_0_load_phi_reg_711 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_b_1_load_1_phi_reg_620 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_b_1_load_phi_reg_698 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_b_2_load_1_phi_reg_607 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_b_2_load_phi_reg_685 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_b_3_load_1_phi_reg_555 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_b_3_load_phi_reg_581 <= "XXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_idle_pp0_0to7, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_0to7 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    b_0_address0 <= ap_const_lv64_1(1 - 1 downto 0);
    b_0_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_0_ce1 <= ap_const_logic_1;
        else 
            b_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_1_address0 <= ap_const_lv64_1(1 - 1 downto 0);
    b_1_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_1_ce1 <= ap_const_logic_1;
        else 
            b_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_2_address0 <= ap_const_lv64_1(1 - 1 downto 0);
    b_2_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    b_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_2_ce0 <= ap_const_logic_1;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_2_ce1 <= ap_const_logic_1;
        else 
            b_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_3_address0 <= ap_const_lv64_1(1 - 1 downto 0);
    b_3_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    b_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_3_ce0 <= ap_const_logic_1;
        else 
            b_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_3_ce1 <= ap_const_logic_1;
        else 
            b_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_927_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_927_ce <= ap_const_logic_1;
        else 
            grp_fu_927_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_931_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_931_ce <= ap_const_logic_1;
        else 
            grp_fu_931_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_935_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_935_ce <= ap_const_logic_1;
        else 
            grp_fu_935_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_940_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_940_ce <= ap_const_logic_1;
        else 
            grp_fu_940_ce <= ap_const_logic_0;
        end if; 
    end process;

    i1_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i1_phi_fu_321_p6),4));
    i_fu_791_p2 <= std_logic_vector(unsigned(i1_cast_fu_777_p1) + unsigned(ap_const_lv4_4));
    or_ln1317_fu_853_p2 <= (lshr_ln_reg_1025 or ap_const_lv2_1);
    s <= std_logic_vector(unsigned(ap_phi_mux_acc_V2_phi_fu_767_p6) + unsigned(add_ln859_2_fu_914_p2));

    s_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, tmp_8_reg_1039_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (tmp_8_reg_1039_pp0_iter7_reg = ap_const_lv1_1))) then 
            s_ap_vld <= ap_const_logic_1;
        else 
            s_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_8_fu_801_p3 <= i_fu_791_p2(3 downto 3);
    trunc_ln6_fu_797_p1 <= i_fu_791_p2(3 - 1 downto 0);
end behav;
